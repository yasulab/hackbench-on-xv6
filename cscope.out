cscope 15 $HOME/seminars/osrg/xv6               0000304979
	@Makefile

1 
	gOBJS
 = \

2 
bio
.
o
\

3 
c⁄sﬁe
.
o
\

4 
exec
.
o
\

5 
fûe
.
o
\

6 
fs
.
o
\

7 
ide
.
o
\

8 
iﬂpic
.
o
\

9 
kÆloc
.
o
\

10 
kbd
.
o
\

11 
œpic
.
o
\

12 
maö
.
o
\

13 
mp
.
o
\

14 
picúq
.
o
\

15 
pùe
.
o
\

16 
¥oc
.
o
\

17 
•ölock
.
o
\

18 
°rög
.
o
\

19 
swtch
.
o
\

20 
sysˇŒ
.
o
\

21 
sysfûe
.
o
\

22 
sy•roc
.
o
\

23 
timî
.
o
\

24 
å≠asm
.
o
\

25 
å≠
.
o
\

26 
ve˘‹s
.
o
\

28 #Cross-
compûög
 (
e
.
g
., 
⁄
 
Mac
 
OS
 
X
)

29 #TOOLPREFIX = 
i386
-
jos
-
ñf
-

31 #Usög 
«tive
 
toﬁs
 (
e
.
g
., 
⁄
 
X86
 
Löux
)

32 
	gTOOLPREFIX
 =

34 
CC
 = 
	$$
(
TOOLPREFIX
)
gcc


35 
AS
 = 
	$$
(
TOOLPREFIX
)
gas


36 
LD
 = 
	$$
(
TOOLPREFIX
)
ld


37 
OBJCOPY
 = 
	$$
(
TOOLPREFIX
)
objc›y


38 
OBJDUMP
 = 
	$$
(
TOOLPREFIX
)
objdump


39 
CFLAGS
 = -
‚o
-
buûtö
 -
O2
 -
WÆl
 -
MD
 -
ggdb
 -
m32


40 
CFLAGS
 +
	`$
(
shñl
 $(
CC
Ë-
‚o
-
°ack
-
¥Ÿe˘‹
 -
E
 -
x
 
c
 /
dev
/
nuŒ
 >/dev/nuŒ 2>&1 && 
echo
 -fno-stack-protector)

41 
ASFLAGS
 = -
m32


42 #FªeBSD 
ld
 
w™ts
 ``
ñf_i386_fbsd
''

43 
LDFLAGS
 +-
m
 
	`$
(
shñl
 $(
LD
Ë-
V
 | 
gªp
 
ñf_i386
 2>/
dev
/
nuŒ
)

45 
xv6
.
img
: 
boŸblock
 
kî√l
 
fs
.img

46 
dd
 =/
dev
/
zîo
 
of
=
xv6
.
img
 
cou¡
=10000

47 
dd
 =
boŸblock
 
of
=
xv6
.
img
 
c⁄v
=
nŸrunc


48 
dd
 =
kî√l
 
of
=
xv6
.
img
 
£ek
=1 
c⁄v
=
nŸrunc


50 
boŸblock
: 
boŸasm
.
S
 
boŸmaö
.
c


51 
	`$
(
CC
Ë$(
CFLAGS
Ë-
O
 -
no°döc
 -
I
. -
c
 
boŸmaö
.c

52 
	`$
(
CC
Ë$(
CFLAGS
Ë-
no°döc
 -
I
. -
c
 
boŸasm
.
S


53 
	`$
(
LD
Ë$(
LDFLAGS
Ë-
N
 -
e
 
°¨t
 -
Tãxt
 0x7C00 -
o
 
boŸblock
.ÿ
boŸasm
.ÿ
boŸmaö
.o

54 
	`$
(
OBJDUMP
Ë-
S
 
boŸblock
.
o
 > boŸblock.
asm


55 
	`$
(
OBJCOPY
Ë-
S
 -
O
 
bö¨y
 
boŸblock
.
o
 bootblock

56 ./
sign
.
∂
 
boŸblock


58 
boŸŸhî
: boŸŸhî.
S


59 
	`$
(
CC
Ë$(
CFLAGS
Ë-
no°döc
 -
I
. -
c
 
boŸŸhî
.
S


60 
	`$
(
LD
Ë$(
LDFLAGS
Ë-
N
 -
e
 
°¨t
 -
Tãxt
 0x7000 -
o
 
boŸŸhî
.
out
 bootother.o

61 
	`$
(
OBJCOPY
Ë-
S
 -
O
 
bö¨y
 
boŸŸhî
.
out
 bootother

62 
	`$
(
OBJDUMP
Ë-
S
 
boŸŸhî
.
o
 > boŸŸhî.
asm


64 
öôcode
: inôcode.
S


65 
	`$
(
CC
Ë$(
CFLAGS
Ë-
no°döc
 -
I
. -
c
 
öôcode
.
S


66 
	`$
(
LD
Ë$(
LDFLAGS
Ë-
N
 -
e
 
°¨t
 -
Tãxt
 0 -
o
 
öôcode
.
out
 initcode.o

67 
	`$
(
OBJCOPY
Ë-
S
 -
O
 
bö¨y
 
öôcode
.
out
 initcode

68 
	`$
(
OBJDUMP
Ë-
S
 
öôcode
.
o
 > inôcode.
asm


70 
kî√l
: 
	$$
(
OBJS
Ë
boŸŸhî
 
öôcode


71 
	`$
(
LD
Ë$(
LDFLAGS
Ë-
Tãxt
 0x100000 -
e
 
maö
 -
o
 
kî√l
 $(
OBJS
Ë-
b
 
bö¨y
 
öôcode
 
boŸŸhî


72 
	`$
(
OBJDUMP
Ë-
S
 
kî√l
 > kî√l.
asm


73 
	`$
(
OBJDUMP
Ë-
t
 
kî√l
 | 
£d
 '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kî√l.
sym


75 
ègs
: 
	$$
(
OBJS
Ë
boŸŸhî
.
S
 
_öô


76 
ëags
 *.
S
 *.
c


78 
ve˘‹s
.
S
: ve˘‹s.
∂


79 
≥æ
 
ve˘‹s
.
∂
 > ve˘‹s.
S


81 
ULIB
 = 
ulib
.
o
 
usys
.ÿ
¥ötf
.ÿ
umÆloc
.o

83 
_
%: %.
o
 
	`$
(
ULIB
)

84 
	`$
(
LD
Ë$(
LDFLAGS
Ë-
N
 -
e
 
maö
 -
Tãxt
 0 -
o
 
$
@ $^

85 
	`$
(
OBJDUMP
Ë-
S
 
$
@ > $*.
asm


86 
	`$
(
OBJDUMP
Ë-
t
 
$
@ | 
£d
 '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.
sym


88 
_f‹kã°
: 
f‹kã°
.
o
 
	$$
(
ULIB
)

89 #f‹kã° 
has
 
Àss
 
libøry
 
code
 
löked
 
ö
 - 
√eds
 
to
 
be
 
smÆl


90 #ö 
‹dî
 
to
 
be
 
abÀ
Åÿ
max
 
out
 
the
 
¥oc
 
èbÀ
.

91 
	`$
(
LD
Ë$(
LDFLAGS
Ë-
N
 -
e
 
maö
 -
Tãxt
 0 -
o
 
_f‹kã°
 
f‹kã°
.ÿ
ulib
.ÿ
usys
.o

92 
	`$
(
OBJDUMP
Ë-
S
 
_f‹kã°
 > 
f‹kã°
.
asm


94 
mkfs
: mkfs.
c
 
fs
.
h


95 
gcc
 
	`$
(
CFLAGS
Ë-
WÆl
 -
o
 
mkfs
 mkfs.
c


97 
UPROGS
=\

98 
_ˇt
\

99 
_echo
\

100 
_f‹kã°
\

101 
_gªp
\

102 
_öô
\

103 
_kûl
\

104 
_ 
\

105 
_ls
\

106 
_mkdú
\

107 
_rm
\

108 
_sh
\

109 
_u£πe°s
\

110 
_wc
\

111 
_zombõ
\

113 
fs
.
img
: 
mkfs
 
README
 
	`$
(
UPROGS
)

114 ./
mkfs
 
fs
.
img
 
README
 
	`$
(
UPROGS
)

116 -
ö˛ude
 *.
d


118 
˛ón
:

119 
rm
 -
f
 *.
ãx
 *.
dvi
 *.
idx
 *.
aux
 *.
log
 *.
öd
 *.
ûg
 \

120 *.
o
 *.
d
 *.
asm
 *.
sym
 
ve˘‹s
.
S
 
∑Ω‹t
.
out
 \

121 
boŸblock
 
kî√l
 
xv6
.
img
 
fs
.img 
mkfs
 \

122 
	$$
(
UPROGS
)

124 #makê
a
 
¥ötout


125 
FILES
 = 
	`$
(
shñl
 
gªp
 -
v
 '^\#' 
runoff
.
li°
)

126 
PRINT
 = 
runoff
.
li°
 
	$$
(
FILES
)

128 
xv6
.
pdf
: 
	`$
(
PRINT
)

129 ./
runoff


131 
¥öt
: 
xv6
.
pdf


133 #ru¿
ö
 
emuœt‹s


135 
bochs
 : 
fs
.
img
 
xv6
.img

136 [ ! -
e
 .
boch§c
 ]; 
thí
 
 
 -
s
 
dŸ
-boch§¯.boch§c; 
fi


137 
bochs
 -
q


139 
qemu
: 
fs
.
img
 
xv6
.img

140 
qemu
 -
∑øŒñ
 
°dio
 -
hdb
 
fs
.
img
 
xv6
.img

	@asm.h

5 
	#SEG_NULLASM
 \

6 .
w‹d
 0, 0; \

7 .
byã
 0, 0, 0, 0

	)

9 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

10 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

11 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

12 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

14 
	#STA_X
 0x8

15 
	#STA_E
 0x4

16 
	#STA_C
 0x4

17 
	#STA_W
 0x2

18 
	#STA_R
 0x2

19 
	#STA_A
 0x1

	@bio.c

24 
	~"ty≥s.h
"

25 
	~"defs.h
"

26 
	~"∑øm.h
"

27 
	~"•ölock.h
"

28 
	~"buf.h
"

30 
buf
 
	gbuf
[
NBUF
];

31 
•ölock
 
	gbuf_èbÀ_lock
;

36 
buf
 
	gbufhód
;

39 
	$böô
()

41 
buf
 *
b
;

43 
	`öôlock
(&
buf_èbÀ_lock
, "buf_table");

46 
bufhód
.
¥ev
 = &bufhead;

47 
bufhód
.
√xt
 = &bufhead;

48 
b
 = 
buf
; b < buf+
NBUF
; b++){

49 
b
->
√xt
 = 
bufhód
.next;

50 
b
->
¥ev
 = &
bufhód
;

51 
bufhód
.
√xt
->
¥ev
 = 
b
;

52 
bufhód
.
√xt
 = 
b
;

54 
	}
}

59 
buf
*

60 
	$bgë
(
uöt
 
dev
, uöà
£˘‹
)

62 
buf
 *
b
;

64 
	`acquúe
(&
buf_èbÀ_lock
);

66 
lo›
:

68 
b
 = 
bufhód
.
√xt
; b != &bufhead; b = b->next){

69 if((
b
->
Êags
 & (
B_BUSY
|
B_VALID
)) &&

70 
b
->
dev
 =dev && b->
£˘‹
 == sector){

71 if(
b
->
Êags
 & 
B_BUSY
){

72 
	`¶ìp
(
buf
, &
buf_èbÀ_lock
);

73 
lo›
;

75 
b
->
Êags
 |
B_BUSY
;

76 
	`ªÀa£
(&
buf_èbÀ_lock
);

77  
b
;

82 
b
 = 
bufhód
.
¥ev
; b != &bufhead; b = b->prev){

83 if((
b
->
Êags
 & 
B_BUSY
) == 0){

84 
b
->
Êags
 = 
B_BUSY
;

85 
b
->
dev
 = dev;

86 
b
->
£˘‹
 = sector;

87 
	`ªÀa£
(&
buf_èbÀ_lock
);

88  
b
;

91 
	`∑nic
("bget:Ço buffers");

92 
	}
}

95 
buf
*

96 
	$bªad
(
uöt
 
dev
, uöà
£˘‹
)

98 
buf
 *
b
;

100 
b
 = 
	`bgë
(
dev
, 
£˘‹
);

101 if(!(
b
->
Êags
 & 
B_VALID
))

102 
	`ide_rw
(
b
);

103  
b
;

104 
	}
}

108 
	$bwrôe
(
buf
 *
b
)

110 if((
b
->
Êags
 & 
B_BUSY
) == 0)

111 
	`∑nic
("bwrite");

112 
b
->
Êags
 |
B_DIRTY
;

113 
	`ide_rw
(
b
);

114 
	}
}

118 
	$bªl£
(
buf
 *
b
)

120 if((
b
->
Êags
 & 
B_BUSY
) == 0)

121 
	`∑nic
("brelse");

123 
	`acquúe
(&
buf_èbÀ_lock
);

125 
b
->
√xt
->
¥ev
 = b->prev;

126 
b
->
¥ev
->
√xt
 = b->next;

127 
b
->
√xt
 = 
bufhód
.next;

128 
b
->
¥ev
 = &
bufhód
;

129 
bufhód
.
√xt
->
¥ev
 = 
b
;

130 
bufhód
.
√xt
 = 
b
;

132 
b
->
Êags
 &~
B_BUSY
;

133 
	`wakeup
(
buf
);

135 
	`ªÀa£
(&
buf_èbÀ_lock
);

136 
	}
}

	@bootasm.S

1 
	~"asm.h
"

3 #Sèπ 
the
 
fú°
 
CPU
: 
to
 32-
bô
 
¥Ÿe˘ed
 
mode
, 
jump
 
öto
 
C
.

4 #Thê
BIOS
 
lﬂds
 
this
 
code
 
‰om
 
the
 
fú°
 
£˘‹
 
of
Åhê
h¨d
 
disk
 
öto


5 #mem‹y 
©
 
physiˇl
 
addªss
 0x7c00 
™d
 
°¨ts
 
executög
 
ö
 
ªÆ
 
mode


6 #wôh %
cs
=0 %
ù
=7c00.

8 .
£t
 
	gPROT_MODE_CSEG
, 0x8 #kî√»
code
 
£gmít
 
	g£À˘‹


9 .
£t
 
	gPROT_MODE_DSEG
, 0x10 #kî√»
d©a
 
£gmít
 
	g£À˘‹


10 .
£t
 
	gCR0_PE_ON
, 0x1 #¥Ÿe˘ed 
mode
 
íabÀ
 
	gÊag


12 .
globl
 
°¨t


13 
	g°¨t
:

14 .
code16
 #As£mbÀ 16-
bô
 
mode


15 
˛i
 #DißbÀ 
öãºu±s


16 
˛d
 #Såög 
›î©i⁄s
 
ö¸emít


18 #Së 
up
 
the
 
imp‹è¡
 
d©a
 
£gmít
 
ªgi°îs
 (
DS
, 
ES
, 
SS
).

19 
	gx‹w
 %
	gax
,%ax #Segmíà
numbî
 
zîo


20 
	gmovw
 %
	gax
,%
	gds
 #-> 
D©a
 
Segmít


21 
	gmovw
 %
	gax
,%
	ges
 #-> 
Exåa
 
Segmít


22 
	gmovw
 %
	gax
,%
	gss
 #-> 
Sèck
 
	gSegmít


24 #E«bÀ 
A20
:

25 #F‹ 
backw¨ds
 
com∑tibûôy
 
wôh
 
the
 
óæõ°
 
PCs
, 
physiˇl


26 #addªs†
löe
 20 
is
 
tõd
 
low
, 
so
 
th©
 
addªs£s
 
highî
 
th™


27 #1
MB
 
wøp
 
¨ound
 
to
 
zîo
 
by
 . 
This
 
code
 
und€s
 
this
.

28 
	g£è20
.1:

29 
öb
 
$0x64
,%
	gÆ
 #Waô 
nŸ
 
busy


30 
ã°b
 
	g$0x2
,%
Æ


31 
jnz
 
	g£è20
.1

33 
movb
 
	g$0xd1
,%
	gÆ
 #0
	gxd1
 -> 
	gp‹t
 0x64

34 
	goutb
 %
	gÆ
,
$0x64


36 
	g£è20
.2:

37 
öb
 
$0x64
,%
	gÆ
 #Waô 
nŸ
 
busy


38 
ã°b
 
	g$0x2
,%
Æ


39 
jnz
 
	g£è20
.2

41 
movb
 
	g$0xdf
,%
	gÆ
 #0
	gxdf
 -> 
	gp‹t
 0x60

42 
	goutb
 %
	gÆ
,
	g$0x60


44 #Swôch 
‰om
 
ªÆ
 
to
 
¥Ÿe˘ed
 
mode
, 
usög
 
a
 
boŸ°øp
 
GDT


45 #™d 
£gmít
 
å™¶©i⁄
 
th©
 
makes
 
vútuÆ
 
addªs£s


46 #idítiˇ»
to
 
physiˇl
 
addªs£s
, 
so
 
th©
 
the


47 #ef„˘ivê
mem‹y
 
m≠
 
d€s
 
nŸ
 
ch™ge
 
durög
 
the
 .

48 
lgdt
 
gdtdesc


49 
	gmovl
 %
	g¸0
, %
óx


50 
‹l
 
	g$CR0_PE_ON
, %
óx


51 
	gmovl
 %
	góx
, %
	g¸0


53 #Jum∞
to
 
√xt
 
ö°ru˘i⁄
, 
but
 
ö
 32-
bô
 
code
 
£gmít
.

54 #Swôche†
¥o˚ss‹
 
öto
 32-
bô
 
mode
.

55 
ljmp
 
	g$PROT_MODE_CSEG
, 
	g$¥Ÿc£g


57 .
	gcode32
 #As£mbÀ 32-
bô
 
mode


58 
	g¥Ÿc£g
:

59 #Së 
up
 
the
 
¥Ÿe˘ed
-
mode
 
d©a
 
£gmít
 
ªgi°îs


60 
movw
 
$PROT_MODE_DSEG
, %
	gax
 #Ou∏
d©a
 
£gmít
 
£À˘‹


61 
	gmovw
 %
	gax
, %
	gds
 #-> 
	gDS
: 
D©a
 
Segmít


62 
movw
 %
ax
, %
	ges
 #-> 
	gES
: 
Exåa
 
Segmít


63 
movw
 %
ax
, %
	gfs
 #-> 
FS


64 
	gmovw
 %
	gax
, %
	ggs
 #-> 
GS


65 
	gmovw
 %
	gax
, %
	gss
 #-> 
	gSS
: 
Sèck
 
Segmít


67 #Së 
up
 
the
 
°ack
 
poöãr
 
™d
 
ˇŒ
 
öto
 
C
.

68 
movl
 
$°¨t
, %
e•


69 
ˇŒ
 
	gboŸmaö


71 #I‡
boŸmaö
 
ªtu∫s
 (
ô
 
shouldn
't),Üoop.

72 
•ö
:

73 
jmp
 
•ö


75 #BoŸ°ø∞
GDT


76 .
p2Æign
 2 #f‹˚ 4 
byã
 
Æignmít


77 
gdt
:

78 
SEG_NULLASM
 #nuŒ 
£g


79 
SEG_ASM
(
STA_X
|
STA_R
, 0x0, 0xffffffffË#codê
£g


80 
	$SEG_ASM
(
STA_W
, 0x0, 0xffffffffË#d©®
£g


82 
gdtdesc
:

83 .
w‹d
 0x17 #sizeof(
gdt
) - 1

84 .
gdt
 #address gdt

	@bootmain.c

8 
	~"ty≥s.h
"

9 
	~"ñf.h
"

10 
	~"x86.h
"

12 
	#SECTSIZE
 512

	)

14 
ªad£g
(
uöt
, uint, uint);

17 
	$boŸmaö
()

19 
ñfhdr
 *
ñf
;

20 
¥oghdr
 *
ph
, *
ïh
;

21 (*
íåy
)();

23 
ñf
 = (
ñfhdr
*)0x10000;

26 
	`ªad£g
((
uöt
)
ñf
, 
SECTSIZE
*8, 0);

29 if(
ñf
->
magic
 !
ELF_MAGIC
)

30 
bad
;

33 
ph
 = (
¥oghdr
*)((
uch¨
*)
ñf
 +Élf->
phoff
);

34 
ïh
 = 
ph
 + 
ñf
->
phnum
;

35 ; 
ph
 < 
ïh
;Öh++)

36 
	`ªad£g
(
ph
->
va
 & 0xFFFFFF,Öh->
memsz
,Öh->
off£t
);

40 
íåy
 = ((*)())(
ñf
->entry & 0xFFFFFF);

41 
	`íåy
();

43 
bad
:

44 
	`outw
(0x8A00, 0x8A00);

45 
	`outw
(0x8A00, 0x8E00);

48 
	}
}

51 
	$waôdisk
()

54 (
	`öb
(0x1F7) & 0xC0) != 0x40)

56 
	}
}

60 
	$ªad£˘
(*
d°
, 
uöt
 
off£t
)

63 
	`waôdisk
();

64 
	`outb
(0x1F2, 1);

65 
	`outb
(0x1F3, 
off£t
);

66 
	`outb
(0x1F4, 
off£t
 >> 8);

67 
	`outb
(0x1F5, 
off£t
 >> 16);

68 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

69 
	`outb
(0x1F7, 0x20);

72 
	`waôdisk
();

73 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

74 
	}
}

79 
	$ªad£g
(
uöt
 
va
, uöà
cou¡
, uöà
off£t
)

81 
uöt
 
eva
;

83 
eva
 = 
va
 + 
cou¡
;

86 
va
 &~(
SECTSIZE
 - 1);

89 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

94 ; 
va
 < 
eva
; v®+
SECTSIZE
, 
off£t
++)

95 
	`ªad£˘
((
uch¨
*)
va
, 
off£t
);

96 
	}
}

	@bootother.S

1 
	~"asm.h
"

3 #Sèπ 
™
 
Aµliˇti⁄
 
Pro˚ss‹
. 
This
 
mu°
 
be
 
∂a˚d
 
⁄
 
a
 4
KB
 
bound¨y


4 #somewhîê
ö
 
the
 1
°
 
MB
 
of
 
c⁄víti⁄Æ
 
mem‹y
 (
APBOOTSTRAP
). 
Howevî
,

5 #duê
to
 
some
 
sh‹tcuts
 
bñow
 
ô
'sÑestricted furtherÅo withinÅhe 1st

6 #64
KB
. 
The
 
AP
 
°¨ts
 
ö
 
ªÆ
-
mode
, 
wôh


7 #CS 
£À˘‹
 
£t
 
to
 
the
 
°¨tup
 
mem‹y
 
addªss
/16;

8 #CS 
ba£
 
£t
 
to
 
°¨tup
 
mem‹y
 
addªss
;

9 #CS 
limô
 
£t
 
to
 64
KB
;

10 #CPL 
™d
 
IP
 
£t
 
to
 0.

11 #
#BoŸŸhî†(
ö
 
maö
.
c
Ë
°¨ts
 
óch
 
n⁄
-
boŸ
 
CPU
 i¿
tu∫
.

12 #Ià
puts
 
the
 
c‹ª˘
 %
e•
 
ö
 
°¨t
-4,

13 #™d 
the
 
∂a˚
 
to
 
jump
Åÿ
ö
 
°¨t
-8.

14 #
#Thi†
code
 
is
 
idítiˇl
 
to
 
boŸasm
.
S
 
ex˚±
:

15 #- 
ô
 
d€s
 
nŸ
 
√ed
 
to
 
íabÀ
 
A20


16 #- 
ô
 
u£s
 
the
 
addªss
 
©
 
°¨t
-4 thê%
e•


17 #- 
ô
 
jumps
 
to
 
the
 
addªss
 
©
 
°¨t
-8 
ö°ód
 
of
 
ˇŒög
 
boŸmaö


19 .
£t
 
	gPROT_MODE_CSEG
, 0x8 #kî√»
code
 
£gmít
 
	g£À˘‹


20 .
£t
 
	gPROT_MODE_DSEG
, 0x10 #kî√»
d©a
 
£gmít
 
	g£À˘‹


21 .
£t
 
	gCR0_PE_ON
, 0x1 #¥Ÿe˘ed 
mode
 
íabÀ
 
	gÊag


23 .
globl
 
°¨t


24 
	g°¨t
:

25 .
code16
 #As£mbÀ 16-
bô
 
mode


26 
˛i
 #DißbÀ 
öãºu±s


27 
˛d
 #Såög 
›î©i⁄s
 
ö¸emít


29 #Së 
up
 
the
 
imp‹è¡
 
d©a
 
£gmít
 
ªgi°îs
 (
DS
, 
ES
, 
SS
).

30 
	gx‹w
 %
	gax
,%ax #Segmíà
numbî
 
zîo


31 
	gmovw
 %
	gax
,%
	gds
 #-> 
D©a
 
Segmít


32 
	gmovw
 %
	gax
,%
	ges
 #-> 
Exåa
 
Segmít


33 
	gmovw
 %
	gax
,%
	gss
 #-> 
Sèck
 
	gSegmít


35 #Swôch 
‰om
 
ªÆ
 
to
 
¥Ÿe˘ed
 
mode
, 
usög
 
a
 
boŸ°øp
 
GDT


36 #™d 
£gmít
 
å™¶©i⁄
 
th©
 
makes
 
vútuÆ
 
addªs£s


37 #idítiˇ»
to
 
theú
 
physiˇl
 
addªs£s
, 
so
 
th©
 
the


38 #ef„˘ivê
mem‹y
 
m≠
 
d€s
 
nŸ
 
ch™ge
 
durög
 
the
 .

39 
lgdt
 
gdtdesc


40 
	gmovl
 %
	g¸0
, %
óx


41 
‹l
 
	g$CR0_PE_ON
, %
óx


42 
	gmovl
 %
	góx
, %
	g¸0


44 #Jum∞
to
 
√xt
 
ö°ru˘i⁄
, 
but
 
ö
 32-
bô
 
code
 
£gmít
.

45 #Swôche†
¥o˚ss‹
 
öto
 32-
bô
 
mode
.

46 
ljmp
 
	g$PROT_MODE_CSEG
, 
	g$¥Ÿc£g


48 .
	gcode32
 #As£mbÀ 32-
bô
 
mode


49 
	g¥Ÿc£g
:

50 #Së 
up
 
the
 
¥Ÿe˘ed
-
mode
 
d©a
 
£gmít
 
ªgi°îs


51 
movw
 
$PROT_MODE_DSEG
, %
	gax
 #Ou∏
d©a
 
£gmít
 
£À˘‹


52 
	gmovw
 %
	gax
, %
	gds
 #-> 
	gDS
: 
D©a
 
Segmít


53 
movw
 %
ax
, %
	ges
 #-> 
	gES
: 
Exåa
 
Segmít


54 
movw
 %
ax
, %
	gfs
 #-> 
FS


55 
	gmovw
 %
	gax
, %
	ggs
 #-> 
GS


56 
	gmovw
 %
	gax
, %
	gss
 #-> 
	gSS
: 
Sèck
 
Segmít


58 
movl
 
°¨t
-4, %
e•


59 
movl
 
	g°¨t
-8, %
óx


60 
	gjmp
 *%
	góx


62 #BoŸ°ø∞
GDT


63 .
	gp2Æign
 2 #f‹˚ 4 
byã
 
Æignmít


64 
	ggdt
:

65 
SEG_NULLASM
 #nuŒ 
£g


66 
SEG_ASM
(
STA_X
|
STA_R
, 0x0, 0xffffffffË#codê
£g


67 
	$SEG_ASM
(
STA_W
, 0x0, 0xffffffffË#d©®
£g


69 
gdtdesc
:

70 .
w‹d
 0x17 #sizeof(
gdt
) - 1

71 .
gdt
 #address gdt

	@buf.h

1 
	sbuf
 {

2 
	mÊags
;

3 
uöt
 
	mdev
;

4 
uöt
 
	m£˘‹
;

5 
buf
 *
	m¥ev
;

6 
buf
 *
	m√xt
;

7 
buf
 *
	mq√xt
;

8 
uch¨
 
	md©a
[512];

10 
	#B_BUSY
 0x1

11 
	#B_VALID
 0x2

12 
	#B_DIRTY
 0x4

13 

	)

	@cat.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

15 
	#DATASIZE
 100

	)

16 
	glo›s
 = 100;

17 
	gu£_pùes
 = 1;

18 
	g°dîr
 = 1

20 
	$b¨f
(c⁄° *
msg
)

22 
	`¥ötf
(
°dîr
, "%†”º‹: %s)\n", 
msg
);

23 
	`exô
(1);

24 
	}
}

26 
	$fd∑ú
(
fds
[2])

28 i‡(
u£_pùes
) {

29 i‡(
	`pùe
(
fds
) == 0)

33 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
fds
) == 0)

36 
	`b¨f
("Creating fdpair");

37 
	}
}

40 
	$ªady
(
ªady_out
, 
wakefd
)

42 
dummy
;

44 
pﬁlfd
Öﬁlfd = { .
fd
 = 
wakefd
, .
evíts
 = 
POLLIN
 };

47 i‡(
	`wrôe
(
ªady_out
, &
dummy
, 1) != 1)

48 
	`b¨f
("CLIENT:Ñeady write");

52 i‡(
	`pﬁl
(&
pﬁlfd
, 1, -1) != 1)

53 
	`b¨f
("poll");

54 
	}
}

57 
	$£ndî
(
num_fds
,

58 
out_fd
[
num_fds
],

59 
ªady_out
,

60 
wakefd
)

62 
d©a
[
DATASIZE
];

63 
i
, 
j
;

65 
	`ªady
(
ªady_out
, 
wakefd
);

68 
i
 = 0; i < 
lo›s
; i++) {

69 
j
 = 0; j < 
num_fds
; j++) {

70 
ªt
, 
d⁄e
 = 0;

72 
agaö
:

73 
ªt
 = 
	`wrôe
(
out_fd
[
j
], 
d©a
 + 
d⁄e
, (data)-done);

74 i‡(
ªt
 < 0)

75 
	`b¨f
("SENDER: write");

76 
d⁄e
 +
ªt
;

77 i‡(
d⁄e
 < (
d©a
))

78 
agaö
;

81 
	}
}

84 
	$ª˚ivî
(
num_∑ckës
,

85 
ö_fd
,

86 
ªady_out
,

87 
wakefd
)

89 
i
;

92 
	`ªady
(
ªady_out
, 
wakefd
);

95 
i
 = 0; i < 
num_∑ckës
; i++) {

96 
d©a
[
DATASIZE
];

97 
ªt
, 
d⁄e
 = 0;

99 
agaö
:

100 
ªt
 = 
	`ªad
(
ö_fd
, 
d©a
 + 
d⁄e
, 
DATASIZE
 - done);

101 i‡(
ªt
 < 0)

102 
	`b¨f
("SERVER:Ñead");

103 
d⁄e
 +
ªt
;

104 i‡(
d⁄e
 < 
DATASIZE
)

105 
agaö
;

107 
	}
}

110 
	$group
(
num_fds
,

111 
ªady_out
,

112 
wakefd
)

114 
i
;

115 
out_fds
[
num_fds
];

117 
i
 = 0; i < 
num_fds
; i++) {

118 
fds
[2];

121 
	`fd∑ú
(
fds
);

124 
	`f‹k
()) {

125 -1: 
	`b¨f
("fork()");

127 
	`˛o£
(
fds
[1]);

128 
	`ª˚ivî
(
num_fds
*
lo›s
, 
fds
[0], 
ªady_out
, 
wakefd
);

129 
	`exô
(0);

132 
out_fds
[
i
] = 
fds
[1];

133 
	`˛o£
(
fds
[0]);

137 
i
 = 0; i < 
num_fds
; i++) {

138 
	`f‹k
()) {

139 -1: 
	`b¨f
("fork()");

141 
	`£ndî
(
num_fds
, 
out_fds
, 
ªady_out
, 
wakefd
);

142 
	`exô
(0);

147 
i
 = 0; i < 
num_fds
; i++)

148 
	`˛o£
(
out_fds
[
i
]);

151  
num_fds
 * 2;

152 
	}
}

154 
	$maö
(
¨gc
, *
¨gv
[])

156 
i
, 
num_groups
, 
tŸÆ_chûdªn
;

157 
timevÆ
 
°¨t
, 
°›
, 
diff
;

158 
num_fds
 = 20;

159 
ªadyfds
[2], 
wakefds
[2];

160 
dummy
;

162 i‡(
¨gv
[1] && 
	`°rcmp
(argv[1], "-pipe") == 0) {

163 
u£_pùes
 = 1;

164 
¨gc
--;

165 
¨gv
++;

168 i‡(
¨gc
 !2 || (
num_groups
 = 
	`©oi
(
¨gv
[1])) == 0)

169 
	`b¨f
("Usage: hackbench [-pipe] <num groups>\n");

171 
	`fd∑ú
(
ªadyfds
);

172 
	`fd∑ú
(
wakefds
);

174 
tŸÆ_chûdªn
 = 0;

175 
i
 = 0; i < 
num_groups
; i++)

176 
tŸÆ_chûdªn
 +
	`group
(
num_fds
, 
ªadyfds
[1], 
wakefds
[0]);

179 
i
 = 0; i < 
tŸÆ_chûdªn
; i++)

180 i‡(
	`ªad
(
ªadyfds
[0], &
dummy
, 1) != 1)

181 
	`b¨f
("Reading forÑeadyfds");

183 
	`gëtimeofday
(&
°¨t
, 
NULL
);

186 i‡(
	`wrôe
(
wakefds
[1], &
dummy
, 1) != 1)

187 
	`b¨f
("WritingÅo startÅhem");

190 
i
 = 0; i < 
tŸÆ_chûdªn
; i++) {

191 
°©us
;

192 
	`waô
(&
°©us
);

193 i‡(!
	`WIFEXITED
(
°©us
))

194 
	`exô
(1);

197 
	`gëtimeofday
(&
°›
, 
NULL
);

200 
	`timîsub
(&
°›
, &
°¨t
, &
diff
);

201 
	`¥ötf
("Time: %lu.%03lu\n", 
diff
.
tv_£c
, diff.
tv_u£c
/1000);

202 
	`exô
(0);

203 
	}
}

	@cat.original.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
(
fd
)

10 
n
;

12 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

13 
	`wrôe
(1, 
buf
, 
n
);

14 if(
n
 < 0){

15 
	`¥ötf
(1, "cat:ÑeadÉrror\n");

16 
	`exô
();

18 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
fd
, 
i
;

25 if(
¨gc
 <= 1){

26 
	`ˇt
(0);

27 
	`exô
();

30 
i
 = 1; i < 
¨gc
; i++){

31 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

32 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

33 
	`exô
();

35 
	`ˇt
(
fd
);

36 
	`˛o£
(
fd
);

38 
	`exô
();

39 
	}
}

	@cat/cat.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
(
fd
)

10 
n
;

12 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

13 
	`wrôe
(1, 
buf
, 
n
);

14 if(
n
 < 0){

15 
	`¥ötf
(1, "cat:ÑeadÉrror\n");

16 
	`exô
();

18 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
fd
, 
i
;

25 if(
¨gc
 <= 1){

26 
	`ˇt
(0);

27 
	`exô
();

30 
i
 = 1; i < 
¨gc
; i++){

31 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

32 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

33 
	`exô
();

35 
	`ˇt
(
fd
);

36 
	`˛o£
(
fd
);

38 
	`exô
();

39 
	}
}

	@console.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

10 
	~"dev.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

13 
	~"x86.h
"

15 
	#CRTPORT
 0x3d4

	)

16 
	#LPTPORT
 0x378

	)

17 
	#BACKSPACE
 0x100

	)

19 
ush‹t
 *
	g¸t
 = (ushort*)0xb8000;

21 
•ölock
 
	gc⁄sﬁe_lock
;

22 
	g∑nicked
 = 0;

23 
	gu£_c⁄sﬁe_lock
 = 0;

29 
	$Õt_putc
(
c
)

31 
i
;

33 
i
 = 0; !(
	`öb
(
LPTPORT
+1) & 0x80) && i < 12800; i++)

35 if(
c
 =
BACKSPACE
)

36 
c
 = '\b';

37 
	`outb
(
LPTPORT
+0, 
c
);

38 
	`outb
(
LPTPORT
+2, 0x08|0x04|0x01);

39 
	`outb
(
LPTPORT
+2, 0x08);

40 
	}
}

43 
	$cga_putc
(
c
)

45 
pos
;

48 
	`outb
(
CRTPORT
, 14);

49 
pos
 = 
	`öb
(
CRTPORT
+1) << 8;

50 
	`outb
(
CRTPORT
, 15);

51 
pos
 |
	`öb
(
CRTPORT
+1);

53 if(
c
 == '\n')

54 
pos
 += 80 -Öos%80;

55 if(
c
 =
BACKSPACE
){

56 if(
pos
 > 0)

57 
¸t
[--
pos
] = ' ' | 0x0700;

59 
¸t
[
pos
++] = (
c
&0xff) | 0x0700;

61 if((
pos
/80) >= 24){

62 
	`memmove
(
¸t
, crt+80, (crt[0])*23*80);

63 
pos
 -= 80;

64 
	`mem£t
(
¸t
+
pos
, 0, (crt[0])*(24*80 -Öos));

67 
	`outb
(
CRTPORT
, 14);

68 
	`outb
(
CRTPORT
+1, 
pos
>>8);

69 
	`outb
(
CRTPORT
, 15);

70 
	`outb
(
CRTPORT
+1, 
pos
);

71 
¸t
[
pos
] = ' ' | 0x0700;

72 
	}
}

75 
	$c⁄s_putc
(
c
)

77 if(
∑nicked
){

78 
	`˛i
();

83 
	`Õt_putc
(
c
);

84 
	`cga_putc
(
c
);

85 
	}
}

88 
	$¥ötöt
(
xx
, 
ba£
, 
sgn
)

90 
digôs
[] = "0123456789ABCDEF";

91 
buf
[16];

92 
i
 = 0, 
√g
 = 0;

93 
uöt
 
x
;

95 if(
sgn
 && 
xx
 < 0){

96 
√g
 = 1;

97 
x
 = 0 - 
xx
;

99 
x
 = 
xx
;

103 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

104 }(
x
 /
ba£
) != 0);

105 if(
√g
)

106 
buf
[
i
++] = '-';

108 --
i
 >= 0)

109 
	`c⁄s_putc
(
buf
[
i
]);

110 
	}
}

114 
	$˝rötf
(*
fmt
, ...)

116 
i
, 
c
, 
°©e
, 
lockög
;

117 
uöt
 *
¨gp
;

118 *
s
;

120 
lockög
 = 
u£_c⁄sﬁe_lock
;

121 if(
lockög
)

122 
	`acquúe
(&
c⁄sﬁe_lock
);

124 
¨gp
 = (
uöt
*)(*)&
fmt
 + 1;

125 
°©e
 = 0;

126 
i
 = 0; 
fmt
[i]; i++){

127 
c
 = 
fmt
[
i
] & 0xff;

128 
°©e
){

130 if(
c
 == '%')

131 
°©e
 = '%';

133 
	`c⁄s_putc
(
c
);

137 
c
){

139 
	`¥ötöt
(*
¨gp
++, 10, 1);

143 
	`¥ötöt
(*
¨gp
++, 16, 0);

146 
s
 = (*)*
¨gp
++;

147 if(
s
 == 0)

148 
s
 = "(null)";

149 ; *
s
; s++)

150 
	`c⁄s_putc
(*
s
);

153 
	`c⁄s_putc
('%');

157 
	`c⁄s_putc
('%');

158 
	`c⁄s_putc
(
c
);

161 
°©e
 = 0;

166 if(
lockög
)

167 
	`ªÀa£
(&
c⁄sﬁe_lock
);

168 
	}
}

171 
	$c⁄sﬁe_wrôe
(
öode
 *
ù
, *
buf
, 
n
)

173 
i
;

175 
	`iu∆ock
(
ù
);

176 
	`acquúe
(&
c⁄sﬁe_lock
);

177 
i
 = 0; i < 
n
; i++)

178 
	`c⁄s_putc
(
buf
[
i
] & 0xff);

179 
	`ªÀa£
(&
c⁄sﬁe_lock
);

180 
	`ûock
(
ù
);

182  
n
;

183 
	}
}

185 
	#INPUT_BUF
 128

	)

187 
•ölock
 
	mlock
;

188 
	mbuf
[
INPUT_BUF
];

189 
	mr
;

190 
	mw
;

191 
	me
;

192 } 
	göput
;

194 
	#C
(
x
) ((x)-'@')

195 

	)

197 
c⁄sﬁe_öå
((*
gëc
)())

199 
c
;

201 
	`acquúe
(&
öput
.
lock
);

202 (
c
 = 
	`gëc
()) >= 0){

203 
c
){

204 
	`C
('P'):

205 
	`¥ocdump
();

207 
	`C
('U'):

208 
öput
.
e
 > i≈ut.
w
 &&

209 
öput
.
buf
[(öput.
e
-1Ë% 
INPUT_BUF
] != '\n'){

210 
öput
.
e
--;

211 
	`c⁄s_putc
(
BACKSPACE
);

214 
	`C
('H'):

215 if(
öput
.
e
 > i≈ut.
w
){

216 
öput
.
e
--;

217 
	`c⁄s_putc
(
BACKSPACE
);

221 if(
c
 !0 && 
öput
.
e
 < i≈ut.
r
+
INPUT_BUF
){

222 
öput
.
buf
[öput.
e
++ % 
INPUT_BUF
] = 
c
;

223 
	`c⁄s_putc
(
c
);

224 if(
c
 ='\n' || c =
	`C
('D'Ë|| 
öput
.
e
 =öput.
r
+
INPUT_BUF
){

225 
öput
.
w
 = i≈ut.
e
;

226 
	`wakeup
(&
öput
.
r
);

232 
	`ªÀa£
(&
öput
.
lock
);

233 
	}
}

236 
	$c⁄sﬁe_ªad
(
öode
 *
ù
, *
d°
, 
n
)

238 
uöt
 
èrgë
;

239 
c
;

241 
	`iu∆ock
(
ù
);

242 
èrgë
 = 
n
;

243 
	`acquúe
(&
öput
.
lock
);

244 
n
 > 0){

245 
öput
.
r
 =öput.
w
){

246 if(
˝
->
kûÀd
){

247 
	`ªÀa£
(&
öput
.
lock
);

248 
	`ûock
(
ù
);

251 
	`¶ìp
(&
öput
.
r
, &öput.
lock
);

253 
c
 = 
öput
.
buf
[öput.
r
++ % 
INPUT_BUF
];

254 if(
c
 =
	`C
('D')){

255 if(
n
 < 
èrgë
){

258 
öput
.
r
--;

262 *
d°
++ = 
c
;

263 --
n
;

264 if(
c
 == '\n')

267 
	`ªÀa£
(&
öput
.
lock
);

268 
	`ûock
(
ù
);

270  
èrgë
 - 
n
;

271 
	}
}

274 
	$c⁄sﬁe_öô
()

276 
	`öôlock
(&
c⁄sﬁe_lock
, "console");

277 
	`öôlock
(&
öput
.
lock
, "console input");

279 
devsw
[
CONSOLE
].
wrôe
 = 
c⁄sﬁe_wrôe
;

280 
devsw
[
CONSOLE
].
ªad
 = 
c⁄sﬁe_ªad
;

281 
u£_c⁄sﬁe_lock
 = 1;

283 
	`pic_íabÀ
(
IRQ_KBD
);

284 
	`iﬂpic_íabÀ
(
IRQ_KBD
, 0);

285 
	}
}

288 
	$∑nic
(*
s
)

290 
i
;

291 
uöt
 
pcs
[10];

293 
__asm
 
	`__vﬁ©ûe
("cli");

294 
u£_c⁄sﬁe_lock
 = 0;

295 
	`˝rötf
("˝u%d:Ö™ic: ", 
	`˝u
());

296 
	`˝rötf
(
s
, 0);

297 
	`˝rötf
("\n", 0);

298 
	`gëˇŒîpcs
(&
s
, 
pcs
);

299 
i
=0; i<10; i++)

300 
	`˝rötf
(" %p", 
pcs
[
i
]);

301 
∑nicked
 = 1;

304 
	}
}

	@defs.h

1 
	gbuf
;

2 
	gc⁄ãxt
;

3 
	gfûe
;

4 
	göode
;

5 
	gpùe
;

6 
	g¥oc
;

7 
	g•ölock
;

8 
	g°©
;

11 
böô
();

12 
buf
* 
bªad
(
uöt
, uint);

13 
bªl£
(
buf
*);

14 
bwrôe
(
buf
*);

17 
c⁄sﬁe_öô
();

18 
˝rötf
(*, ...);

19 
c⁄sﬁe_öå
((*)());

20 
	$∑nic
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

23 
	`exec
(*, **);

26 
fûe
* 
	`fûóŒoc
();

27 
	`fûe˛o£
(
fûe
*);

28 
fûe
* 
	`fûedup
(file*);

29 
	`fûeöô
();

30 
	`fûîód
(
fûe
*, *, 
n
);

31 
	`fûe°©
(
fûe
*, 
°©
*);

32 
	`fûewrôe
(
fûe
*, *, 
n
);

35 
	`dúlök
(
öode
*, *, 
uöt
);

36 
öode
* 
	`dúlookup
(öode*, *, 
uöt
*);

37 
öode
* 
	`üŒoc
(
uöt
, );

38 
öode
* 
	`idup
(inode*);

39 
	`iöô
();

40 
	`ûock
(
öode
*);

41 
	`ùut
(
öode
*);

42 
	`iu∆ock
(
öode
*);

43 
	`iu∆ockput
(
öode
*);

44 
	`iupd©e
(
öode
*);

45 
	`«mecmp
(const *, const *);

46 
öode
* 
	`«mei
(*);

47 
öode
* 
	`«meù¨ít
(*, *);

48 
	`ªadi
(
öode
*, *, 
uöt
, uint);

49 
	`°©i
(
öode
*, 
°©
*);

50 
	`wrôei
(
öode
*, *, 
uöt
, uint);

53 
	`ide_öô
();

54 
	`ide_öå
();

55 
	`ide_rw
(
buf
 *);

58 
	`iﬂpic_íabÀ
(
úq
, 
˝u
);

59 
uch¨
 
iﬂpic_id
;

60 
	`iﬂpic_öô
();

63 * 
	`kÆloc
();

64 
	`k‰ì
(*, );

65 
	`köô
();

68 
	`kbd_öå
();

71 
	`˝u
();

72 vﬁ©ûê
uöt
* 
œpic
;

73 
	`œpic_eoi
();

74 
	`œpic_öô
();

75 
	`œpic_°¨èp
(
uch¨
, 
uöt
);

78 
ismp
;

79 
	`mp_b˝u
();

80 
	`mp_öô
();

81 
	`mp_°¨âhem
();

84 
	`pic_íabÀ
();

85 
	`pic_öô
();

88 
	`pùóŒoc
(
fûe
**, file**);

89 
	`pùe˛o£
(
pùe
*, );

90 
	`pùîód
(
pùe
*, *, );

91 
	`pùewrôe
(
pùe
*, *, );

94 
¥oc
* 
	`c›y¥oc
(proc*);

95 
¥oc
* 
	`cuΩroc
();

96 
	`exô
();

97 
	`grow¥oc
();

98 
	`kûl
();

99 
	`pöô
();

100 
	`¥ocdump
();

101 
	$scheduÀr
(Ë
	`__©åibuã__
((
n‹ëu∫
));

102 
	`£tup£gs
(
¥oc
*);

103 
	`¶ìp
(*, 
•ölock
*);

104 
	`u£röô
();

105 
	`waô
();

106 
	`wakeup
(*);

107 
	`yõld
();

110 
	`swtch
(
c⁄ãxt
*, context*);

113 
	`acquúe
(
•ölock
*);

114 
	`gëˇŒîpcs
(*, 
uöt
*);

115 
	`hﬁdög
(
•ölock
*);

116 
	`öôlock
(
•ölock
*, *);

117 
	`ªÀa£
(
•ölock
*);

118 
	`push˛i
();

119 
	`p›˛i
();

122 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

123 * 
	`memmove
(*, c⁄° *, 
uöt
);

124 * 
	`mem£t
(*, , 
uöt
);

125 * 
	`ß„°r˝y
(*, const *, );

126 
	`°æí
(const *);

127 
	`°∫cmp
(c⁄° *, c⁄° *, 
uöt
);

128 * 
	`°∫˝y
(*, const *, );

131 
	`¨göt
(, *);

132 
	`¨g±r
(, **, );

133 
	`¨g°r
(, **);

134 
	`„tchöt
(
¥oc
*, 
uöt
, *);

135 
	`„tch°r
(
¥oc
*, 
uöt
, **);

136 
	`sysˇŒ
();

139 
	`timî_öô
();

142 
	`idtöô
();

143 
ticks
;

144 
	`tvöô
();

145 
•ölock
 
tick¶ock
;

148 
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

	@dev.h

1 
	sdevsw
 {

2 (*
	mªad
)(
	möode
*, *, );

3 (*
	mwrôe
)(
	möode
*, *, );

6 
devsw
 devsw[];

8 
	#CONSOLE
 1

	)

	@echo.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 
i
 = 1; i < 
¨gc
; i++)

11 
	`¥ötf
(1, "%s%s", 
¨gv
[
i
], i+1 < 
¨gc
 ? " " : "\n");

12 
	`exô
();

13 
	}
}

	@elf.h

3 
	#ELF_MAGIC
 0x464C457FU

4 

	)

6 
	sñfhdr
 {

7 
uöt
 
	mmagic
;

8 
uch¨
 
	mñf
[12];

9 
ush‹t
 
	mty≥
;

10 
ush‹t
 
	mmachöe
;

11 
uöt
 
	mvîsi⁄
;

12 
uöt
 
	míåy
;

13 
uöt
 
	mphoff
;

14 
uöt
 
	mshoff
;

15 
uöt
 
	mÊags
;

16 
ush‹t
 
	mehsize
;

17 
ush‹t
 
	mphítsize
;

18 
ush‹t
 
	mphnum
;

19 
ush‹t
 
	mshítsize
;

20 
ush‹t
 
	mshnum
;

21 
ush‹t
 
	msh°∫dx
;

25 
	s¥oghdr
 {

26 
uöt
 
	mty≥
;

27 
uöt
 
	moff£t
;

28 
uöt
 
	mva
;

29 
uöt
 
	m∑
;

30 
uöt
 
	mfûesz
;

31 
uöt
 
	mmemsz
;

32 
uöt
 
	mÊags
;

33 
uöt
 
	mÆign
;

37 
	#ELF_PROG_LOAD
 1

	)

40 
	#ELF_PROG_FLAG_EXEC
 1

	)

41 
	#ELF_PROG_FLAG_WRITE
 2

	)

42 
	#ELF_PROG_FLAG_READ
 4

	)

	@exec.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"mmu.h
"

4 
	~"¥oc.h
"

5 
	~"defs.h
"

6 
	~"x86.h
"

7 
	~"ñf.h
"

10 
	$exec
(*
∑th
, **
¨gv
)

12 *
mem
, *
s
, *
œ°
;

13 
i
, 
¨gc
, 
¨gÀn
, 
Àn
, 
off
;

14 
uöt
 
sz
, 
•
, 
¨gp
;

15 
ñfhdr
 
ñf
;

16 
öode
 *
ù
;

17 
¥oghdr
 
ph
;

19 if((
ù
 = 
	`«mei
(
∑th
)) == 0)

21 
	`ûock
(
ù
);

24 
mem
 = 0;

25 
sz
 = 0;

28 if(
	`ªadi
(
ù
, (*)&
ñf
, 0, (elf)) < (elf))

29 
bad
;

30 if(
ñf
.
magic
 !
ELF_MAGIC
)

31 
bad
;

32 
i
=0, 
off
=
ñf
.
phoff
; i<ñf.
phnum
; i++, off+=(
ph
)){

33 if(
	`ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

34 
bad
;

35 if(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

37 if(
ph
.
memsz
 <Öh.
fûesz
)

38 
bad
;

39 
sz
 +
ph
.
memsz
;

43 
¨gÀn
 = 0;

44 
¨gc
=0; 
¨gv
[argc];árgc++)

45 
¨gÀn
 +
	`°æí
(
¨gv
[
¨gc
]) + 1;

46 
¨gÀn
 = (arglen+3) & ~3;

47 
sz
 +
¨gÀn
 + 4*(
¨gc
+1);

50 
sz
 +
PAGE
;

53 
sz
 = (sz+
PAGE
-1) & ~(PAGE-1);

54 
mem
 = 
	`kÆloc
(
sz
);

55 if(
mem
 == 0)

56 
bad
;

57 
	`mem£t
(
mem
, 0, 
sz
);

60 
i
=0, 
off
=
ñf
.
phoff
; i<ñf.
phnum
; i++, off+=(
ph
)){

61 if(
	`ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

62 
bad
;

63 if(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

65 if(
ph
.
va
 +Öh.
memsz
 > 
sz
)

66 
bad
;

67 if(
	`ªadi
(
ù
, 
mem
 + 
ph
.
va
,Öh.
off£t
,Öh.
fûesz
) !=Öh.filesz)

68 
bad
;

69 
	`mem£t
(
mem
 + 
ph
.
va
 +Öh.
fûesz
, 0,Öh.
memsz
 -Öh.filesz);

71 
	`iu∆ockput
(
ù
);

74 
•
 = 
sz
;

75 
¨gp
 = 
sz
 - 
¨gÀn
 - 4*(
¨gc
+1);

78 *(
uöt
*)(
mem
+
¨gp
 + 4*
¨gc
) = 0;

79 
i
=
¨gc
-1; i>=0; i--){

80 
Àn
 = 
	`°æí
(
¨gv
[
i
]) + 1;

81 
•
 -
Àn
;

82 
	`memmove
(
mem
+
•
, 
¨gv
[
i
], 
Àn
);

83 *(
uöt
*)(
mem
+
¨gp
 + 4*
i
Ë
•
;

87 
•
 = 
¨gp
;

88 
•
 -= 4;

89 *(
uöt
*)(
mem
+
•
Ë
¨gp
;

90 
•
 -= 4;

91 *(
uöt
*)(
mem
+
•
Ë
¨gc
;

92 
•
 -= 4;

93 *(
uöt
*)(
mem
+
•
) = 0xffffffff;

96 
œ°
=
s
=
∑th
; *s; s++)

97 if(*
s
 == '/')

98 
œ°
 = 
s
+1;

99 
	`ß„°r˝y
(
˝
->
«me
, 
œ°
, (cp->name));

102 
	`k‰ì
(
˝
->
mem
, cp->
sz
);

103 
˝
->
mem
 = mem;

104 
˝
->
sz
 = sz;

105 
˝
->
tf
->
eù
 = 
ñf
.
íåy
;

106 
˝
->
tf
->
e•
 = 
•
;

107 
	`£tup£gs
(
˝
);

110 
bad
:

111 if(
mem
)

112 
	`k‰ì
(
mem
, 
sz
);

113 
	`iu∆ockput
(
ù
);

115 
	}
}

	@fcntl.h

1 
	#O_RDONLY
 0x000

	)

2 
	#O_WRONLY
 0x001

	)

3 
	#O_RDWR
 0x002

	)

4 
	#O_CREATE
 0x200

	)

	@file.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"fûe.h
"

5 
	~"•ölock.h
"

6 
	~"dev.h
"

8 
devsw
 
	gdevsw
[
NDEV
];

9 
•ölock
 
	gfûe_èbÀ_lock
;

10 
fûe
 
	gfûe
[
NFILE
];

13 
	$fûeöô
()

15 
	`öôlock
(&
fûe_èbÀ_lock
, "file_table");

16 
	}
}

19 
fûe
*

20 
	$fûóŒoc
()

22 
i
;

24 
	`acquúe
(&
fûe_èbÀ_lock
);

25 
i
 = 0; i < 
NFILE
; i++){

26 if(
fûe
[
i
].
ty≥
 =
FD_CLOSED
){

27 
fûe
[
i
].
ty≥
 = 
FD_NONE
;

28 
fûe
[
i
].
ªf
 = 1;

29 
	`ªÀa£
(&
fûe_èbÀ_lock
);

30  
fûe
 + 
i
;

33 
	`ªÀa£
(&
fûe_èbÀ_lock
);

35 
	}
}

38 
fûe
*

39 
	$fûedup
(
fûe
 *
f
)

41 
	`acquúe
(&
fûe_èbÀ_lock
);

42 if(
f
->
ªf
 < 1 || f->
ty≥
 =
FD_CLOSED
)

43 
	`∑nic
("filedup");

44 
f
->
ªf
++;

45 
	`ªÀa£
(&
fûe_èbÀ_lock
);

46  
f
;

47 
	}
}

51 
	$fûe˛o£
(
fûe
 *
f
)

53 
fûe
 
ff
;

55 
	`acquúe
(&
fûe_èbÀ_lock
);

56 if(
f
->
ªf
 < 1 || f->
ty≥
 =
FD_CLOSED
)

57 
	`∑nic
("fileclose");

58 if(--
f
->
ªf
 > 0){

59 
	`ªÀa£
(&
fûe_èbÀ_lock
);

62 
ff
 = *
f
;

63 
f
->
ªf
 = 0;

64 
f
->
ty≥
 = 
FD_CLOSED
;

65 
	`ªÀa£
(&
fûe_èbÀ_lock
);

67 if(
ff
.
ty≥
 =
FD_PIPE
)

68 
	`pùe˛o£
(
ff
.
pùe
, ff.
wrôabÀ
);

69 if(
ff
.
ty≥
 =
FD_INODE
)

70 
	`ùut
(
ff
.
ù
);

72 
	`∑nic
("fileclose");

73 
	}
}

77 
	$fûe°©
(
fûe
 *
f
, 
°©
 *
°
)

79 if(
f
->
ty≥
 =
FD_INODE
){

80 
	`ûock
(
f
->
ù
);

81 
	`°©i
(
f
->
ù
, 
°
);

82 
	`iu∆ock
(
f
->
ù
);

86 
	}
}

90 
	$fûîód
(
fûe
 *
f
, *
addr
, 
n
)

92 
r
;

94 if(
f
->
ªadabÀ
 == 0)

96 if(
f
->
ty≥
 =
FD_PIPE
)

97  
	`pùîód
(
f
->
pùe
, 
addr
, 
n
);

98 if(
f
->
ty≥
 =
FD_INODE
){

99 
	`ûock
(
f
->
ù
);

100 if((
r
 = 
	`ªadi
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

101 
f
->
off
 +
r
;

102 
	`iu∆ock
(
f
->
ù
);

103  
r
;

105 
	`∑nic
("fileread");

106 
	}
}

110 
	$fûewrôe
(
fûe
 *
f
, *
addr
, 
n
)

112 
r
;

114 if(
f
->
wrôabÀ
 == 0)

116 if(
f
->
ty≥
 =
FD_PIPE
)

117  
	`pùewrôe
(
f
->
pùe
, 
addr
, 
n
);

118 if(
f
->
ty≥
 =
FD_INODE
){

119 
	`ûock
(
f
->
ù
);

120 if((
r
 = 
	`wrôei
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

121 
f
->
off
 +
r
;

122 
	`iu∆ock
(
f
->
ù
);

123  
r
;

125 
	`∑nic
("filewrite");

126 
	}
}

	@file.h

1 
	sfûe
 {

2 íum { 
	mFD_CLOSED
, 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
 } 
	mty≥
;

3 
	mªf
;

4 
	mªadabÀ
;

5 
	mwrôabÀ
;

6 
pùe
 *
	mpùe
;

7 
öode
 *
	mù
;

8 
uöt
 
	moff
;

	@fmt/asm.h

5 554 #deföê
	#SEG_NULLASM
 \

6 0555 .
w‹d
 0, 0; \

7 0556 .
byã
 0, 0, 0, 0

	)

9 558 #deföê
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

10 0559 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

11 0560 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

12 0561 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

14 563 #deföê
	#STA_X
 0x8

15 564 #deföê
	#STA_E
 0x4

16 565 #deföê
	#STA_C
 0x4

17 566 #deföê
	#STA_W
 0x2

18 567 #deföê
	#STA_R
 0x2

19 568 #deföê
	#STA_A
 0x1

20 0569

	)

	@fmt/bio.c

24 523 #ö˛udê
	~"ty≥s.h
"

25 524 #ö˛udê
	~"defs.h
"

26 525 #ö˛udê
	~"∑øm.h
"

27 526 #ö˛udê
	~"•ölock.h
"

28 527 #ö˛udê
	~"buf.h
"

30 3529 
buf
 
	gbuf
[
NBUF
];

31 3530 
•ölock
 
	gbuf_èbÀ_lock
;

36 3535 
buf
 
	gbufhód
;

39 3538 
böô
()

41 3540 
buf
 *
	gb
;

43 3542 
öôlock
(&
buf_èbÀ_lock
, "buf_table");

46 3545 
	gbufhód
.
	g¥ev
 = &
bufhód
;

47 3546 
	gbufhód
.
	g√xt
 = &
bufhód
;

48 3547 
	gb
 = 
buf
; b < 
	gbuf
+
	gNBUF
; b++){

49 3548 
	gb
->
	g√xt
 = 
bufhód
.
√xt
;

50 3549 
	gb
->
	g¥ev
 = &
bufhód
;

51 3550 
	gbufhód
.
	g√xt
->
	g¥ev
 = 
b
;

52 3551 
	gbufhód
.
	g√xt
 = 
b
;

59 3558 
	gbuf
*

60 3559 
bgë
(
uöt
 
dev
, uöà
£˘‹
)

62 3561 
buf
 *
	gb
;

64 3563 
acquúe
(&
buf_èbÀ_lock
);

66 3565 
	glo›
:

68 3567 
b
 = 
bufhód
.
√xt
; 
	gb
 != &bufhead; b = b->next){

69 3568 if((
b
->
Êags
 & (
B_BUSY
|
B_VALID
)) &&

70 3569 
b
->
dev
 =dev && b->
£˘‹
 == sector){

71 3570 if(
b
->
Êags
 & 
B_BUSY
){

72 3571 
¶ìp
(
buf
, &
buf_èbÀ_lock
);

73 3572 
	glo›
;

75 3574 
	gb
->
	gÊags
 |
B_BUSY
;

76 3575 
ªÀa£
(&
buf_èbÀ_lock
);

77 3576  
	gb
;

82 3581 
	gb
 = 
bufhód
.
¥ev
; b !&bufhód; b = 
b
->prev){

83 3582 if((
b
->
Êags
 & 
B_BUSY
) == 0){

84 3583 
b
->
Êags
 = 
B_BUSY
;

85 3584 
	gb
->
	gdev
 = 
dev
;

86 3585 
	gb
->
	g£˘‹
 = 
£˘‹
;

87 3586 
ªÀa£
(&
buf_èbÀ_lock
);

88 3587  
	gb
;

91 3590 
∑nic
("bget:Ço buffers");

102 3601 
	gbuf
*

103 3602 
bªad
(
uöt
 
dev
, uöà
£˘‹
)

105 3604 
buf
 *
	gb
;

107 3606 
	gb
 = 
bgë
(
dev
, 
£˘‹
);

108 3607 if(!(
	gb
->
	gÊags
 & 
	gB_VALID
))

109 3608 
ide_rw
(
b
);

110 3609  
	gb
;

115 3614 
bwrôe
(
buf
 *
b
)

117 3616 if((
	gb
->
	gÊags
 & 
	gB_BUSY
) == 0)

118 3617 
∑nic
("bwrite");

119 3618 
	gb
->
	gÊags
 |
B_DIRTY
;

120 3619 
ide_rw
(
b
);

125 3624 
bªl£
(
buf
 *
b
)

127 3626 if((
	gb
->
	gÊags
 & 
	gB_BUSY
) == 0)

128 3627 
∑nic
("brelse");

130 3629 
acquúe
(&
buf_èbÀ_lock
);

132 3631 
	gb
->
	g√xt
->
	g¥ev
 = 
b
->
¥ev
;

133 3632 
	gb
->
	g¥ev
->
	g√xt
 = 
b
->
√xt
;

134 3633 
	gb
->
	g√xt
 = 
bufhód
.
√xt
;

135 3634 
	gb
->
	g¥ev
 = &
bufhód
;

136 3635 
	gbufhód
.
	g√xt
->
	g¥ev
 = 
b
;

137 3636 
	gbufhód
.
	g√xt
 = 
b
;

139 3638 
	gb
->
	gÊags
 &~
B_BUSY
;

140 3639 
wakeup
(
buf
);

142 3641 
ªÀa£
(&
buf_èbÀ_lock
);

	@fmt/bootasm.S

1 900 #ö˛udê
	~"asm.h
"

3 0902 #Sèπ 
the
 
fú°
 
	gCPU
: 
to
 32-
bô
 
¥Ÿe˘ed
 
mode
, 
jump
 
öto
 
	gC
.

4 0903 #Thê
BIOS
 
lﬂds
 
this
 
code
 
‰om
 
the
 
fú°
 
£˘‹
 
of
Åhê
h¨d
 
disk
 
	göto


5 0904 #mem‹y 
©
 
physiˇl
 
	gaddªss
 0x7c00 
™d
 
°¨ts
 
executög
 
ö
 
ªÆ
 
	gmode


6 0905 #wôh %
	gcs
=0 %
ù
=7c00.

8 0907 .
£t
 
PROT_MODE_CSEG
, 0x8 #kî√»
code
 
£gmít
 
	g£À˘‹


9 0908 .
£t
 
	gPROT_MODE_DSEG
, 0x10 #kî√»
d©a
 
£gmít
 
	g£À˘‹


10 0909 .
£t
 
	gCR0_PE_ON
, 0x1 #¥Ÿe˘ed 
mode
 
íabÀ
 
	gÊag


12 0911 .
globl
 
	g°¨t


13 0912 
	g°¨t
:

14 0913 .
code16
 #As£mbÀ 16-
bô
 
mode


15 0914 
˛i
 #DißbÀ 
öãºu±s


16 0915 
˛d
 #Såög 
›î©i⁄s
 
ö¸emít


18 0917 #Së 
up
 
the
 
imp‹è¡
 
d©a
 
£gmít
 
ªgi°îs
 (
DS
, 
ES
, 
SS
).

19 0918 
	gx‹w
 %
	gax
,%ax #Segmíà
numbî
 
	gzîo


20 0919 
	gmovw
 %
	gax
,%
	gds
 #-> 
D©a
 
	gSegmít


21 0920 
	gmovw
 %
	gax
,%
	ges
 #-> 
Exåa
 
	gSegmít


22 0921 
	gmovw
 %
	gax
,%
	gss
 #-> 
Sèck
 
	gSegmít


24 0923 #E«bÀ 
	gA20
:

25 0924 #F‹ 
backw¨ds
 
com∑tibûôy
 
wôh
 
the
 
óæõ°
 
PCs
, 
	gphysiˇl


26 0925 #addªs†
	glöe
 20 
is
 
tõd
 
	glow
, 
so
 
th©
 
addªs£s
 
highî
 
	gth™


27 0926 #1
MB
 
wøp
 
¨ound
 
to
 
zîo
 
by
 . 
This
 
code
 
und€s
 
	gthis
.

28 0927 
	g£è20
.1:

29 0928 
öb
 
$0x64
,%
	gÆ
 #Waô 
nŸ
 
	gbusy


30 0929 
ã°b
 
	g$0x2
,%
	gÆ


31 0930 
jnz
 
	g£è20
.1

33 0932 
movb
 
	g$0xd1
,%
	gÆ
 #0
	gxd1
 -> 
	gp‹t
 0x64

34 0933 
	goutb
 %
	gÆ
,
	g$0x64


36 0935 
	g£è20
.2:

37 0936 
öb
 
$0x64
,%
	gÆ
 #Waô 
nŸ
 
	gbusy


38 0937 
ã°b
 
	g$0x2
,%
	gÆ


39 0938 
jnz
 
	g£è20
.2

41 0940 
movb
 
	g$0xdf
,%
	gÆ
 #0
	gxdf
 -> 
	gp‹t
 0x60

42 0941 
	goutb
 %
	gÆ
,
	g$0x60


44 0943 #Swôch 
‰om
 
ªÆ
 
to
 
¥Ÿe˘ed
 
	gmode
, 
usög
 
a
 
boŸ°øp
 
	gGDT


45 0944 #™d 
£gmít
 
å™¶©i⁄
 
th©
 
makes
 
vútuÆ
 
	gaddªs£s


46 0945 #idítiˇ»
to
 
physiˇl
 
	gaddªs£s
, 
so
 
th©
 
	gthe


47 0946 #ef„˘ivê
mem‹y
 
m≠
 
d€s
 
nŸ
 
ch™ge
 
durög
 
the
 .

48 0947 
lgdt
 
	ggdtdesc


49 0948 
	gmovl
 %
	g¸0
, %
	góx


50 0949 
‹l
 
	g$CR0_PE_ON
, %
	góx


51 0950 
	gmovl
 %
	góx
, %
	g¸0


53 0952 #Jum∞
to
 
√xt
 
	gö°ru˘i⁄
, 
but
 
	gö
 32-
bô
 
code
 
	g£gmít
.

54 0953 #Swôche†
¥o˚ss‹
 
	göto
 32-
bô
 
	gmode
.

55 0954 
ljmp
 
	g$PROT_MODE_CSEG
, 
	g$¥Ÿc£g


57 0956 .
	gcode32
 #As£mbÀ 32-
bô
 
	gmode


58 0957 
	g¥Ÿc£g
:

59 0958 #Së 
up
 
the
 
¥Ÿe˘ed
-
mode
 
d©a
 
£gmít
 
ªgi°îs


60 0959 
movw
 
$PROT_MODE_DSEG
, %
	gax
 #Ou∏
d©a
 
£gmít
 
	g£À˘‹


61 0960 
	gmovw
 %
	gax
, %
	gds
 #-> 
	gDS
: 
D©a
 
Segmít


62 0961 
movw
 %
ax
, %
	ges
 #-> 
	gES
: 
Exåa
 
Segmít


63 0962 
movw
 %
ax
, %
	gfs
 #-> 
	gFS


64 0963 
	gmovw
 %
	gax
, %
	ggs
 #-> 
	gGS


65 0964 
	gmovw
 %
	gax
, %
	gss
 #-> 
	gSS
: 
Sèck
 
Segmít


67 0966 #Së 
up
 
the
 
°ack
 
poöãr
 
™d
 
ˇŒ
 
öto
 
C
.

68 0967 
movl
 
$°¨t
, %
	ge•


69 0968 
ˇŒ
 
	gboŸmaö


71 0970 #I‡
boŸmaö
 
ªtu∫s
 (
ô
 
shouldn
't),Üoop.

72 0971 
•ö
:

73 0972 
jmp
 
•ö


75 0974 #BoŸ°ø∞
GDT


76 0975 .
p2Æign
 2 #f‹˚ 4 
byã
 
Æignmít


77 0976 
gdt
:

78 0977 
SEG_NULLASM
 #nuŒ 
£g


79 0978 
SEG_ASM
(
STA_X
|
STA_R
, 0x0, 0xffffffffË#codê
£g


80 0979 
	$SEG_ASM
(
STA_W
, 0x0, 0xffffffffË#d©®
£g


82 0981 
gdtdesc
:

83 0982 .
w‹d
 0x17 #sizeof(
gdt
) - 1

84 0983 .
gdt
 #address gdt

	@fmt/bootmain.c

8 107 #ö˛udê
	~"ty≥s.h
"

9 108 #ö˛udê
	~"ñf.h
"

10 109 #ö˛udê
	~"x86.h
"

12 111 #deföê
	#SECTSIZE
 512

	)

14 1113 
ªad£g
(
uöt
, uint, uint);

17 1116 
boŸmaö
()

19 1118 
ñfhdr
 *
	gñf
;

20 1119 
¥oghdr
 *
	gph
, *
	gïh
;

21 1120 (*
	gíåy
)();

23 1122 
	gñf
 = (
ñfhdr
*)0x10000;

26 1125 
ªad£g
((
uöt
)
ñf
, 
SECTSIZE
*8, 0);

29 1128 if(
	gñf
->
	gmagic
 !
ELF_MAGIC
)

30 1129 
bad
;

33 1132 
	gph
 = (
¥oghdr
*)((
uch¨
*)
ñf
 +Élf->
phoff
);

34 1133 
	gïh
 = 
ph
 + 
ñf
->
phnum
;

35 1134 ; 
	gph
 < 
	gïh
;Öh++)

36 1135 
ªad£g
(
ph
->
va
 & 0xFFFFFF,Öh->
memsz
,Öh->
off£t
);

40 1139 
	gíåy
 = ((*)())(
ñf
->
íåy
 & 0xFFFFFF);

41 1140 
íåy
();

43 1142 
	gbad
:

44 1143 
outw
(0x8A00, 0x8A00);

45 1144 
outw
(0x8A00, 0x8E00);

52 1151 
waôdisk
()

55 1154 (
öb
(0x1F7) & 0xC0) != 0x40)

61 1160 
ªad£˘
(*
d°
, 
uöt
 
off£t
)

64 1163 
waôdisk
();

65 1164 
outb
(0x1F2, 1);

66 1165 
outb
(0x1F3, 
off£t
);

67 1166 
outb
(0x1F4, 
off£t
 >> 8);

68 1167 
outb
(0x1F5, 
off£t
 >> 16);

69 1168 
outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

70 1169 
outb
(0x1F7, 0x20);

73 1172 
waôdisk
();

74 1173 
ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

80 1179 
ªad£g
(
uöt
 
va
, uöà
cou¡
, uöà
off£t
)

82 1181 
uöt
 
	geva
;

84 1183 
	geva
 = 
va
 + 
cou¡
;

87 1186 
	gva
 &~(
SECTSIZE
 - 1);

90 1189 
	goff£t
 = (
off£t
 / 
SECTSIZE
) + 1;

95 1194 ; 
	gva
 < 
	geva
; v®+
SECTSIZE
, 
	goff£t
++)

96 1195 
ªad£˘
((
uch¨
*)
va
, 
off£t
);

	@fmt/bootother.S

1 000 #ö˛udê
	~"asm.h
"

3 1002 #Sèπ 
™
 
Aµliˇti⁄
 
	gPro˚ss‹
. 
This
 
mu°
 
be
 
∂a˚d
 
⁄
 
	ga
 4
KB
 
	gbound¨y


4 1003 #somewhîê
ö
 
	gthe
 1
°
 
MB
 
of
 
c⁄víti⁄Æ
 
mem‹y
 (
APBOOTSTRAP
). 
	gHowevî
,

5 1004 #duê
to
 
some
 
sh‹tcuts
 
bñow
 
	gô
'sÑestricted furtherÅo withinÅhe 1st

6 1005 #64
	gKB
. 
The
 
AP
 
°¨ts
 
ö
 
	gªÆ
-
	gmode
, 
	gwôh


7 1006 #CS 
£À˘‹
 
£t
 
to
 
the
 
°¨tup
 
mem‹y
 
	gaddªss
/16;

8 1007 #CS 
ba£
 
£t
 
to
 
°¨tup
 
mem‹y
 
	gaddªss
;

9 1008 #CS 
limô
 
£t
 
	gto
 64
	gKB
;

10 1009 #CPL 
™d
 
IP
 
£t
 
	gto
 0.

11 1010 #
1011 #BoŸŸhî†(
ö
 
	gmaö
.
	gc
Ë
°¨ts
 
óch
 
	gn⁄
-
boŸ
 
CPU
 i¿
	gtu∫
.

12 1012 #Ià
puts
 
the
 
	gc‹ª˘
 %
e•
 
ö
 
	g°¨t
-4,

13 1013 #™d 
the
 
∂a˚
 
to
 
jump
Åÿ
ö
 
	g°¨t
-8.

14 1014 #
1015 #Thi†
code
 
is
 
idítiˇl
 
to
 
	gboŸasm
.
S
 
	gex˚±
:

15 1016 #- 
ô
 
d€s
 
nŸ
 
√ed
 
to
 
íabÀ
 
A20


16 1017 #- 
ô
 
u£s
 
the
 
addªss
 
©
 
°¨t
-4 thê%
e•


17 1018 #- 
ô
 
jumps
 
to
 
the
 
addªss
 
©
 
°¨t
-8 
ö°ód
 
of
 
ˇŒög
 
boŸmaö


19 1020 .
£t
 
PROT_MODE_CSEG
, 0x8 #kî√»
code
 
£gmít
 
	g£À˘‹


20 1021 .
£t
 
	gPROT_MODE_DSEG
, 0x10 #kî√»
d©a
 
£gmít
 
	g£À˘‹


21 1022 .
£t
 
	gCR0_PE_ON
, 0x1 #¥Ÿe˘ed 
mode
 
íabÀ
 
	gÊag


23 1024 .
globl
 
	g°¨t


24 1025 
	g°¨t
:

25 1026 .
code16
 #As£mbÀ 16-
bô
 
mode


26 1027 
˛i
 #DißbÀ 
öãºu±s


27 1028 
˛d
 #Såög 
›î©i⁄s
 
ö¸emít


29 1030 #Së 
up
 
the
 
imp‹è¡
 
d©a
 
£gmít
 
ªgi°îs
 (
DS
, 
ES
, 
SS
).

30 1031 
	gx‹w
 %
	gax
,%ax #Segmíà
numbî
 
	gzîo


31 1032 
	gmovw
 %
	gax
,%
	gds
 #-> 
D©a
 
	gSegmít


32 1033 
	gmovw
 %
	gax
,%
	ges
 #-> 
Exåa
 
	gSegmít


33 1034 
	gmovw
 %
	gax
,%
	gss
 #-> 
Sèck
 
	gSegmít


35 1036 #Swôch 
‰om
 
ªÆ
 
to
 
¥Ÿe˘ed
 
	gmode
, 
usög
 
a
 
boŸ°øp
 
	gGDT


36 1037 #™d 
£gmít
 
å™¶©i⁄
 
th©
 
makes
 
vútuÆ
 
	gaddªs£s


37 1038 #idítiˇ»
to
 
theú
 
physiˇl
 
	gaddªs£s
, 
so
 
th©
 
	gthe


38 1039 #ef„˘ivê
mem‹y
 
m≠
 
d€s
 
nŸ
 
ch™ge
 
durög
 
the
 .

39 1040 
lgdt
 
	ggdtdesc


40 1041 
	gmovl
 %
	g¸0
, %
	góx


41 1042 
‹l
 
	g$CR0_PE_ON
, %
	góx


42 1043 
	gmovl
 %
	góx
, %
	g¸0


44 1045 #Jum∞
to
 
√xt
 
	gö°ru˘i⁄
, 
but
 
	gö
 32-
bô
 
code
 
	g£gmít
.

45 1046 #Swôche†
¥o˚ss‹
 
	göto
 32-
bô
 
	gmode
.

46 1047 
ljmp
 
	g$PROT_MODE_CSEG
, 
	g$¥Ÿc£g


49 1050 .
	gcode32
 #As£mbÀ 32-
bô
 
	gmode


50 1051 
	g¥Ÿc£g
:

51 1052 #Së 
up
 
the
 
¥Ÿe˘ed
-
mode
 
d©a
 
£gmít
 
ªgi°îs


52 1053 
movw
 
$PROT_MODE_DSEG
, %
	gax
 #Ou∏
d©a
 
£gmít
 
	g£À˘‹


53 1054 
	gmovw
 %
	gax
, %
	gds
 #-> 
	gDS
: 
D©a
 
Segmít


54 1055 
movw
 %
ax
, %
	ges
 #-> 
	gES
: 
Exåa
 
Segmít


55 1056 
movw
 %
ax
, %
	gfs
 #-> 
	gFS


56 1057 
	gmovw
 %
	gax
, %
	ggs
 #-> 
	gGS


57 1058 
	gmovw
 %
	gax
, %
	gss
 #-> 
	gSS
: 
Sèck
 
Segmít


59 1060 
movl
 
°¨t
-4, %
	ge•


60 1061 
movl
 
	g°¨t
-8, %
	góx


61 1062 
	gjmp
 *%
	góx


63 1064 #BoŸ°ø∞
	gGDT


64 1065 .
	gp2Æign
 2 #f‹˚ 4 
byã
 
	gÆignmít


65 1066 
	ggdt
:

66 1067 
SEG_NULLASM
 #nuŒ 
£g


67 1068 
SEG_ASM
(
STA_X
|
STA_R
, 0x0, 0xffffffffË#codê
	g£g


68 1069 
	$SEG_ASM
(
STA_W
, 0x0, 0xffffffffË#d©®
£g


70 1071 
gdtdesc
:

71 1072 .
w‹d
 0x17 #sizeof(
gdt
) - 1

72 1073 .
gdt
 #address gdt

	@fmt/buf.h

1 2900 
	sbuf
 {

2 2901 
	mÊags
;

3 2902 
uöt
 
	mdev
;

4 2903 
uöt
 
	m£˘‹
;

5 2904 
buf
 *
	m¥ev
;

6 2905 
buf
 *
	m√xt
;

7 2906 
buf
 *
	mq√xt
;

8 2907 
uch¨
 
	md©a
[512];

10 909 #deföê
	#B_BUSY
 0x1

11 910 #deföê
	#B_VALID
 0x2

12 911 #deföê
	#B_DIRTY
 0x4

13 2912

	)

	@fmt/console.c

5 154 #ö˛udê
	~"ty≥s.h
"

6 155 #ö˛udê
	~"defs.h
"

7 156 #ö˛udê
	~"∑øm.h
"

8 157 #ö˛udê
	~"å≠s.h
"

9 158 #ö˛udê
	~"•ölock.h
"

10 159 #ö˛udê
	~"dev.h
"

11 160 #ö˛udê
	~"mmu.h
"

12 161 #ö˛udê
	~"¥oc.h
"

13 162 #ö˛udê
	~"x86.h
"

15 164 #deföê
	#CRTPORT
 0x3d4

	)

16 165 #deföê
	#LPTPORT
 0x378

	)

17 166 #deföê
	#BACKSPACE
 0x100

	)

19 6168 
ush‹t
 *
	g¸t
 = (ushort*)0xb8000;

21 6170 
•ölock
 
	gc⁄sﬁe_lock
;

22 6171 
	g∑nicked
 = 0;

23 6172 
	gu£_c⁄sﬁe_lock
 = 0;

29 6178 
Õt_putc
(
c
)

31 6180 
	gi
;

33 6182 
	gi
 = 0; !(
öb
(
LPTPORT
+1) & 0x80) && i < 12800; i++)

35 6184 if(
	gc
 =
BACKSPACE
)

36 6185 
c
 = '\b';

37 6186 
outb
(
LPTPORT
+0, 
c
);

38 6187 
outb
(
LPTPORT
+2, 0x08|0x04|0x01);

39 6188 
outb
(
LPTPORT
+2, 0x08);

52 6201 
cga_putc
(
c
)

54 6203 
	gpos
;

57 6206 
outb
(
CRTPORT
, 14);

58 6207 
	gpos
 = 
öb
(
CRTPORT
+1) << 8;

59 6208 
outb
(
CRTPORT
, 15);

60 6209 
	gpos
 |
öb
(
CRTPORT
+1);

62 6211 if(
	gc
 == '\n')

63 6212 
pos
 += 80 -Öos%80;

64 6213 if(
	gc
 =
BACKSPACE
){

65 6214 if(
pos
 > 0)

66 6215 
¸t
[--
pos
] = ' ' | 0x0700;

68 6217 
	g¸t
[
pos
++] = (
c
&0xff) | 0x0700;

70 6219 if((
	gpos
/80) >= 24){

71 6220 
memmove
(
¸t
, crt+80, (crt[0])*23*80);

72 6221 
	gpos
 -= 80;

73 6222 
mem£t
(
¸t
+
pos
, 0, (crt[0])*(24*80 -Öos));

76 6225 
outb
(
CRTPORT
, 14);

77 6226 
outb
(
CRTPORT
+1, 
pos
>>8);

78 6227 
outb
(
CRTPORT
, 15);

79 6228 
outb
(
CRTPORT
+1, 
pos
);

80 6229 
	g¸t
[
pos
] = ' ' | 0x0700;

84 6233 
c⁄s_putc
(
c
)

86 6235 if(
	g∑nicked
){

87 6236 
˛i
();

92 6241 
Õt_putc
(
c
);

93 6242 
cga_putc
(
c
);

102 6251 
¥ötöt
(
xx
, 
ba£
, 
sgn
)

104 6253 
	gdigôs
[] = "0123456789ABCDEF";

105 6254 
	gbuf
[16];

106 6255 
	gi
 = 0, 
	g√g
 = 0;

107 6256 
uöt
 
	gx
;

109 6258 if(
	gsgn
 && 
	gxx
 < 0){

110 6259 
	g√g
 = 1;

111 6260 
	gx
 = 0 - 
xx
;

113 6262 
	gx
 = 
xx
;

117 6266 
	gbuf
[
i
++] = 
digôs
[
x
 % 
ba£
];

118 6267 }(
	gx
 /
ba£
) != 0);

119 6268 if(
	g√g
)

120 6269 
	gbuf
[
i
++] = '-';

122 6271 --
	gi
 >= 0)

123 6272 
c⁄s_putc
(
buf
[
i
]);

128 6277 
˝rötf
(*
fmt
, ...)

130 6279 
	gi
, 
	gc
, 
	g°©e
, 
	glockög
;

131 6280 
uöt
 *
	g¨gp
;

132 6281 *
	gs
;

134 6283 
	glockög
 = 
u£_c⁄sﬁe_lock
;

135 6284 if(
	glockög
)

136 6285 
acquúe
(&
c⁄sﬁe_lock
);

138 6287 
	g¨gp
 = (
uöt
*)(*)&
fmt
 + 1;

139 6288 
	g°©e
 = 0;

140 6289 
	gi
 = 0; 
	gfmt
[
i
]; i++){

141 6290 
	gc
 = 
fmt
[
i
] & 0xff;

142 6291 
	g°©e
){

144 6293 if(
c
 == '%')

145 6294 
°©e
 = '%';

147 6296 
c⁄s_putc
(
c
);

152 6301 
c
){

154 6303 
¥ötöt
(*
¨gp
++, 10, 1);

158 6307 
¥ötöt
(*
¨gp
++, 16, 0);

161 6310 
s
 = (*)*
¨gp
++;

162 6311 if(
	gs
 == 0)

163 6312 
s
 = "(null)";

164 6313 ; *
	gs
; s++)

165 6314 
c⁄s_putc
(*
s
);

168 6317 
c⁄s_putc
('%');

172 6321 
c⁄s_putc
('%');

173 6322 
c⁄s_putc
(
c
);

176 6325 
	g°©e
 = 0;

181 6330 if(
	glockög
)

182 6331 
ªÀa£
(&
c⁄sﬁe_lock
);

186 6335 
c⁄sﬁe_wrôe
(
öode
 *
ù
, *
buf
, 
n
)

188 6337 
	gi
;

190 6339 
iu∆ock
(
ù
);

191 6340 
acquúe
(&
c⁄sﬁe_lock
);

192 6341 
	gi
 = 0; i < 
	gn
; i++)

193 6342 
c⁄s_putc
(
buf
[
i
] & 0xff);

194 6343 
ªÀa£
(&
c⁄sﬁe_lock
);

195 6344 
ûock
(
ù
);

197 6346  
	gn
;

201 350 #deföê
	#INPUT_BUF
 128

	)

203 6352 
•ölock
 
	mlock
;

204 6353 
	mbuf
[
INPUT_BUF
];

205 6354 
	mr
;

206 6355 
	mw
;

207 6356 
	me
;

208 6357 } 
	göput
;

210 359 #deföê
	#C
(
x
) ((x)-'@')

211 6360

	)

213 6362 
c⁄sﬁe_öå
((*
gëc
)())

215 6364 
c
;

217 6366 
	`acquúe
(&
öput
.
lock
);

218 6367 (
c
 = 
	`gëc
()) >= 0){

219 6368 
c
){

220 6369 
	`C
('P'):

221 6370 
	`¥ocdump
();

223 6372 
	`C
('U'):

224 6373 
öput
.
e
 > i≈ut.
w
 &&

225 6374 
öput
.
buf
[(öput.
e
-1Ë% 
INPUT_BUF
] != '\n'){

226 6375 
öput
.
e
--;

227 6376 
	`c⁄s_putc
(
BACKSPACE
);

230 6379 
	`C
('H'):

231 6380 if(
öput
.
e
 > i≈ut.
w
){

232 6381 
öput
.
e
--;

233 6382 
	`c⁄s_putc
(
BACKSPACE
);

237 6386 if(
c
 !0 && 
öput
.
e
 < i≈ut.
r
+
INPUT_BUF
){

238 6387 
öput
.
buf
[öput.
e
++ % 
INPUT_BUF
] = 
c
;

239 6388 
	`c⁄s_putc
(
c
);

240 6389 if(
c
 ='\n' || c =
	`C
('D'Ë|| 
öput
.
e
 =öput.
r
+
INPUT_BUF
){

241 6390 
öput
.
w
 = i≈ut.
e
;

242 6391 
	`wakeup
(&
öput
.
r
);

248 6397 
	`ªÀa£
(&
öput
.
lock
);

249 6398 
	}
}

252 6401 
c⁄sﬁe_ªad
(
öode
 *
ù
, *
d°
, 
n
)

254 6403 
uöt
 
	gèrgë
;

255 6404 
	gc
;

257 6406 
iu∆ock
(
ù
);

258 6407 
	gèrgë
 = 
n
;

259 6408 
acquúe
(&
öput
.
lock
);

260 6409 
	gn
 > 0){

261 6410 
	göput
.
	gr
 =
öput
.
w
){

262 6411 if(
˝
->
kûÀd
){

263 6412 
ªÀa£
(&
öput
.
lock
);

264 6413 
ûock
(
ù
);

267 6416 
¶ìp
(&
öput
.
r
, &öput.
lock
);

269 6418 
	gc
 = 
öput
.
buf
[öput.
r
++ % 
INPUT_BUF
];

270 6419 if(
	gc
 =
C
('D')){

271 6420 if(
n
 < 
èrgë
){

274 6423 
öput
.
r
--;

278 6427 *
	gd°
++ = 
c
;

279 6428 --
	gn
;

280 6429 if(
	gc
 == '\n')

283 6432 
ªÀa£
(&
öput
.
lock
);

284 6433 
ûock
(
ù
);

286 6435  
	gèrgë
 - 
	gn
;

302 6451 
c⁄sﬁe_öô
()

304 6453 
öôlock
(&
c⁄sﬁe_lock
, "console");

305 6454 
öôlock
(&
öput
.
lock
, "console input");

307 6456 
	gdevsw
[
CONSOLE
].
	gwrôe
 = 
c⁄sﬁe_wrôe
;

308 6457 
	gdevsw
[
CONSOLE
].
	gªad
 = 
c⁄sﬁe_ªad
;

309 6458 
	gu£_c⁄sﬁe_lock
 = 1;

311 6460 
pic_íabÀ
(
IRQ_KBD
);

312 6461 
iﬂpic_íabÀ
(
IRQ_KBD
, 0);

316 6465 
∑nic
(*
s
)

318 6467 
	gi
;

319 6468 
uöt
 
	gpcs
[10];

321 6470 
__asm
 
__vﬁ©ûe
("cli");

322 6471 
	gu£_c⁄sﬁe_lock
 = 0;

323 6472 
˝rötf
("˝u%d:Ö™ic: ", 
˝u
());

324 6473 
˝rötf
(
s
, 0);

325 6474 
˝rötf
("\n", 0);

326 6475 
gëˇŒîpcs
(&
s
, 
pcs
);

327 6476 
	gi
=0; i<10; i++)

328 6477 
˝rötf
(" %p", 
pcs
[
i
]);

329 6478 
	g∑nicked
 = 1;

	@fmt/defs.h

1 0200 
	gbuf
;

2 0201 
	gc⁄ãxt
;

3 0202 
	gfûe
;

4 0203 
	göode
;

5 0204 
	gpùe
;

6 0205 
	g¥oc
;

7 0206 
	g•ölock
;

8 0207 
	g°©
;

11 0210 
böô
();

12 0211 
buf
* 
bªad
(
uöt
, uint);

13 0212 
bªl£
(
buf
*);

14 0213 
bwrôe
(
buf
*);

17 0216 
c⁄sﬁe_öô
();

18 0217 
˝rötf
(*, ...);

19 0218 
c⁄sﬁe_öå
((*)());

20 0219 
	$∑nic
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

23 0222 
	`exec
(*, **);

26 0225 
fûe
* 
	`fûóŒoc
();

27 0226 
	`fûe˛o£
(
fûe
*);

28 0227 
fûe
* 
	`fûedup
(file*);

29 0228 
	`fûeöô
();

30 0229 
	`fûîód
(
fûe
*, *, 
n
);

31 0230 
	`fûe°©
(
fûe
*, 
°©
*);

32 0231 
	`fûewrôe
(
fûe
*, *, 
n
);

35 0234 
	`dúlök
(
öode
*, *, 
uöt
);

36 0235 
öode
* 
	`dúlookup
(öode*, *, 
uöt
*);

37 0236 
öode
* 
	`üŒoc
(
uöt
, );

38 0237 
öode
* 
	`idup
(inode*);

39 0238 
	`iöô
();

40 0239 
	`ûock
(
öode
*);

41 0240 
	`ùut
(
öode
*);

42 0241 
	`iu∆ock
(
öode
*);

43 0242 
	`iu∆ockput
(
öode
*);

44 0243 
	`iupd©e
(
öode
*);

45 0244 
	`«mecmp
(const *, const *);

46 0245 
öode
* 
	`«mei
(*);

47 0246 
öode
* 
	`«meù¨ít
(*, *);

48 0247 
	`ªadi
(
öode
*, *, 
uöt
, uint);

49 0248 
	`°©i
(
öode
*, 
°©
*);

50 0249 
	`wrôei
(
öode
*, *, 
uöt
, uint);

52 0251 
	`ide_öô
();

53 0252 
	`ide_öå
();

54 0253 
	`ide_rw
(
buf
 *);

57 0256 
	`iﬂpic_íabÀ
(
úq
, 
˝u
);

58 0257 
uch¨
 
iﬂpic_id
;

59 0258 
	`iﬂpic_öô
();

62 0261 * 
	`kÆloc
();

63 0262 
	`k‰ì
(*, );

64 0263 
	`köô
();

67 0266 
	`kbd_öå
();

70 0269 
	`˝u
();

71 0270 vﬁ©ûê
uöt
* 
œpic
;

72 0271 
	`œpic_eoi
();

73 0272 
	`œpic_öô
();

74 0273 
	`œpic_°¨èp
(
uch¨
, 
uöt
);

77 0276 
ismp
;

78 0277 
	`mp_b˝u
();

79 0278 
	`mp_öô
();

80 0279 
	`mp_°¨âhem
();

83 0282 
	`pic_íabÀ
();

84 0283 
	`pic_öô
();

87 0286 
	`pùóŒoc
(
fûe
**, file**);

88 0287 
	`pùe˛o£
(
pùe
*, );

89 0288 
	`pùîód
(
pùe
*, *, );

90 0289 
	`pùewrôe
(
pùe
*, *, );

93 0292 
¥oc
* 
	`c›y¥oc
(proc*);

94 0293 
¥oc
* 
	`cuΩroc
();

95 0294 
	`exô
();

96 0295 
	`grow¥oc
();

97 0296 
	`kûl
();

98 0297 
	`pöô
();

99 0298 
	`¥ocdump
();

100 0299 
	$scheduÀr
(Ë
	`__©åibuã__
((
n‹ëu∫
));

101 0300 
	`£tup£gs
(
¥oc
*);

102 0301 
	`¶ìp
(*, 
•ölock
*);

103 0302 
	`u£röô
();

104 0303 
	`waô
();

105 0304 
	`wakeup
(*);

106 0305 
	`yõld
();

109 0308 
	`swtch
(
c⁄ãxt
*, context*);

112 0311 
	`acquúe
(
•ölock
*);

113 0312 
	`gëˇŒîpcs
(*, 
uöt
*);

114 0313 
	`hﬁdög
(
•ölock
*);

115 0314 
	`öôlock
(
•ölock
*, *);

116 0315 
	`ªÀa£
(
•ölock
*);

117 0316 
	`push˛i
();

118 0317 
	`p›˛i
();

121 0320 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

122 0321 * 
	`memmove
(*, c⁄° *, 
uöt
);

123 0322 * 
	`mem£t
(*, , 
uöt
);

124 0323 * 
	`ß„°r˝y
(*, const *, );

125 0324 
	`°æí
(const *);

126 0325 
	`°∫cmp
(c⁄° *, c⁄° *, 
uöt
);

127 0326 * 
	`°∫˝y
(*, const *, );

130 0329 
	`¨göt
(, *);

131 0330 
	`¨g±r
(, **, );

132 0331 
	`¨g°r
(, **);

133 0332 
	`„tchöt
(
¥oc
*, 
uöt
, *);

134 0333 
	`„tch°r
(
¥oc
*, 
uöt
, **);

135 0334 
	`sysˇŒ
();

138 0337 
	`timî_öô
();

141 0340 
	`idtöô
();

142 0341 
ticks
;

143 0342 
	`tvöô
();

144 0343 
•ölock
 
tick¶ock
;

147 346 #deföê
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

	@fmt/dev.h

1 2950 
	sdevsw
 {

2 2951 (*
	mªad
)(
	möode
*, *, );

3 2952 (*
	mwrôe
)(
	möode
*, *, );

6 2955 
devsw
 devsw[];

8 957 #deföê
	#CONSOLE
 1

	)

	@fmt/elf.h

3 802 #deföê
	#ELF_MAGIC
 0x464C457FU

4 0803

	)

6 0805 
	sñfhdr
 {

7 0806 
uöt
 
	mmagic
;

8 0807 
uch¨
 
	mñf
[12];

9 0808 
ush‹t
 
	mty≥
;

10 0809 
ush‹t
 
	mmachöe
;

11 0810 
uöt
 
	mvîsi⁄
;

12 0811 
uöt
 
	míåy
;

13 0812 
uöt
 
	mphoff
;

14 0813 
uöt
 
	mshoff
;

15 0814 
uöt
 
	mÊags
;

16 0815 
ush‹t
 
	mehsize
;

17 0816 
ush‹t
 
	mphítsize
;

18 0817 
ush‹t
 
	mphnum
;

19 0818 
ush‹t
 
	mshítsize
;

20 0819 
ush‹t
 
	mshnum
;

21 0820 
ush‹t
 
	msh°∫dx
;

25 0824 
	s¥oghdr
 {

26 0825 
uöt
 
	mty≥
;

27 0826 
uöt
 
	moff£t
;

28 0827 
uöt
 
	mva
;

29 0828 
uöt
 
	m∑
;

30 0829 
uöt
 
	mfûesz
;

31 0830 
uöt
 
	mmemsz
;

32 0831 
uöt
 
	mÊags
;

33 0832 
uöt
 
	mÆign
;

37 836 #deföê
	#ELF_PROG_LOAD
 1

	)

40 839 #deföê
	#ELF_PROG_FLAG_EXEC
 1

	)

41 840 #deföê
	#ELF_PROG_FLAG_WRITE
 2

	)

42 841 #deföê
	#ELF_PROG_FLAG_READ
 4

	)

	@fmt/exec.c

1 900 #ö˛udê
	~"ty≥s.h
"

2 901 #ö˛udê
	~"∑øm.h
"

3 902 #ö˛udê
	~"mmu.h
"

4 903 #ö˛udê
	~"¥oc.h
"

5 904 #ö˛udê
	~"defs.h
"

6 905 #ö˛udê
	~"x86.h
"

7 906 #ö˛udê
	~"ñf.h
"

10 4909 
exec
(*
∑th
, **
¨gv
)

12 4911 *
	gmem
, *
	gs
, *
	gœ°
;

13 4912 
	gi
, 
	g¨gc
, 
	g¨gÀn
, 
	gÀn
, 
	goff
;

14 4913 
uöt
 
	gsz
, 
	g•
, 
	g¨gp
;

15 4914 
ñfhdr
 
	gñf
;

16 4915 
öode
 *
	gù
;

17 4916 
¥oghdr
 
	gph
;

19 4918 if((
	gù
 = 
«mei
(
∑th
)) == 0)

21 4920 
ûock
(
ù
);

24 4923 
	gmem
 = 0;

25 4924 
	gsz
 = 0;

28 4927 if(
ªadi
(
ù
, (*)&
ñf
, 0, ”lf)Ë< (
	gñf
))

29 4928 
	gbad
;

30 4929 if(
	gñf
.
	gmagic
 !
ELF_MAGIC
)

31 4930 
bad
;

32 4931 
	gi
=0, 
	goff
=
ñf
.
phoff
; i<
	gñf
.
	gphnum
; i++, off+=(
ph
)){

33 4932 if(
ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

34 4933 
bad
;

35 4934 if(
	gph
.
	gty≥
 !
ELF_PROG_LOAD
)

37 4936 if(
	gph
.
	gmemsz
 <Öh.
	gfûesz
)

38 4937 
	gbad
;

39 4938 
	gsz
 +
ph
.
memsz
;

43 4942 
	g¨gÀn
 = 0;

44 4943 
	g¨gc
=0; 
	g¨gv
[
¨gc
];árgc++)

45 4944 
	g¨gÀn
 +
°æí
(
¨gv
[
¨gc
]) + 1;

46 4945 
	g¨gÀn
 = (
¨gÀn
+3) & ~3;

47 4946 
	gsz
 +
¨gÀn
 + 4*(
¨gc
+1);

50 4949 
	gsz
 +
PAGE
;

52 4951 
	gsz
 = (
sz
+
PAGE
-1) & ~(PAGE-1);

53 4952 
	gmem
 = 
kÆloc
(
sz
);

54 4953 if(
	gmem
 == 0)

55 4954 
bad
;

56 4955 
mem£t
(
mem
, 0, 
sz
);

59 4958 
	gi
=0, 
	goff
=
ñf
.
phoff
; i<
	gñf
.
	gphnum
; i++, off+=(
ph
)){

60 4959 if(
ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

61 4960 
bad
;

62 4961 if(
	gph
.
	gty≥
 !
ELF_PROG_LOAD
)

64 4963 if(
	gph
.
	gva
 +Öh.
	gmemsz
 > 
	gsz
)

65 4964 
	gbad
;

66 4965 if(
ªadi
(
ù
, 
mem
 + 
ph
.
va
,Öh.
off£t
,Öh.
fûesz
) !=Öh.filesz)

67 4966 
bad
;

68 4967 
mem£t
(
mem
 + 
ph
.
va
 +Öh.
fûesz
, 0,Öh.
memsz
 -Öh.filesz);

70 4969 
iu∆ockput
(
ù
);

73 4972 
	g•
 = 
sz
;

74 4973 
	g¨gp
 = 
sz
 - 
¨gÀn
 - 4*(
¨gc
+1);

77 4976 *(
	guöt
*)(
	gmem
+
	g¨gp
 + 4*
	g¨gc
) = 0;

78 4977 
	gi
=
¨gc
-1; i>=0; i--){

79 4978 
	gÀn
 = 
°æí
(
¨gv
[
i
]) + 1;

80 4979 
	g•
 -
Àn
;

81 4980 
memmove
(
mem
+
•
, 
¨gv
[
i
], 
Àn
);

82 4981 *(
	guöt
*)(
	gmem
+
	g¨gp
 + 4*
	gi
Ë
•
;

86 4985 
	g•
 = 
¨gp
;

87 4986 
	g•
 -= 4;

88 4987 *(
	guöt
*)(
	gmem
+
	g•
Ë
¨gp
;

89 4988 
	g•
 -= 4;

90 4989 *(
	guöt
*)(
	gmem
+
	g•
Ë
¨gc
;

91 4990 
	g•
 -= 4;

92 4991 *(
	guöt
*)(
	gmem
+
	g•
) = 0xffffffff;

95 4994 
	gœ°
=
s
=
∑th
; *
	gs
; s++)

96 4995 if(*
	gs
 == '/')

97 4996 
œ°
 = 
s
+1;

98 4997 
ß„°r˝y
(
˝
->
«me
, 
œ°
, (cp->name));

102 5001 
k‰ì
(
˝
->
mem
, cp->
sz
);

103 5002 
	g˝
->
	gmem
 = 
mem
;

104 5003 
	g˝
->
	gsz
 = 
sz
;

105 5004 
	g˝
->
	gtf
->
	geù
 = 
ñf
.
íåy
;

106 5005 
	g˝
->
	gtf
->
	ge•
 = 
•
;

107 5006 
£tup£gs
(
˝
);

110 5009 
	gbad
:

111 5010 if(
mem
)

112 5011 
k‰ì
(
mem
, 
sz
);

113 5012 
iu∆ockput
(
ù
);

	@fmt/fcntl.h

1 000 #deföê
	#O_RDONLY
 0x000

	)

2 001 #deföê
	#O_WRONLY
 0x001

	)

3 002 #deföê
	#O_RDWR
 0x002

	)

4 003 #deföê
	#O_CREATE
 0x200

	)

	@fmt/file.c

1 350 #ö˛udê
	~"ty≥s.h
"

2 351 #ö˛udê
	~"defs.h
"

3 352 #ö˛udê
	~"∑øm.h
"

4 353 #ö˛udê
	~"fûe.h
"

5 354 #ö˛udê
	~"•ölock.h
"

6 355 #ö˛udê
	~"dev.h
"

8 4357 
devsw
 
	gdevsw
[
NDEV
];

9 4358 
•ölock
 
	gfûe_èbÀ_lock
;

10 4359 
fûe
 
	gfûe
[
NFILE
];

13 4362 
fûeöô
()

15 4364 
öôlock
(&
fûe_èbÀ_lock
, "file_table");

19 4368 
	gfûe
*

20 4369 
fûóŒoc
()

22 4371 
	gi
;

24 4373 
acquúe
(&
fûe_èbÀ_lock
);

25 4374 
	gi
 = 0; i < 
	gNFILE
; i++){

26 4375 if(
	gfûe
[
i
].
	gty≥
 =
FD_CLOSED
){

27 4376 
fûe
[
i
].
ty≥
 = 
FD_NONE
;

28 4377 
	gfûe
[
i
].
	gªf
 = 1;

29 4378 
ªÀa£
(&
fûe_èbÀ_lock
);

30 4379  
	gfûe
 + 
	gi
;

33 4382 
ªÀa£
(&
fûe_èbÀ_lock
);

38 4387 
	gfûe
*

39 4388 
fûedup
(
fûe
 *
f
)

41 4390 
acquúe
(&
fûe_èbÀ_lock
);

42 4391 if(
	gf
->
	gªf
 < 1 || f->
	gty≥
 =
FD_CLOSED
)

43 4392 
∑nic
("filedup");

44 4393 
	gf
->
	gªf
++;

45 4394 
ªÀa£
(&
fûe_èbÀ_lock
);

46 4395  
	gf
;

53 4402 
fûe˛o£
(
fûe
 *
f
)

55 4404 
fûe
 
	gff
;

57 4406 
acquúe
(&
fûe_èbÀ_lock
);

58 4407 if(
	gf
->
	gªf
 < 1 || f->
	gty≥
 =
FD_CLOSED
)

59 4408 
∑nic
("fileclose");

60 4409 if(--
	gf
->
	gªf
 > 0){

61 4410 
ªÀa£
(&
fûe_èbÀ_lock
);

64 4413 
	gff
 = *
f
;

65 4414 
	gf
->
	gªf
 = 0;

66 4415 
	gf
->
	gty≥
 = 
FD_CLOSED
;

67 4416 
ªÀa£
(&
fûe_èbÀ_lock
);

69 4418 if(
	gff
.
	gty≥
 =
FD_PIPE
)

70 4419 
pùe˛o£
(
ff
.
pùe
, ff.
wrôabÀ
);

71 4420 if(
	gff
.
	gty≥
 =
FD_INODE
)

72 4421 
ùut
(
ff
.
ù
);

74 4423 
∑nic
("fileclose");

79 4428 
fûe°©
(
fûe
 *
f
, 
°©
 *
°
)

81 4430 if(
	gf
->
	gty≥
 =
FD_INODE
){

82 4431 
ûock
(
f
->
ù
);

83 4432 
°©i
(
f
->
ù
, 
°
);

84 4433 
iu∆ock
(
f
->
ù
);

103 4452 
fûîód
(
fûe
 *
f
, *
addr
, 
n
)

105 4454 
	gr
;

107 4456 if(
	gf
->
	gªadabÀ
 == 0)

109 4458 if(
	gf
->
	gty≥
 =
FD_PIPE
)

110 4459  
pùîód
(
f
->
pùe
, 
addr
, 
n
);

111 4460 if(
	gf
->
	gty≥
 =
FD_INODE
){

112 4461 
ûock
(
f
->
ù
);

113 4462 if((
	gr
 = 
ªadi
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

114 4463 
	gf
->
	goff
 +
r
;

115 4464 
iu∆ock
(
f
->
ù
);

116 4465  
	gr
;

118 4467 
∑nic
("fileread");

123 4472 
fûewrôe
(
fûe
 *
f
, *
addr
, 
n
)

125 4474 
	gr
;

127 4476 if(
	gf
->
	gwrôabÀ
 == 0)

129 4478 if(
	gf
->
	gty≥
 =
FD_PIPE
)

130 4479  
pùewrôe
(
f
->
pùe
, 
addr
, 
n
);

131 4480 if(
	gf
->
	gty≥
 =
FD_INODE
){

132 4481 
ûock
(
f
->
ù
);

133 4482 if((
	gr
 = 
wrôei
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

134 4483 
	gf
->
	goff
 +
r
;

135 4484 
iu∆ock
(
f
->
ù
);

136 4485  
	gr
;

138 4487 
∑nic
("filewrite");

	@fmt/file.h

1 3100 
	sfûe
 {

2 3101Énum { 
	mFD_CLOSED
, 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
 } 
	mty≥
;

3 3102 
	mªf
;

4 3103 
	mªadabÀ
;

5 3104 
	mwrôabÀ
;

6 3105 
pùe
 *
	mpùe
;

7 3106 
öode
 *
	mù
;

8 3107 
uöt
 
	moff
;

	@fmt/fs.c

13 662 #ö˛udê
	~"ty≥s.h
"

14 663 #ö˛udê
	~"defs.h
"

15 664 #ö˛udê
	~"∑øm.h
"

16 665 #ö˛udê
	~"°©.h
"

17 666 #ö˛udê
	~"mmu.h
"

18 667 #ö˛udê
	~"¥oc.h
"

19 668 #ö˛udê
	~"•ölock.h
"

20 669 #ö˛udê
	~"buf.h
"

21 670 #ö˛udê
	~"fs.h
"

22 671 #ö˛udê
	~"fsv¨.h
"

23 672 #ö˛udê
	~"dev.h
"

25 674 #deföê
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

26 3675 
ôrunc
(
öode
*);

30 3679 
ªadsb
(
dev
, 
su≥rblock
 *
sb
)

32 3681 
buf
 *
	gbp
;

34 3683 
	gbp
 = 
bªad
(
dev
, 1);

35 3684 
memmove
(
sb
, 
bp
->
d©a
, (*sb));

36 3685 
bªl£
(
bp
);

41 3690 
bzîo
(
dev
, 
bno
)

43 3692 
buf
 *
	gbp
;

45 3694 
	gbp
 = 
bªad
(
dev
, 
bno
);

46 3695 
mem£t
(
bp
->
d©a
, 0, 
BSIZE
);

47 3696 
bwrôe
(
bp
);

48 3697 
bªl£
(
bp
);

54 3703 
	guöt


55 3704 
bÆloc
(
uöt
 
dev
)

57 3706 
	gb
, 
	gbi
, 
	gm
;

58 3707 
buf
 *
	gbp
;

59 3708 
su≥rblock
 
	gsb
;

61 3710 
	gbp
 = 0;

62 3711 
ªadsb
(
dev
, &
sb
);

63 3712 
	gb
 = 0; b < 
	gsb
.
	gsize
; b +
BPB
){

64 3713 
bp
 = 
bªad
(
dev
, 
BBLOCK
(
b
, 
sb
.
nöodes
));

65 3714 
	gbi
 = 0; bò< 
	gBPB
; bi++){

66 3715 
	gm
 = 1 << (
bi
 % 8);

67 3716 if((
	gbp
->
	gd©a
[
bi
/8] & 
	gm
) == 0){

68 3717 
bp
->
d©a
[
bi
/8] |
m
;

69 3718 
bwrôe
(
bp
);

70 3719 
bªl£
(
bp
);

71 3720  
	gb
 + 
	gbi
;

74 3723 
bªl£
(
bp
);

76 3725 
∑nic
("balloc: out of blocks");

81 3730 
b‰ì
(
dev
, 
uöt
 
b
)

83 3732 
buf
 *
	gbp
;

84 3733 
su≥rblock
 
	gsb
;

85 3734 
	gbi
, 
	gm
;

87 3736 
bzîo
(
dev
, 
b
);

89 3738 
ªadsb
(
dev
, &
sb
);

90 3739 
	gbp
 = 
bªad
(
dev
, 
BBLOCK
(
b
, 
sb
.
nöodes
));

91 3740 
	gbi
 = 
b
 % 
BPB
;

92 3741 
	gm
 = 1 << (
bi
 % 8);

93 3742 if((
	gbp
->
	gd©a
[
bi
/8] & 
	gm
) == 0)

94 3743 
∑nic
("freeing free block");

95 3744 
	gbp
->
	gd©a
[
bi
/8] &~
m
;

96 3745 
bwrôe
(
bp
);

97 3746 
bªl£
(
bp
);

135 3784 
•ölock
 
	mlock
;

136 3785 
öode
 
	möode
[
NINODE
];

137 3786 } 
	giˇche
;

140 3789 
iöô
()

142 3791 
öôlock
(&
iˇche
.
lock
, "icache.lock");

153 3802 
	göode
*

154 3803 
igë
(
uöt
 
dev
, uöà
öum
)

156 3805 
öode
 *
	gù
, *
	gem±y
;

158 3807 
acquúe
(&
iˇche
.
lock
);

161 3810 
	gem±y
 = 0;

162 3811 
	gù
 = &
iˇche
.
öode
[0]; i∞< &
	giˇche
.
	göode
[
NINODE
]; ip++){

163 3812 if(
	gù
->
	gªf
 > 0 && ip->
	gdev
 =
dev
 && 
ù
->
öum
 == inum){

164 3813 
ù
->
ªf
++;

165 3814 
ªÀa£
(&
iˇche
.
lock
);

166 3815  
	gù
;

168 3817 if(
	gem±y
 =0 && 
ù
->
ªf
 == 0)

169 3818 
em±y
 = 
ù
;

173 3822 if(
	gem±y
 == 0)

174 3823 
∑nic
("iget:Ço inodes");

176 3825 
	gù
 = 
em±y
;

177 3826 
	gù
->
	gdev
 = 
dev
;

178 3827 
	gù
->
	göum
 = 
öum
;

179 3828 
	gù
->
	gªf
 = 1;

180 3829 
	gù
->
	gÊags
 = 0;

181 3830 
ªÀa£
(&
iˇche
.
lock
);

183 3832  
	gù
;

188 3837 
	göode
*

189 3838 
idup
(
öode
 *
ù
)

191 3840 
acquúe
(&
iˇche
.
lock
);

192 3841 
	gù
->
	gªf
++;

193 3842 
ªÀa£
(&
iˇche
.
lock
);

194 3843  
	gù
;

203 3852 
ûock
(
öode
 *
ù
)

205 3854 
buf
 *
	gbp
;

206 3855 
döode
 *
	gdù
;

208 3857 if(
	gù
 =0 || 
ù
->
ªf
 < 1)

209 3858 
∑nic
("ilock");

211 3860 
acquúe
(&
iˇche
.
lock
);

212 3861 
	gù
->
	gÊags
 & 
	gI_BUSY
)

213 3862 
¶ìp
(
ù
, &
iˇche
.
lock
);

214 3863 
	gù
->
	gÊags
 |
I_BUSY
;

215 3864 
ªÀa£
(&
iˇche
.
lock
);

217 3866 if(!(
	gù
->
	gÊags
 & 
	gI_VALID
)){

218 3867 
	gbp
 = 
bªad
(
ù
->
dev
, 
IBLOCK
(ù->
öum
));

219 3868 
	gdù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

220 3869 
	gù
->
	gty≥
 = 
dù
->
ty≥
;

221 3870 
	gù
->
	gmaj‹
 = 
dù
->
maj‹
;

222 3871 
	gù
->
	gmö‹
 = 
dù
->
mö‹
;

223 3872 
	gù
->
	g∆ök
 = 
dù
->
∆ök
;

224 3873 
	gù
->
	gsize
 = 
dù
->
size
;

225 3874 
memmove
(
ù
->
addrs
, 
dù
->addrs, (ip->addrs));

226 3875 
bªl£
(
bp
);

227 3876 
	gù
->
	gÊags
 |
I_VALID
;

228 3877 if(
	gù
->
	gty≥
 == 0)

229 3878 
∑nic
("ilock:ÇoÅype");

235 3884 
iu∆ock
(
öode
 *
ù
)

237 3886 if(
	gù
 =0 || !(
ù
->
Êags
 & 
I_BUSY
Ë|| ip->
ªf
 < 1)

238 3887 
∑nic
("iunlock");

240 3889 
acquúe
(&
iˇche
.
lock
);

241 3890 
	gù
->
	gÊags
 &~
I_BUSY
;

242 3891 
wakeup
(
ù
);

243 3892 
ªÀa£
(&
iˇche
.
lock
);

253 3902 
ùut
(
öode
 *
ù
)

255 3904 
acquúe
(&
iˇche
.
lock
);

256 3905 if(
	gù
->
	gªf
 =1 && (
ù
->
Êags
 & 
I_VALID
Ë&& ip->
∆ök
 == 0){

258 3907 if(
ù
->
Êags
 & 
I_BUSY
)

259 3908 
∑nic
("iput busy");

260 3909 
	gù
->
	gÊags
 |
I_BUSY
;

261 3910 
ªÀa£
(&
iˇche
.
lock
);

262 3911 
ôrunc
(
ù
);

263 3912 
	gù
->
	gty≥
 = 0;

264 3913 
iupd©e
(
ù
);

265 3914 
acquúe
(&
iˇche
.
lock
);

266 3915 
	gù
->
	gÊags
 &~
I_BUSY
;

267 3916 
wakeup
(
ù
);

269 3918 
	gù
->
	gªf
--;

270 3919 
ªÀa£
(&
iˇche
.
lock
);

275 3924 
iu∆ockput
(
öode
 *
ù
)

277 3926 
iu∆ock
(
ù
);

278 3927 
ùut
(
ù
);

282 3931 
	göode
*

283 3932 
üŒoc
(
uöt
 
dev
, 
ty≥
)

285 3934 
	göum
;

286 3935 
buf
 *
	gbp
;

287 3936 
döode
 *
	gdù
;

288 3937 
su≥rblock
 
	gsb
;

290 3939 
ªadsb
(
dev
, &
sb
);

291 3940 
	göum
 = 1; inum < 
	gsb
.
	gnöodes
; inum++){

292 3941 
	gbp
 = 
bªad
(
dev
, 
IBLOCK
(
öum
));

293 3942 
	gdù
 = (
döode
*)
bp
->
d©a
 + 
öum
%
IPB
;

294 3943 if(
	gdù
->
	gty≥
 == 0){

295 3944 
mem£t
(
dù
, 0, (*dip));

296 3945 
	gdù
->
	gty≥
 = 
ty≥
;

297 3946 
bwrôe
(
bp
);

298 3947 
bªl£
(
bp
);

299 3948  
igë
(
dev
, 
öum
);

301 3950 
bªl£
(
bp
);

303 3952 
∑nic
("ialloc:Ço inodes");

308 3957 
iupd©e
(
öode
 *
ù
)

310 3959 
buf
 *
	gbp
;

311 3960 
döode
 *
	gdù
;

313 3962 
	gbp
 = 
bªad
(
ù
->
dev
, 
IBLOCK
(ù->
öum
));

314 3963 
	gdù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

315 3964 
	gdù
->
	gty≥
 = 
ù
->
ty≥
;

316 3965 
	gdù
->
	gmaj‹
 = 
ù
->
maj‹
;

317 3966 
	gdù
->
	gmö‹
 = 
ù
->
mö‹
;

318 3967 
	gdù
->
	g∆ök
 = 
ù
->
∆ök
;

319 3968 
	gdù
->
	gsize
 = 
ù
->
size
;

320 3969 
memmove
(
dù
->
addrs
, 
ù
->addrs, (ip->addrs));

321 3970 
bwrôe
(
bp
);

322 3971 
bªl£
(
bp
);

334 3983 
	guöt


335 3984 
bm≠
(
öode
 *
ù
, 
uöt
 
bn
, 
Æloc
)

337 3986 
uöt
 
	gaddr
, *
	ga
;

338 3987 
buf
 *
	gbp
;

340 3989 if(
	gbn
 < 
	gNDIRECT
){

341 3990 if((
	gaddr
 = 
ù
->
addrs
[
bn
]) == 0){

342 3991 if(!
Æloc
)

344 3993 
	gù
->
	gaddrs
[
bn
] = 
addr
 = 
bÆloc
(
ù
->
dev
);

346 3995  
	gaddr
;

348 3997 
	gbn
 -
NDIRECT
;

351 4000 if(
	gbn
 < 
	gNINDIRECT
){

353 4002 if((
	gaddr
 = 
ù
->
addrs
[
INDIRECT
]) == 0){

354 4003 if(!
Æloc
)

356 4005 
	gù
->
	gaddrs
[
INDIRECT
] = 
addr
 = 
bÆloc
(
ù
->
dev
);

358 4007 
	gbp
 = 
bªad
(
ù
->
dev
, 
addr
);

359 4008 
	ga
 = (
uöt
*)
bp
->
d©a
;

361 4010 if((
	gaddr
 = 
a
[
bn
]) == 0){

362 4011 if(!
Æloc
){

363 4012 
bªl£
(
bp
);

366 4015 
	ga
[
bn
] = 
addr
 = 
bÆloc
(
ù
->
dev
);

367 4016 
bwrôe
(
bp
);

369 4018 
bªl£
(
bp
);

370 4019  
	gaddr
;

373 4022 
∑nic
("bmap: out ofÑange");

378 4027 
ôrunc
(
öode
 *
ù
)

380 4029 
	gi
, 
	gj
;

381 4030 
buf
 *
	gbp
;

382 4031 
uöt
 *
	ga
;

384 4033 
	gi
 = 0; i < 
	gNDIRECT
; i++){

385 4034 if(
	gù
->
	gaddrs
[
i
]){

386 4035 
b‰ì
(
ù
->
dev
, ip->
addrs
[
i
]);

387 4036 
	gù
->
	gaddrs
[
i
] = 0;

391 4040 if(
	gù
->
	gaddrs
[
INDIRECT
]){

392 4041 
	gbp
 = 
bªad
(
ù
->
dev
, ip->
addrs
[
INDIRECT
]);

393 4042 
	ga
 = (
uöt
*)
bp
->
d©a
;

394 4043 
	gj
 = 0; j < 
	gNINDIRECT
; j++){

395 4044 if(
	ga
[
j
])

396 4045 
b‰ì
(
ù
->
dev
, 
a
[
j
]);

398 4047 
bªl£
(
bp
);

399 4048 
	gù
->
	gaddrs
[
INDIRECT
] = 0;

401 4050 
	gù
->
	gsize
 = 0;

402 4051 
iupd©e
(
ù
);

407 4056 
°©i
(
öode
 *
ù
, 
°©
 *
°
)

409 4058 
	g°
->
	gdev
 = 
ù
->
dev
;

410 4059 
	g°
->
	göo
 = 
ù
->
öum
;

411 4060 
	g°
->
	gty≥
 = 
ù
->
ty≥
;

412 4061 
	g°
->
	g∆ök
 = 
ù
->
∆ök
;

413 4062 
	g°
->
	gsize
 = 
ù
->
size
;

418 4067 
ªadi
(
öode
 *
ù
, *
d°
, 
uöt
 
off
, uöà
n
)

420 4069 
uöt
 
	gtŸ
, 
	gm
;

421 4070 
buf
 *
	gbp
;

423 4072 if(
	gù
->
	gty≥
 =
T_DEV
){

424 4073 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
ªad
)

426 4075  
	gdevsw
[
ù
->
maj‹
].
ªad
(ù, 
d°
, 
n
);

429 4078 if(
	goff
 > 
	gù
->
	gsize
 || of‡+ 
	gn
 < off)

431 4080 if(
	goff
 + 
	gn
 > 
	gù
->
	gsize
)

432 4081 
	gn
 = 
ù
->
size
 - 
off
;

434 4083 
	gtŸ
=0;ÅŸ<
	gn
;ÅŸ+=
m
, 
	goff
+=m, 
	gd°
+=m){

435 4084 
bp
 = 
bªad
(
ù
->
dev
, 
bm≠
(ù, 
off
/
BSIZE
, 0));

436 4085 
	gm
 = 
mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

437 4086 
memmove
(
d°
, 
bp
->
d©a
 + 
off
%
BSIZE
, 
m
);

438 4087 
bªl£
(
bp
);

440 4089  
	gn
;

453 4102 
wrôei
(
öode
 *
ù
, *
§c
, 
uöt
 
off
, uöà
n
)

455 4104 
uöt
 
	gtŸ
, 
	gm
;

456 4105 
buf
 *
	gbp
;

458 4107 if(
	gù
->
	gty≥
 =
T_DEV
){

459 4108 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
wrôe
)

461 4110  
	gdevsw
[
ù
->
maj‹
].
wrôe
(ù, 
§c
, 
n
);

464 4113 if(
	goff
 + 
	gn
 < off)

466 4115 if(
	goff
 + 
	gn
 > 
MAXFILE
*
	gBSIZE
)

467 4116 
	gn
 = 
MAXFILE
*
BSIZE
 - 
off
;

469 4118 
	gtŸ
=0;ÅŸ<
	gn
;ÅŸ+=
m
, 
	goff
+=m, 
	g§c
+=m){

470 4119 
bp
 = 
bªad
(
ù
->
dev
, 
bm≠
(ù, 
off
/
BSIZE
, 1));

471 4120 
	gm
 = 
mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

472 4121 
memmove
(
bp
->
d©a
 + 
off
%
BSIZE
, 
§c
, 
m
);

473 4122 
bwrôe
(
bp
);

474 4123 
bªl£
(
bp
);

477 4126 if(
	gn
 > 0 && 
	goff
 > 
	gù
->
	gsize
){

478 4127 
	gù
->
	gsize
 = 
off
;

479 4128 
iupd©e
(
ù
);

481 4130  
	gn
;

487 4136 
«mecmp
(c⁄° *
s
, c⁄° *
t
)

489 4138  
°∫cmp
(
s
, 
t
, 
DIRSIZ
);

504 4153 
	göode
*

505 4154 
dúlookup
(
öode
 *
dp
, *
«me
, 
uöt
 *
poff
)

507 4156 
uöt
 
	goff
, 
	göum
;

508 4157 
buf
 *
	gbp
;

509 4158 
dúít
 *
	gde
;

511 4160 if(
	gdp
->
	gty≥
 !
T_DIR
)

512 4161 
∑nic
("dirlookupÇot DIR");

514 4163 
	goff
 = 0; of‡< 
	gdp
->
	gsize
; of‡+
BSIZE
){

515 4164 
bp
 = 
bªad
(
dp
->
dev
, 
bm≠
(dp, 
off
 / 
BSIZE
, 0));

516 4165 
	gde
 = (
dúít
*)
bp
->
d©a
;

517 4166 
	gde
 < (
	gdúít
*)(
	gbp
->
	gd©a
 + 
	gBSIZE
);

518 4167 
	gde
++){

519 4168 if(
	gde
->
	göum
 == 0)

521 4170 if(
«mecmp
(
«me
, 
de
->name) == 0){

523 4172 if(
poff
)

524 4173 *
poff
 = 
off
 + (
uch¨
*)
de
 - 
bp
->
d©a
;

525 4174 
	göum
 = 
de
->
öum
;

526 4175 
bªl£
(
bp
);

527 4176  
igë
(
dp
->
dev
, 
öum
);

530 4179 
bªl£
(
bp
);

537 4186 
dúlök
(
öode
 *
dp
, *
«me
, 
uöt
 
öo
)

539 4188 
	goff
;

540 4189 
dúít
 
	gde
;

541 4190 
öode
 *
	gù
;

544 4193 if((
	gù
 = 
dúlookup
(
dp
, 
«me
, 0)) != 0){

545 4194 
ùut
(
ù
);

552 4201 
	goff
 = 0; of‡< 
	gdp
->
	gsize
; of‡+(
de
)){

553 4202 if(
ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

554 4203 
∑nic
("dirlinkÑead");

555 4204 if(
	gde
.
	göum
 == 0)

559 4208 
°∫˝y
(
de
.
«me
,Çame, 
DIRSIZ
);

560 4209 
	gde
.
	göum
 = 
öo
;

561 4210 if(
wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

562 4211 
∑nic
("dirlink");

581 4230 
skùñem
(*
∑th
, *
«me
)

583 4232 *
	gs
;

584 4233 
	gÀn
;

586 4235 *
	g∑th
 == '/')

587 4236 
∑th
++;

588 4237 if(*
	g∑th
 == 0)

590 4239 
	gs
 = 
∑th
;

591 4240 *
	g∑th
 !'/' && *
∑th
 != 0)

592 4241 
∑th
++;

593 4242 
	gÀn
 = 
∑th
 - 
s
;

594 4243 if(
	gÀn
 >
DIRSIZ
)

595 4244 
memmove
(
«me
, 
s
, 
DIRSIZ
);

597 4246 
memmove
(
«me
, 
s
, 
Àn
);

598 4247 
	g«me
[
Àn
] = 0;

600 4249 *
	g∑th
 == '/')

601 4250 
∑th
++;

602 4251  
	g∑th
;

608 4257 
	göode
*

609 4258 
_«mei
(*
∑th
, 
∑ª¡
, *
«me
)

611 4260 
öode
 *
	gù
, *
	g√xt
;

613 4262 if(*
	g∑th
 == '/')

614 4263 
ù
 = 
igë
(
ROOTDEV
, 1);

616 4265 
	gù
 = 
idup
(
˝
->
cwd
);

618 4267 (
	g∑th
 = 
skùñem
(
∑th
, 
«me
)) != 0){

619 4268 
ûock
(
ù
);

620 4269 if(
	gù
->
	gty≥
 !
T_DIR
){

621 4270 
iu∆ockput
(
ù
);

624 4273 if(
	g∑ª¡
 && *
	g∑th
 == '\0'){

626 4275 
iu∆ock
(
ù
);

627 4276  
	gù
;

629 4278 if((
	g√xt
 = 
dúlookup
(
ù
, 
«me
, 0)) == 0){

630 4279 
iu∆ockput
(
ù
);

633 4282 
iu∆ockput
(
ù
);

634 4283 
	gù
 = 
√xt
;

636 4285 if(
	g∑ª¡
){

637 4286 
ùut
(
ù
);

640 4289  
	gù
;

643 4292 
	göode
*

644 4293 
«mei
(*
∑th
)

646 4295 
	g«me
[
DIRSIZ
];

647 4296  
_«mei
(
∑th
, 0, 
«me
);

651 4300 
	göode
*

652 4301 
«meù¨ít
(*
∑th
, *
«me
)

654 4303  
_«mei
(
∑th
, 1, 
«me
);

	@fmt/fs.h

8 157 #deföê
	#BSIZE
 512

9 3158

	)

11 3160 
	ssu≥rblock
 {

12 3161 
uöt
 
	msize
;

13 3162 
uöt
 
	mnblocks
;

14 3163 
uöt
 
	mnöodes
;

17 166 #deföê
	#NADDRS
 (
NDIRECT
+1)

	)

18 167 #deföê
	#NDIRECT
 12

	)

19 168 #deföê
	#INDIRECT
 12

	)

20 169 #deföê
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

21 170 #deföê
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

24 3173 
	sdöode
 {

25 3174 
	mty≥
;

26 3175 
	mmaj‹
;

27 3176 
	mmö‹
;

28 3177 
	m∆ök
;

29 3178 
uöt
 
	msize
;

30 3179 
uöt
 
	maddrs
[
NADDRS
];

33 182 #deföê
	#T_DIR
 1

34 183 #deföê
	#T_FILE
 2

35 184 #deföê
	#T_DEV
 3

36 3185

	)

38 187 #deföê
	#IPB
 (
BSIZE
 / (
döode
))

	)

41 190 #deföê
	#IBLOCK
(
i
Ë((iË/ 
IPB
 + 2)

	)

44 193 #deföê
	#BPB
 (
BSIZE
*8)

	)

47 196 #deföê
	#BBLOCK
(
b
, 
nöodes
Ë(b/
BPB
 + (nöodes)/
IPB
 + 3)

	)

50 199 #deföê
	#DIRSIZ
 14

	)

51 3200 
	sdúít
 {

52 3201 
ush‹t
 
	möum
;

53 3202 
	m«me
[
DIRSIZ
];

	@fmt/fsvar.h

3 3252 
	söode
 {

4 3253 
uöt
 
	mdev
;

5 3254 
uöt
 
	möum
;

6 3255 
	mªf
;

7 3256 
	mÊags
;

9 3258 
	mty≥
;

10 3259 
	mmaj‹
;

11 3260 
	mmö‹
;

12 3261 
	m∆ök
;

13 3262 
uöt
 
	msize
;

14 3263 
uöt
 
	maddrs
[
NADDRS
];

17 266 #deföê
	#I_BUSY
 0x1

	)

18 267 #deföê
	#I_VALID
 0x2

	)

	@fmt/ide.c

3 302 #ö˛udê
	~"ty≥s.h
"

4 303 #ö˛udê
	~"defs.h
"

5 304 #ö˛udê
	~"∑øm.h
"

6 305 #ö˛udê
	~"mmu.h
"

7 306 #ö˛udê
	~"¥oc.h
"

8 307 #ö˛udê
	~"x86.h
"

9 308 #ö˛udê
	~"å≠s.h
"

10 309 #ö˛udê
	~"•ölock.h
"

11 310 #ö˛udê
	~"buf.h
"

13 312 #deföê
	#IDE_BSY
 0x80

	)

14 313 #deföê
	#IDE_DRDY
 0x40

	)

15 314 #deföê
	#IDE_DF
 0x20

	)

16 315 #deföê
	#IDE_ERR
 0x01

	)

18 317 #deföê
	#IDE_CMD_READ
 0x20

	)

19 318 #deföê
	#IDE_CMD_WRITE
 0x30

	)

25 3324 
•ölock
 
	gide_lock
;

26 3325 
buf
 *
	gide_queue
;

28 3327 
	gdisk_1_¥e£¡
;

29 3328 
ide_°¨t_ªque°
();

33 3332 
ide_waô_ªady
(
check_îr‹
)

35 3334 
	gr
;

37 3336 ((
	gr
 = 
öb
(0x1f7)Ë& 
IDE_BSY
Ë|| !(
r
 & 
IDE_DRDY
))

39 3338 if(
	gcheck_îr‹
 && (
	gr
 & (
	gIDE_DF
|
	gIDE_ERR
)) != 0)

52 3351 
ide_öô
()

54 3353 
	gi
;

56 3355 
öôlock
(&
ide_lock
, "ide");

57 3356 
pic_íabÀ
(
IRQ_IDE
);

58 3357 
iﬂpic_íabÀ
(
IRQ_IDE
, 
n˝u
 - 1);

59 3358 
ide_waô_ªady
(0);

62 3361 
outb
(0x1f6, 0xe0 | (1<<4));

63 3362 
	gi
=0; i<1000; i++){

64 3363 if(
öb
(0x1f7) != 0){

65 3364 
disk_1_¥e£¡
 = 1;

71 3370 
outb
(0x1f6, 0xe0 | (0<<4));

76 3375 
ide_°¨t_ªque°
(
buf
 *
b
)

78 3377 if(
	gb
 == 0)

79 3378 
∑nic
("ide_start_request");

81 3380 
ide_waô_ªady
(0);

82 3381 
outb
(0x3f6, 0);

83 3382 
outb
(0x1f2, 1);

84 3383 
outb
(0x1f3, 
b
->
£˘‹
 & 0xff);

85 3384 
outb
(0x1f4, (
b
->
£˘‹
 >> 8) & 0xff);

86 3385 
outb
(0x1f5, (
b
->
£˘‹
 >> 16) & 0xff);

87 3386 
outb
(0x1f6, 0xe0 | ((
b
->
dev
&1)<<4Ë| ((b->
£˘‹
>>24)&0x0f));

88 3387 if(
	gb
->
	gÊags
 & 
	gB_DIRTY
){

89 3388 
outb
(0x1f7, 
IDE_CMD_WRITE
);

90 3389 
out¶
(0x1f0, 
b
->
d©a
, 512/4);

92 3391 
outb
(0x1f7, 
IDE_CMD_READ
);

103 3402 
ide_öå
()

105 3404 
buf
 *
	gb
;

107 3406 
acquúe
(&
ide_lock
);

108 3407 if((
	gb
 = 
ide_queue
) == 0){

109 3408 
ªÀa£
(&
ide_lock
);

114 3413 if(!(
	gb
->
	gÊags
 & 
	gB_DIRTY
Ë&& 
ide_waô_ªady
(1) >= 0)

115 3414 
ö¶
(0x1f0, 
b
->
d©a
, 512/4);

118 3417 
	gb
->
	gÊags
 |
B_VALID
;

119 3418 
	gb
->
	gÊags
 &~
B_DIRTY
;

120 3419 
wakeup
(
b
);

123 3422 if((
	gide_queue
 = 
b
->
q√xt
) != 0)

124 3423 
ide_°¨t_ªque°
(
ide_queue
);

126 3425 
ªÀa£
(&
ide_lock
);

133 3432 
ide_rw
(
buf
 *
b
)

135 3434 
buf
 **
	gµ
;

137 3436 if(!(
	gb
->
	gÊags
 & 
	gB_BUSY
))

138 3437 
∑nic
("ide_rw: bufÇot busy");

139 3438 if((
	gb
->
	gÊags
 & (
	gB_VALID
|
	gB_DIRTY
)Ë=
B_VALID
)

140 3439 
∑nic
("ide_rw:ÇothingÅo do");

141 3440 if(
	gb
->
	gdev
 !0 && !
disk_1_¥e£¡
)

142 3441 
∑nic
("ide disk 1ÇotÖresent");

144 3443 
acquúe
(&
ide_lock
);

147 3446 
	gb
->
	gq√xt
 = 0;

148 3447 
	gµ
=&
ide_queue
; *µ;Öp=&(*
µ
)->
q√xt
)

150 3449 *
	gµ
 = 
b
;

152 3451 if(
	gide_queue
 =
b
)

153 3452 
ide_°¨t_ªque°
(
b
);

157 3456 (
	gb
->
	gÊags
 & (
	gB_VALID
|
	gB_DIRTY
)Ë!
B_VALID
)

158 3457 
¶ìp
(
b
, &
ide_lock
);

160 3459 
ªÀa£
(&
ide_lock
);

	@fmt/init.c

3 652 #ö˛udê
	~"ty≥s.h
"

4 653 #ö˛udê
	~"°©.h
"

5 654 #ö˛udê
	~"u£r.h
"

6 655 #ö˛udê
	~"f˙é.h
"

8 6657 *
	gsh_¨gs
[] = { "sh", 0 };

11 6660 
maö
()

13 6662 
	gpid
, 
	gwpid
;

15 6664 if(
›í
("c⁄sﬁe", 
O_RDWR
) < 0){

16 6665 
mknod
("console", 1, 1);

17 6666 
›í
("c⁄sﬁe", 
O_RDWR
);

19 6668 
dup
(0);

20 6669 
dup
(0);

23 6672 
¥ötf
(1, "init: starting sh\n");

24 6673 
	gpid
 = 
f‹k
();

25 6674 if(
	gpid
 < 0){

26 6675 
¥ötf
(1, "init: fork failed\n");

27 6676 
exô
();

29 6678 if(
	gpid
 == 0){

30 6679 
exec
("sh", 
sh_¨gs
);

31 6680 
¥ötf
(1, "init:Éxec sh failed\n");

32 6681 
exô
();

34 6683 (
	gwpid
=
waô
()Ë>0 && 
wpid
 !
pid
)

35 6684 
¥ötf
(1, "zombie!\n");

	@fmt/initcode.S

1 6600 #Inôü»
¥o˚ss
 
	gexecs
 /
	göô
.

3 602 #ö˛udê
	~"sysˇŒ.h
"

4 603 #ö˛udê
	~"å≠s.h
"

6 6605 #exec(
	göô
, 
	g¨gv
)

7 6606 .
globl
 
	g°¨t


8 6607 
	g°¨t
:

9 6608 
pushl
 
$¨gv


10 6609 
pushl
 
$öô


11 6610 
pushl
 
$0


12 6611 
movl
 
$SYS_exec
, %
	góx


13 6612 
	g$T_SYSCALL


15 6614 #f‹(;;Ë
exô
();

16 6615 
	gexô
:

17 6616 
movl
 
$SYS_exô
, %
	góx


18 6617 
	g$T_SYSCALL


19 6618 
jmp
 
	gexô


21 6620 #ch¨ 
	göô
[] = "/init\0";

22 6621 
	göô
:

23 6622 .
°rög
 "/init\0"

25 6624 #ch¨ *
¨gv
[] = { 
öô
, 0 };

26 6625 .
	gp2Æign
 2

27 6626 
	g¨gv
:

28 6627 .
öô


	@fmt/ioapic.c

5 754 #ö˛udê
	~"ty≥s.h
"

6 755 #ö˛udê
	~"defs.h
"

7 756 #ö˛udê
	~"å≠s.h
"

9 758 #deföê
	#IOAPIC
 0xFEC00000

10 5759

	)

11 760 #deföê
	#REG_ID
 0x00

12 761 #deföê
	#REG_VER
 0x01

13 762 #deföê
	#REG_TABLE
 0x10

14 5763

	)

20 769 #deföê
	#INT_DISABLED
 0x00010000

21 770 #deföê
	#INT_LEVEL
 0x00008000

22 771 #deföê
	#INT_ACTIVELOW
 0x00002000

23 772 #deföê
	#INT_LOGICAL
 0x00000800

24 5773

	)

25 5774 vﬁ©ûê
iﬂpic
 *
	giﬂpic
;

28 5777 
	siﬂpic
 {

29 5778 
uöt
 
	mªg
;

30 5779 
uöt
 
	m∑d
[3];

31 5780 
uöt
 
	md©a
;

34 5783 
	guöt


35 5784 
iﬂpic_ªad
(
ªg
)

37 5786 
	giﬂpic
->
	gªg
 = 
ªg
;

38 5787  
	giﬂpic
->
	gd©a
;

42 5791 
iﬂpic_wrôe
(
ªg
, 
uöt
 
d©a
)

44 5793 
	giﬂpic
->
	gªg
 = 
ªg
;

45 5794 
	giﬂpic
->
	gd©a
 = 
d©a
;

52 5801 
iﬂpic_öô
()

54 5803 
	gi
, 
	gid
, 
	gmaxöå
;

56 5805 if(!
	gismp
)

59 5808 
	giﬂpic
 = (vﬁ©ûê
iﬂpic
*)
IOAPIC
;

60 5809 
	gmaxöå
 = (
iﬂpic_ªad
(
REG_VER
) >> 16) & 0xFF;

61 5810 
	gid
 = 
iﬂpic_ªad
(
REG_ID
) >> 24;

62 5811 if(
	gid
 !
iﬂpic_id
)

63 5812 
˝rötf
("ioapic_init: id isn'tÉqualÅo ioapic_id;Çotá MP\n");

67 5816 
	gi
 = 0; i <
maxöå
; i++){

68 5817 
iﬂpic_wrôe
(
REG_TABLE
+2*
i
, 
INT_DISABLED
 | (
IRQ_OFFSET
 + i));

69 5818 
iﬂpic_wrôe
(
REG_TABLE
+2*
i
+1, 0);

74 5823 
iﬂpic_íabÀ
(
úq
, 
˝unum
)

76 5825 if(!
	gismp
)

82 5831 
iﬂpic_wrôe
(
REG_TABLE
+2*
úq
, 
IRQ_OFFSET
 + irq);

83 5832 
iﬂpic_wrôe
(
REG_TABLE
+2*
úq
+1, 
˝unum
 << 24);

	@fmt/kalloc.c

8 207 #ö˛udê
	~"ty≥s.h
"

9 208 #ö˛udê
	~"defs.h
"

10 209 #ö˛udê
	~"∑øm.h
"

11 210 #ö˛udê
	~"•ölock.h
"

13 2212 
•ölock
 
	gkÆloc_lock
;

15 2214 
	srun
 {

16 2215 
run
 *
	m√xt
;

17 2216 
	mÀn
;

19 2218 
run
 *
	g‰ìli°
;

26 2225 
köô
()

28 2227 
íd
;

29 2228 
uöt
 
	gmem
;

30 2229 *
	g°¨t
;

32 2231 
öôlock
(&
kÆloc_lock
, "kalloc");

33 2232 
	g°¨t
 = (*Ë&
íd
;

34 2233 
	g°¨t
 = (*Ë(((
uöt
)
°¨t
 + 
PAGE
) & ~(PAGE-1));

35 2234 
	gmem
 = 256;

36 2235 
˝rötf
("mem = %d\n", 
mem
 * 
PAGE
);

37 2236 
k‰ì
(
°¨t
, 
mem
 * 
PAGE
);

56 2255 
k‰ì
(*
v
, 
Àn
)

58 2257 
run
 *
	gr
, *
	gªnd
, **
	gΩ
, *
	gp
, *
	g≥nd
;

60 2259 if(
	gÀn
 <0 || 
Àn
 % 
PAGE
)

61 2260 
∑nic
("kfree");

64 2263 
mem£t
(
v
, 1, 
Àn
);

66 2265 
acquúe
(&
kÆloc_lock
);

67 2266 
	gp
 = (
run
*)
v
;

68 2267 
	g≥nd
 = (
run
*)(
v
 + 
Àn
);

69 2268 
	gΩ
=&
‰ìli°
; (
	gr
=*
Ω
Ë!0 && 
r
 <
≥nd
;Ñp=&r->
√xt
){

70 2269 
ªnd
 = (
run
*)((*)
r
 +Ñ->
Àn
);

71 2270 if(
	gr
 <
p
 &&Ö < 
ªnd
)

72 2271 
∑nic
("freeing freeÖage");

73 2272 if(
	g≥nd
 =
r
){

74 2273 
p
->
Àn
 =Üí + 
r
->len;

75 2274 
	gp
->
	g√xt
 = 
r
->
√xt
;

76 2275 *
	gΩ
 = 
p
;

77 2276 
	gout
;

79 2278 if(
	gªnd
 =
p
){

80 2279 
r
->
Àn
 +=Üen;

81 2280 if(
	gr
->
	g√xt
 &&Ñ->√xà=
≥nd
){

82 2281 
r
->
Àn
 +r->
√xt
->len;

83 2282 
	gr
->
	g√xt
 = 
r
->
√xt
->next;

85 2284 
	gout
;

89 2288 
	gp
->
	gÀn
 = 
Àn
;

90 2289 
	gp
->
	g√xt
 = 
r
;

91 2290 *
	gΩ
 = 
p
;

93 2292 
	gout
:

94 2293 
ªÀa£
(&
kÆloc_lock
);

105 2304 
kÆloc
(
n
)

107 2306 *
	gp
;

108 2307 
run
 *
	gr
, **
	gΩ
;

110 2309 if(
	gn
 % 
	gPAGE
 ||Ç <= 0)

111 2310 
∑nic
("kalloc");

113 2312 
acquúe
(&
kÆloc_lock
);

114 2313 
	gΩ
=&
‰ìli°
; (
	gr
=*
Ω
Ë!0;Ñp=&
r
->
√xt
){

115 2314 if(
r
->
Àn
 =
n
){

116 2315 *
Ω
 = 
r
->
√xt
;

117 2316 
ªÀa£
(&
kÆloc_lock
);

118 2317  (*)
	gr
;

120 2319 if(
	gr
->
	gÀn
 > 
	gn
){

121 2320 
	gr
->
	gÀn
 -
n
;

122 2321 
	gp
 = (*)
r
 +Ñ->
Àn
;

123 2322 
ªÀa£
(&
kÆloc_lock
);

124 2323  
	gp
;

127 2326 
ªÀa£
(&
kÆloc_lock
);

129 2328 
˝rötf
("kalloc: out of memory\n");

	@fmt/kbd.c

1 100 #ö˛udê
	~"ty≥s.h
"

2 101 #ö˛udê
	~"x86.h
"

3 102 #ö˛udê
	~"defs.h
"

4 103 #ö˛udê
	~"kbd.h
"

7 6106 
kbd_gëc
()

9 6108 
uöt
 
	gshi·
;

10 6109 
uch¨
 *
	gch¨code
[4] = {

11 6110 
n‹mÆm≠
, 
shi·m≠
, 
˘lm≠
, ctlmap

13 6112 
uöt
 
	g°
, 
	gd©a
, 
	gc
;

15 6114 
	g°
 = 
öb
(
KBSTATP
);

16 6115 if((
	g°
 & 
	gKBS_DIB
) == 0)

18 6117 
	gd©a
 = 
öb
(
KBDATAP
);

20 6119 if(
	gd©a
 == 0xE0){

21 6120 
shi·
 |
E0ESC
;

23 6122 } if(
	gd©a
 & 0x80){

25 6124 
	gd©a
 = (
shi·
 & 
E0ESC
 ? 
d©a
 : data & 0x7F);

26 6125 
	gshi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

28 6127 } if(
	gshi·
 & 
	gE0ESC
){

30 6129 
	gd©a
 |= 0x80;

31 6130 
	gshi·
 &~
E0ESC
;

34 6133 
	gshi·
 |
shi·code
[
d©a
];

35 6134 
	gshi·
 ^
toggÀcode
[
d©a
];

36 6135 
	gc
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

37 6136 if(
	gshi·
 & 
	gCAPSLOCK
){

38 6137 if('a' <
c
 && c <= 'z')

39 6138 
c
 += 'A' - 'a';

40 6139 if('A' <
c
 && c <= 'Z')

41 6140 
c
 += 'a' - 'A';

43 6142  
	gc
;

47 6146 
kbd_öå
()

49 6148 
c⁄sﬁe_öå
(
kbd_gëc
);

	@fmt/kbd.h

3 952 #deföê
	#KBSTATP
 0x64

4 953 #deföê
	#KBS_DIB
 0x01

5 954 #deföê
	#KBDATAP
 0x60

6 5955

	)

7 956 #deföê
	#NO
 0

	)

9 958 #deföê
	#SHIFT
 (1<<0)

	)

10 959 #deföê
	#CTL
 (1<<1)

	)

11 960 #deföê
	#ALT
 (1<<2)

	)

13 962 #deföê
	#CAPSLOCK
 (1<<3)

	)

14 963 #deföê
	#NUMLOCK
 (1<<4)

	)

15 964 #deföê
	#SCROLLLOCK
 (1<<5)

	)

17 966 #deföê
	#E0ESC
 (1<<6)

	)

20 969 #deföê
	#KEY_HOME
 0xE0

	)

21 970 #deföê
	#KEY_END
 0xE1

	)

22 971 #deföê
	#KEY_UP
 0xE2

	)

23 972 #deföê
	#KEY_DN
 0xE3

	)

24 973 #deföê
	#KEY_LF
 0xE4

	)

25 974 #deföê
	#KEY_RT
 0xE5

	)

26 975 #deföê
	#KEY_PGUP
 0xE6

	)

27 976 #deföê
	#KEY_PGDN
 0xE7

	)

28 977 #deföê
	#KEY_INS
 0xE8

	)

29 978 #deföê
	#KEY_DEL
 0xE9

	)

32 981 #deföê
	#C
(
x
Ë(x - '@')

	)

34 5983 
uch¨
 
	gshi·code
[256] =

36 5985 [0x1D] 
CTL
,

37 5986 [0x2A] 
SHIFT
,

38 5987 [0x36] 
SHIFT
,

39 5988 [0x38] 
ALT
,

40 5989 [0x9D] 
CTL
,

41 5990 [0xB8] 
ALT


44 5993 
uch¨
 
	gtoggÀcode
[256] =

46 5995 [0x3A] 
CAPSLOCK
,

47 5996 [0x45] 
NUMLOCK
,

48 5997 [0x46] 
SCROLLLOCK


51 6000 
uch¨
 
	gn‹mÆm≠
[256] =

53 6002 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

56 6005 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

58 6007 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

59 6008 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

60 6009 
NO
, ' ', NO, NO, NO, NO, NO, NO,

61 6010 
NO
, NO, NO, NO, NO, NO, NO, '7',

63 6012 '2', '3', '0', '.', 
NO
, NO, NO, NO,

66 6015 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

67 6016 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

68 6017 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

69 6018 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

70 6019 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


73 6022 
uch¨
 
	gshi·m≠
[256] =

75 6024 
NO
, 033, '!', '@', '#', '$', '%', '^',

78 6027 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

80 6029 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

81 6030 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

82 6031 
NO
, ' ', NO, NO, NO, NO, NO, NO,

83 6032 
NO
, NO, NO, NO, NO, NO, NO, '7',

85 6034 '2', '3', '0', '.', 
NO
, NO, NO, NO,

88 6037 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

89 6038 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

90 6039 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

91 6040 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

92 6041 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


101 6050 
uch¨
 
	g˘lm≠
[256] =

103 6052 
NO
, NO, NO, NO, NO, NO, NO, NO,

104 6053 
NO
, NO, NO, NO, NO, NO, NO, NO,

105 6054 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

106 6055 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

107 6056 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

108 6057 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

109 6058 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

111 6060 [0xB5] 
C
('/'),

112 6061 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

113 6062 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

114 6063 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

115 6064 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

116 6065 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


	@fmt/lapic.c

4 553 #ö˛udê
	~"ty≥s.h
"

5 554 #ö˛udê
	~"defs.h
"

6 555 #ö˛udê
	~"å≠s.h
"

7 556 #ö˛udê
	~"mmu.h
"

8 557 #ö˛udê
	~"x86.h
"

11 560 #deföê
	#ID
 (0x0020/4)

12 561 #deföê
	#VER
 (0x0030/4)

13 562 #deföê
	#TPR
 (0x0080/4)

14 563 #deföê
	#EOI
 (0x00B0/4)

15 564 #deföê
	#SVR
 (0x00F0/4)

16 565 #deföê
	#ENABLE
 0x00000100

17 566 #deföê
	#ESR
 (0x0280/4)

18 567 #deföê
	#ICRLO
 (0x0300/4)

19 568 #deföê
	#INIT
 0x00000500

20 569 #deföê
	#STARTUP
 0x00000600

21 570 #deföê
	#DELIVS
 0x00001000

22 571 #deföê
	#ASSERT
 0x00004000

23 572 #deföê
	#LEVEL
 0x00008000

24 573 #deföê
	#BCAST
 0x00080000

25 574 #deföê
	#ICRHI
 (0x0310/4)

26 575 #deföê
	#TIMER
 (0x0320/4)

27 576 #deföê
	#X1
 0x0000000B

28 577 #deföê
	#PERIODIC
 0x00020000

29 578 #deföê
	#PCINT
 (0x0340/4)

30 579 #deföê
	#LINT0
 (0x0350/4)

31 580 #deföê
	#LINT1
 (0x0360/4)

32 581 #deföê
	#ERROR
 (0x0370/4)

33 582 #deföê
	#MASKED
 0x00010000

34 583 #deföê
	#TICR
 (0x0380/4)

35 584 #deföê
	#TCCR
 (0x0390/4)

36 585 #deföê
	#TDCR
 (0x03E0/4)

37 5586

	)

38 5587 vﬁ©ûê
uöt
 *
	gœpic
;

41 5590 
œpicw
(
ödex
, 
vÆue
)

43 5592 
	gœpic
[
ödex
] = 
vÆue
;

44 5593 
	gœpic
[
ID
];

52 5601 
œpic_öô
(
c
)

54 5603 if(!
	gœpic
)

58 5607 
œpicw
(
SVR
, 
ENABLE
 | (
IRQ_OFFSET
+
IRQ_SPURIOUS
));

64 5613 
œpicw
(
TDCR
, 
X1
);

65 5614 
œpicw
(
TIMER
, 
PERIODIC
 | (
IRQ_OFFSET
 + 
IRQ_TIMER
));

66 5615 
œpicw
(
TICR
, 10000000);

69 5618 
œpicw
(
LINT0
, 
MASKED
);

70 5619 
œpicw
(
LINT1
, 
MASKED
);

74 5623 if(((
	gœpic
[
VER
]>>16) & 0xFF) >= 4)

75 5624 
œpicw
(
PCINT
, 
MASKED
);

78 5627 
œpicw
(
ERROR
, 
IRQ_OFFSET
+
IRQ_ERROR
);

81 5630 
œpicw
(
ESR
, 0);

82 5631 
œpicw
(
ESR
, 0);

85 5634 
œpicw
(
EOI
, 0);

88 5637 
œpicw
(
ICRHI
, 0);

89 5638 
œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

90 5639 
	gœpic
[
ICRLO
] & 
	gDELIVS
)

94 5643 
œpicw
(
TPR
, 0);

102 5651 
˝u
()

109 5658 if(
ªad_eÊags
()&
	gFL_IF
){

110 5659 
	gn
;

111 5660 if(
	gn
++ == 0)

112 5661 
˝rötf
("cpu called from %x with interruptsÉnabled\n",

113 5662 ((
uöt
*)
ªad_ebp
())[1]);

116 5665 if(
	gœpic
)

117 5666  
	gœpic
[
ID
]>>24;

123 5672 
œpic_eoi
()

125 5674 if(
	gœpic
)

126 5675 
œpicw
(
EOI
, 0);

132 5681 
mi¸odñay
(
us
)

134 5683 vﬁ©ûê
	gj
 = 0;

136 5685 
	gus
-- > 0)

137 5686 
	gj
=0; j<10000; j++);

151 700 #deföê
	#IO_RTC
 0x70

	)

156 5705 
œpic_°¨èp
(
uch¨
 
≠icid
, 
uöt
 
addr
)

158 5707 
	gi
;

159 5708 
ush‹t
 *
	gwrv
;

164 5713 
outb
(
IO_RTC
, 0xF);

165 5714 
outb
(
IO_RTC
+1, 0x0A);

166 5715 
	gwrv
 = (
ush‹t
*)(0x40<<4 | 0x67);

167 5716 
	gwrv
[0] = 0;

168 5717 
	gwrv
[1] = 
addr
 >> 4;

172 5721 
œpicw
(
ICRHI
, 
≠icid
<<24);

173 5722 
œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

174 5723 
mi¸odñay
(200);

175 5724 
œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

176 5725 
mi¸odñay
(100);

183 5732 
	gi
 = 0; i < 2; i++){

184 5733 
œpicw
(
ICRHI
, 
≠icid
<<24);

185 5734 
œpicw
(
ICRLO
, 
STARTUP
 | (
addr
>>12));

186 5735 
mi¸odñay
(200);

	@fmt/main.c

1 200 #ö˛udê
	~"ty≥s.h
"

2 201 #ö˛udê
	~"defs.h
"

3 202 #ö˛udê
	~"∑øm.h
"

4 203 #ö˛udê
	~"mmu.h
"

5 204 #ö˛udê
	~"¥oc.h
"

6 205 #ö˛udê
	~"x86.h
"

8 1207 
boŸŸhîs
();

9 1208 
	$mpmaö
(Ë
	`__©åibuã__
((
n‹ëu∫
));

13 1212 
	`maö
()

15 1214 
ed©a
[], 
íd
[];

18 1217 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

20 1219 
	`mp_öô
();

21 1220 
	`œpic_öô
(
	`mp_b˝u
());

22 1221 
	`˝rötf
("\n˝u%d: sèπög xv6\n\n", 
	`˝u
());

24 1223 
	`pöô
();

25 1224 
	`böô
();

26 1225 
	`pic_öô
();

27 1226 
	`iﬂpic_öô
();

28 1227 
	`köô
();

29 1228 
	`tvöô
();

30 1229 
	`fûeöô
();

31 1230 
	`iöô
();

32 1231 
	`c⁄sﬁe_öô
();

33 1232 
	`ide_öô
();

34 1233 if(!
ismp
)

35 1234 
	`timî_öô
();

36 1235 
	`u£röô
();

37 1236 
	`boŸŸhîs
();

40 1239 
	`mpmaö
();

41 1240 
	}
}

54 1253 
mpmaö
()

56 1255 
˝rötf
("˝u%d: mpmaö\n", 
˝u
());

57 1256 
idtöô
();

58 1257 if(
˝u
(Ë!
mp_b˝u
())

59 1258 
œpic_öô
(
˝u
());

60 1259 
£tup£gs
(0);

61 1260 
xchg
(&
˝us
[
˝u
()].
boŸed
, 1);

63 1262 
˝rötf
("cpu%d: scheduling\n");

64 1263 
scheduÀr
();

68 1267 
boŸŸhîs
()

70 1269 
uch¨
 
_bö¨y_boŸŸhî_°¨t
[], 
_bö¨y_boŸŸhî_size
[];

71 1270 
uch¨
 *
	gcode
;

72 1271 
˝u
 *
	gc
;

73 1272 *
	g°ack
;

76 1275 
	gcode
 = (
uch¨
*)0x7000;

77 1276 
memmove
(
code
, 
_bö¨y_boŸŸhî_°¨t
, (
uöt
)
_bö¨y_boŸŸhî_size
);

79 1278 
	gc
 = 
˝us
; c < 
	g˝us
+
	gn˝u
; c++){

80 1279 if(
	gc
 =
˝us
+
˝u
())

84 1283 
	g°ack
 = 
kÆloc
(
KSTACKSIZE
);

85 1284 *(**)(
	gcode
-4Ë
°ack
 + 
KSTACKSIZE
;

86 1285 *(**)(
	gcode
-8Ë
mpmaö
;

87 1286 
œpic_°¨èp
(
c
->
≠icid
, (
uöt
)
code
);

90 1289 
	gc
->
	gboŸed
 == 0)

	@fmt/mmu.h

5 604 #deföê
	#FL_CF
 0x00000001

6 605 #deföê
	#FL_PF
 0x00000004

7 606 #deföê
	#FL_AF
 0x00000010

8 607 #deföê
	#FL_ZF
 0x00000040

9 608 #deföê
	#FL_SF
 0x00000080

10 609 #deföê
	#FL_TF
 0x00000100

11 610 #deföê
	#FL_IF
 0x00000200

12 611 #deföê
	#FL_DF
 0x00000400

13 612 #deföê
	#FL_OF
 0x00000800

14 613 #deföê
	#FL_IOPL_MASK
 0x00003000

15 614 #deföê
	#FL_IOPL_0
 0x00000000

16 615 #deföê
	#FL_IOPL_1
 0x00001000

17 616 #deföê
	#FL_IOPL_2
 0x00002000

18 617 #deföê
	#FL_IOPL_3
 0x00003000

19 618 #deföê
	#FL_NT
 0x00004000

20 619 #deföê
	#FL_RF
 0x00010000

21 620 #deföê
	#FL_VM
 0x00020000

22 621 #deföê
	#FL_AC
 0x00040000

23 622 #deföê
	#FL_VIF
 0x00080000

24 623 #deföê
	#FL_VIP
 0x00100000

25 624 #deföê
	#FL_ID
 0x00200000

26 0625

	)

28 0627 
	s£gdesc
 {

29 0628 
uöt
 
	mlim_15_0
 : 16;

30 0629 
uöt
 
	mba£_15_0
 : 16;

31 0630 
uöt
 
	mba£_23_16
 : 8;

32 0631 
uöt
 
	mty≥
 : 4;

33 0632 
uöt
 
	ms
 : 1;

34 0633 
uöt
 
	md∂
 : 2;

35 0634 
uöt
 
	mp
 : 1;

36 0635 
uöt
 
	mlim_19_16
 : 4;

37 0636 
uöt
 
	mavl
 : 1;

38 0637 
uöt
 
	mrsv1
 : 1;

39 0638 
uöt
 
	mdb
 : 1;

40 0639 
uöt
 
	mg
 : 1;

41 0640 
uöt
 
	mba£_31_24
 : 8;

52 651 #deföê
	#SEG_NULL
 (
£gdesc
){ 0,0,0,0,0,0,0,0,0,0,0,0,0 }

	)

55 654 #deföê
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

56 0655 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

57 0656 
ty≥
, 1, 
d∂
, 1, (
uöt
Ë(
lim
) >> 28, 0, 0, 1, 1, \

58 0657 (
uöt
Ë(
ba£
Ë>> 24 }

	)

60 659 #deföê
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

61 0660 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

62 0661 
ty≥
, 1, 
d∂
, 1, (
uöt
Ë(
lim
) >> 16, 0, 0, 1, 0, \

63 0662 (
uöt
Ë(
ba£
Ë>> 24 }

	)

65 664 #deföê
	#DPL_USER
 0x3

66 0665

	)

68 667 #deföê
	#STA_X
 0x8

69 668 #deföê
	#STA_E
 0x4

70 669 #deföê
	#STA_C
 0x4

71 670 #deföê
	#STA_W
 0x2

72 671 #deföê
	#STA_R
 0x2

73 672 #deföê
	#STA_A
 0x1

74 0673

	)

76 675 #deföê
	#STS_T16A
 0x1

77 676 #deföê
	#STS_LDT
 0x2

78 677 #deföê
	#STS_T16B
 0x3

79 678 #deföê
	#STS_CG16
 0x4

80 679 #deföê
	#STS_TG
 0x5

81 680 #deföê
	#STS_IG16
 0x6

82 681 #deföê
	#STS_TG16
 0x7

83 682 #deföê
	#STS_T32A
 0x9

84 683 #deföê
	#STS_T32B
 0xB

85 684 #deföê
	#STS_CG32
 0xC

86 685 #deföê
	#STS_IG32
 0xE

87 686 #deföê
	#STS_TG32
 0xF

88 0687

	)

90 0689 
	sèsk°©e
 {

91 0690 
uöt
 
	mlök
;

92 0691 
uöt
 
	me•0
;

93 0692 
ush‹t
 
	mss0
;

94 0693 
ush‹t
 
	m∑ddög1
;

95 0694 
uöt
 *
	me•1
;

96 0695 
ush‹t
 
	mss1
;

97 0696 
ush‹t
 
	m∑ddög2
;

98 0697 
uöt
 *
	me•2
;

99 0698 
ush‹t
 
	mss2
;

100 0699 
ush‹t
 
	m∑ddög3
;

101 0700 *
	m¸3
;

102 0701 
uöt
 *
	meù
;

103 0702 
uöt
 
	meÊags
;

104 0703 
uöt
 
	móx
;

105 0704 
uöt
 
	mecx
;

106 0705 
uöt
 
	medx
;

107 0706 
uöt
 
	mebx
;

108 0707 
uöt
 *
	me•
;

109 0708 
uöt
 *
	mebp
;

110 0709 
uöt
 
	mesi
;

111 0710 
uöt
 
	medi
;

112 0711 
ush‹t
 
	mes
;

113 0712 
ush‹t
 
	m∑ddög4
;

114 0713 
ush‹t
 
	mcs
;

115 0714 
ush‹t
 
	m∑ddög5
;

116 0715 
ush‹t
 
	mss
;

117 0716 
ush‹t
 
	m∑ddög6
;

118 0717 
ush‹t
 
	mds
;

119 0718 
ush‹t
 
	m∑ddög7
;

120 0719 
ush‹t
 
	mfs
;

121 0720 
ush‹t
 
	m∑ddög8
;

122 0721 
ush‹t
 
	mgs
;

123 0722 
ush‹t
 
	m∑ddög9
;

124 0723 
ush‹t
 
	mldt
;

125 0724 
ush‹t
 
	m∑ddög10
;

126 0725 
ush‹t
 
	mt
;

127 0726 
ush‹t
 
	miomb
;

131 0730 
	sg©edesc
 {

132 0731 
uöt
 
	moff_15_0
 : 16;

133 0732 
uöt
 
	mcs
 : 16;

134 0733 
uöt
 
	m¨gs
 : 5;

135 0734 
uöt
 
	mrsv1
 : 3;

136 0735 
uöt
 
	mty≥
 : 4;

137 0736 
uöt
 
	ms
 : 1;

138 0737 
uöt
 
	md∂
 : 2;

139 0738 
uöt
 
	mp
 : 1;

140 0739 
uöt
 
	moff_31_16
 : 16;

159 758 #deföê
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d
) \

161 0760 (
g©e
).
off_15_0
 = (
uöt
Ë(
off
) & 0xffff; \

162 0761 (
g©e
).
cs
 = (
£l
); \

163 0762 (
g©e
).
¨gs
 = 0; \

164 0763 (
g©e
).
rsv1
 = 0; \

165 0764 (
g©e
).
ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

166 0765 (
g©e
).
s
 = 0; \

167 0766 (
g©e
).
d∂
 = (
d
); \

168 0767 (
g©e
).
p
 = 1; \

169 0768 (
g©e
).
off_31_16
 = (
uöt
Ë(
off
) >> 16; \

170 0769 }

	)

	@fmt/mp.c

5 404 #ö˛udê
	~"ty≥s.h
"

6 405 #ö˛udê
	~"defs.h
"

7 406 #ö˛udê
	~"∑øm.h
"

8 407 #ö˛udê
	~"mp.h
"

9 408 #ö˛udê
	~"x86.h
"

10 409 #ö˛udê
	~"mmu.h
"

11 410 #ö˛udê
	~"¥oc.h
"

13 5412 
˝u
 
	g˝us
[
NCPU
];

14 5413 
˝u
 *
	gb˝u
;

15 5414 
	gismp
;

16 5415 
	gn˝u
;

17 5416 
uch¨
 
	giﬂpic_id
;

20 5419 
mp_b˝u
()

22 5421  
	gb˝u
-
	g˝us
;

25 5424 
	guch¨


26 5425 
sum
(
uch¨
 *
addr
, 
Àn
)

28 5427 
	gi
, 
	gsum
;

30 5429 
	gsum
 = 0;

31 5430 
	gi
=0; i<
	gÀn
; i++)

32 5431 
	gsum
 +
addr
[
i
];

33 5432  
	gsum
;

37 5436 
	gmp
*

38 5437 
mp_£¨ch1
(
uch¨
 *
addr
, 
Àn
)

40 5439 
uch¨
 *
	ge
, *
	gp
;

42 5441 
	ge
 = 
addr
+
Àn
;

43 5442 
	gp
 = 
addr
;Ö < 
	ge
;Ö +(
mp
))

44 5443 if(
memcmp
(
p
, "_MP_", 4Ë=0 && 
sum
’, (
mp
)) == 0)

45 5444  (
mp
*)
p
;

56 5455 
	gmp
*

57 5456 
mp_£¨ch
()

59 5458 
uch¨
 *
	gbda
;

60 5459 
uöt
 
	gp
;

61 5460 
mp
 *
	gmp
;

63 5462 
	gbda
 = (
uch¨
*)0x400;

64 5463 if((
	gp
 = ((
bda
[0x0F]<<8)|bda[0x0E]) << 4)){

65 5464 if((
mp
 = 
mp_£¨ch1
((
uch¨
*)
p
, 1024)))

66 5465  
	gmp
;

68 5467 
	gp
 = ((
bda
[0x14]<<8)|bda[0x13])*1024;

69 5468 if((
	gmp
 = 
mp_£¨ch1
((
uch¨
*)
p
-1024, 1024)))

70 5469  
	gmp
;

72 5471  
mp_£¨ch1
((
uch¨
*)0xF0000, 0x10000);

80 5479 
	gmpc⁄f
*

81 5480 
mp_c⁄fig
(
mp
 **
pmp
)

83 5482 
mpc⁄f
 *
	gc⁄f
;

84 5483 
mp
 *
	gmp
;

86 5485 if((
	gmp
 = 
mp_£¨ch
()Ë=0 || 
mp
->
phyßddr
 == 0)

88 5487 
	gc⁄f
 = (
mpc⁄f
*)
mp
->
phyßddr
;

89 5488 if(
memcmp
(
c⁄f
, "PCMP", 4) != 0)

91 5490 if(
	gc⁄f
->
	gvîsi⁄
 !1 && 
c⁄f
->
vîsi⁄
 != 4)

93 5492 if(
sum
((
uch¨
*)
c⁄f
, c⁄f->
Àngth
) != 0)

95 5494 *
	gpmp
 = 
mp
;

96 5495  
	gc⁄f
;

102 5501 
mp_öô
()

104 5503 
uch¨
 *
	gp
, *
	ge
;

105 5504 
mp
 *
	gmp
;

106 5505 
mpc⁄f
 *
	gc⁄f
;

107 5506 
mµroc
 *
	g¥oc
;

108 5507 
mpiﬂpic
 *
	giﬂpic
;

110 5509 
	gb˝u
 = &
˝us
[
n˝u
];

111 5510 if((
	gc⁄f
 = 
mp_c⁄fig
(&
mp
)) == 0)

114 5513 
	gismp
 = 1;

115 5514 
	gœpic
 = (
uöt
*)
c⁄f
->
œpiˇddr
;

117 5516 
	gp
=(
uch¨
*)(
c⁄f
+1), 
	ge
=(uch¨*)c⁄f+c⁄f->
Àngth
;Ö<e; ){

118 5517 *
	gp
){

119 5518 
	gMPPROC
:

120 5519 
¥oc
 = (
mµroc
*)
p
;

121 5520 
	g˝us
[
n˝u
].
	g≠icid
 = 
¥oc
->
≠icid
;

122 5521 if(
	g¥oc
->
	gÊags
 & 
	gMPBOOT
)

123 5522 
	gb˝u
 = &
˝us
[
n˝u
];

124 5523 
	gn˝u
++;

125 5524 
	gp
 +(
mµroc
);

127 5526 
	gMPIOAPIC
:

128 5527 
iﬂpic
 = (
mpiﬂpic
*)
p
;

129 5528 
	giﬂpic_id
 = 
iﬂpic
->
≠i˙o
;

130 5529 
	gp
 +(
mpiﬂpic
);

132 5531 
	gMPBUS
:

133 5532 
MPIOINTR
:

134 5533 
MPLINTR
:

135 5534 
p
 += 8;

138 5537 
˝rötf
("mp_öô: unknow¿c⁄figÅy≥ %x\n", *
p
);

139 5538 
∑nic
("mp_init");

143 5542 if(
	gmp
->
	gim¸p
){

146 5545 
outb
(0x22, 0x70);

147 5546 
outb
(0x23, 
öb
(0x23) | 1);

	@fmt/mp.h

3 5302 
	smp
 {

4 5303 
uch¨
 
	msig«tuª
[4];

5 5304 *
	mphyßddr
;

6 5305 
uch¨
 
	mÀngth
;

7 5306 
uch¨
 
	m•e¸ev
;

8 5307 
uch¨
 
	mchecksum
;

9 5308 
uch¨
 
	mty≥
;

10 5309 
uch¨
 
	mim¸p
;

11 5310 
uch¨
 
	mª£rved
[3];

14 5313 
	smpc⁄f
 {

15 5314 
uch¨
 
	msig«tuª
[4];

16 5315 
ush‹t
 
	mÀngth
;

17 5316 
uch¨
 
	mvîsi⁄
;

18 5317 
uch¨
 
	mchecksum
;

19 5318 
uch¨
 
	m¥odu˘
[20];

20 5319 
uöt
 *
	m€mèbÀ
;

21 5320 
ush‹t
 
	m€mÀngth
;

22 5321 
ush‹t
 
	míåy
;

23 5322 
uöt
 *
	mœpiˇddr
;

24 5323 
ush‹t
 
	mxÀngth
;

25 5324 
uch¨
 
	mxchecksum
;

26 5325 
uch¨
 
	mª£rved
;

29 5328 
	smµroc
 {

30 5329 
uch¨
 
	mty≥
;

31 5330 
uch¨
 
	m≠icid
;

32 5331 
uch¨
 
	mvîsi⁄
;

33 5332 
uch¨
 
	mÊags
;

34 333 #deföê
	#MPBOOT
 0x02

35 5334 
uch¨
 
sig«tuª
[4];

36 5335 
uöt
 
„©uª
;

37 5336 
uch¨
 
ª£rved
[8];

	)

40 5339 
	smpiﬂpic
 {

41 5340 
uch¨
 
	mty≥
;

42 5341 
uch¨
 
	m≠i˙o
;

43 5342 
uch¨
 
	mvîsi⁄
;

44 5343 
uch¨
 
	mÊags
;

45 5344 
uöt
 *
	maddr
;

52 351 #deföê
	#MPPROC
 0x00

53 352 #deföê
	#MPBUS
 0x01

54 353 #deföê
	#MPIOAPIC
 0x02

55 354 #deföê
	#MPIOINTR
 0x03

56 355 #deföê
	#MPLINTR
 0x04

57 5356

	)

	@fmt/param.h

1 150 #deföê
	#NPROC
 64

2 151 #deföê
	#PAGE
 4096

3 152 #deföê
	#KSTACKSIZE
 
PAGE


4 153 #deföê
	#NCPU
 8

5 154 #deföê
	#NOFILE
 16

6 155 #deföê
	#NFILE
 100

7 156 #deföê
	#NBUF
 10

8 157 #deföê
	#NINODE
 50

9 158 #deföê
	#NDEV
 10

10 159 #deföê
	#ROOTDEV
 1

11 0160

	)

	@fmt/picirq.c

3 852 #ö˛udê
	~"ty≥s.h
"

4 853 #ö˛udê
	~"x86.h
"

5 854 #ö˛udê
	~"å≠s.h
"

8 857 #deföê
	#IO_PIC1
 0x20

9 858 #deföê
	#IO_PIC2
 0xA0

10 5859

	)

11 860 #deföê
	#IRQ_SLAVE
 2

12 5861

	)

15 5864 
ush‹t
 
	gúqmask
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

18 5867 
pic_£tmask
(
ush‹t
 
mask
)

20 5869 
	gúqmask
 = 
mask
;

21 5870 
outb
(
IO_PIC1
+1, 
mask
);

22 5871 
outb
(
IO_PIC2
+1, 
mask
 >> 8);

26 5875 
pic_íabÀ
(
úq
)

28 5877 
pic_£tmask
(
úqmask
 & ~(1<<
úq
));

33 5882 
pic_öô
()

36 5885 
outb
(
IO_PIC1
+1, 0xFF);

37 5886 
outb
(
IO_PIC2
+1, 0xFF);

45 5894 
outb
(
IO_PIC1
, 0x11);

48 5897 
outb
(
IO_PIC1
+1, 
IRQ_OFFSET
);

53 5902 
outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

63 5912 
outb
(
IO_PIC1
+1, 0x3);

66 5915 
outb
(
IO_PIC2
, 0x11);

67 5916 
outb
(
IO_PIC2
+1, 
IRQ_OFFSET
 + 8);

68 5917 
outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

71 5920 
outb
(
IO_PIC2
+1, 0x3);

77 5926 
outb
(
IO_PIC1
, 0x68);

78 5927 
outb
(
IO_PIC1
, 0x0a);

80 5929 
outb
(
IO_PIC2
, 0x68);

81 5930 
outb
(
IO_PIC2
, 0x0a);

83 5932 if(
	gúqmask
 != 0xFFFF)

84 5933 
pic_£tmask
(
úqmask
);

	@fmt/pipe.c

1 050 #ö˛udê
	~"ty≥s.h
"

2 051 #ö˛udê
	~"defs.h
"

3 052 #ö˛udê
	~"∑øm.h
"

4 053 #ö˛udê
	~"mmu.h
"

5 054 #ö˛udê
	~"¥oc.h
"

6 055 #ö˛udê
	~"fûe.h
"

7 056 #ö˛udê
	~"•ölock.h
"

9 058 #deföê
	#PIPESIZE
 512

	)

11 5060 
	spùe
 {

12 5061 
	mªad›í
;

13 5062 
	mwrôe›í
;

14 5063 
	mwrôï
;

15 5064 
	mªadp
;

16 5065 
•ölock
 
	mlock
;

17 5066 
	md©a
[
PIPESIZE
];

21 5070 
pùóŒoc
(
fûe
 **
f0
, fûê**
f1
)

23 5072 
pùe
 *
	gp
;

25 5074 
	gp
 = 0;

26 5075 *
	gf0
 = *
f1
 = 0;

27 5076 if((*
	gf0
 = 
fûóŒoc
()Ë=0 || (*
f1
 = filealloc()) == 0)

28 5077 
bad
;

29 5078 if((
	gp
 = (
pùe
*)
kÆloc
(
PAGE
)) == 0)

30 5079 
bad
;

31 5080 
	gp
->
	gªad›í
 = 1;

32 5081 
	gp
->
	gwrôe›í
 = 1;

33 5082 
	gp
->
	gwrôï
 = 0;

34 5083 
	gp
->
	gªadp
 = 0;

35 5084 
öôlock
(&
p
->
lock
, "pipe");

36 5085 (*
	gf0
)->
	gty≥
 = 
FD_PIPE
;

37 5086 (*
	gf0
)->
	gªadabÀ
 = 1;

38 5087 (*
	gf0
)->
	gwrôabÀ
 = 0;

39 5088 (*
	gf0
)->
	gpùe
 = 
p
;

40 5089 (*
	gf1
)->
	gty≥
 = 
FD_PIPE
;

41 5090 (*
	gf1
)->
	gªadabÀ
 = 0;

42 5091 (*
	gf1
)->
	gwrôabÀ
 = 1;

43 5092 (*
	gf1
)->
	gpùe
 = 
p
;

46 5095 
	gbad
:

47 5096 if(
p
)

48 5097 
k‰ì
((*)
p
, 
PAGE
);

49 5098 if(*
	gf0
){

50 5099 (*
	gf0
)->
	gty≥
 = 
FD_NONE
;

51 5100 
fûe˛o£
(*
f0
);

53 5102 if(*
	gf1
){

54 5103 (*
	gf1
)->
	gty≥
 = 
FD_NONE
;

55 5104 
fûe˛o£
(*
f1
);

61 5110 
pùe˛o£
(
pùe
 *
p
, 
wrôabÀ
)

63 5112 
acquúe
(&
p
->
lock
);

64 5113 if(
	gwrôabÀ
){

65 5114 
	gp
->
	gwrôe›í
 = 0;

66 5115 
wakeup
(&
p
->
ªadp
);

68 5117 
	gp
->
	gªad›í
 = 0;

69 5118 
wakeup
(&
p
->
wrôï
);

71 5120 
ªÀa£
(&
p
->
lock
);

73 5122 if(
	gp
->
	gªad›í
 =0 && 
p
->
wrôe›í
 == 0)

74 5123 
k‰ì
((*)
p
, 
PAGE
);

78 5127 
pùewrôe
(
pùe
 *
p
, *
addr
, 
n
)

80 5129 
	gi
;

82 5131 
acquúe
(&
p
->
lock
);

83 5132 
	gi
 = 0; i < 
	gn
; i++){

84 5133 ((
	gp
->
	gwrôï
 + 1Ë% 
	gPIPESIZE
Ë=
p
->
ªadp
){

85 5134 if(
p
->
ªad›í
 =0 || 
˝
->
kûÀd
){

86 5135 
ªÀa£
(&
p
->
lock
);

89 5138 
wakeup
(&
p
->
ªadp
);

90 5139 
¶ìp
(&
p
->
wrôï
, &p->
lock
);

92 5141 
	gp
->
	gd©a
[
p
->
wrôï
] = 
addr
[
i
];

93 5142 
	gp
->
	gwrôï
 = (
p
->
wrôï
 + 1Ë% 
PIPESIZE
;

95 5144 
wakeup
(&
p
->
ªadp
);

96 5145 
ªÀa£
(&
p
->
lock
);

97 5146  
	gi
;

102 5151 
pùîód
(
pùe
 *
p
, *
addr
, 
n
)

104 5153 
	gi
;

106 5155 
acquúe
(&
p
->
lock
);

107 5156 
	gp
->
	gªadp
 =
p
->
wrôï
 &&Ö->
wrôe›í
){

108 5157 if(
˝
->
kûÀd
){

109 5158 
ªÀa£
(&
p
->
lock
);

112 5161 
¶ìp
(&
p
->
ªadp
, &p->
lock
);

114 5163 
	gi
 = 0; i < 
	gn
; i++){

115 5164 if(
	gp
->
	gªadp
 =
p
->
wrôï
)

117 5166 
	gaddr
[
i
] = 
p
->
d©a
[p->
ªadp
];

118 5167 
	gp
->
	gªadp
 = (
p
->
ªadp
 + 1Ë% 
PIPESIZE
;

120 5169 
wakeup
(&
p
->
wrôï
);

121 5170 
ªÀa£
(&
p
->
lock
);

122 5171  
	gi
;

	@fmt/proc.c

1 600 #ö˛udê
	~"ty≥s.h
"

2 601 #ö˛udê
	~"defs.h
"

3 602 #ö˛udê
	~"∑øm.h
"

4 603 #ö˛udê
	~"mmu.h
"

5 604 #ö˛udê
	~"x86.h
"

6 605 #ö˛udê
	~"¥oc.h
"

7 606 #ö˛udê
	~"•ölock.h
"

9 1608 
•ölock
 
	g¥oc_èbÀ_lock
;

11 1610 
¥oc
 
	g¥oc
[
NPROC
];

12 1611 
¥oc
 *
	göô¥oc
;

14 1613 
	g√xçid
 = 1;

15 1614 
f‹kªt
();

16 1615 
f‹kªt1
(
å≠‰ame
*);

19 1618 
pöô
()

21 1620 
öôlock
(&
¥oc_èbÀ_lock
, "proc_table");

27 1626 
	g¥oc
*

28 1627 
Ælo˝roc
()

30 1629 
	gi
;

31 1630 
¥oc
 *
	gp
;

33 1632 
acquúe
(&
¥oc_èbÀ_lock
);

34 1633 
	gi
 = 0; i < 
	gNPROC
; i++){

35 1634 
	gp
 = &
¥oc
[
i
];

36 1635 if(
	gp
->
	g°©e
 =
UNUSED
){

37 1636 
p
->
°©e
 = 
EMBRYO
;

38 1637 
	gp
->
	gpid
 = 
√xçid
++;

39 1638 
ªÀa£
(&
¥oc_èbÀ_lock
);

40 1639  
	gp
;

43 1642 
ªÀa£
(&
¥oc_èbÀ_lock
);

54 1653 
grow¥oc
(
n
)

56 1655 *
	g√wmem
, *
	gﬁdmem
;

58 1657 
	g√wmem
 = 
kÆloc
(
˝
->
sz
 + 
n
);

59 1658 if(
	g√wmem
 == 0)

61 1660 
memmove
(
√wmem
, 
˝
->
mem
, cp->
sz
);

62 1661 
mem£t
(
√wmem
 + 
˝
->
sz
, 0, 
n
);

63 1662 
	gﬁdmem
 = 
˝
->
mem
;

64 1663 
	g˝
->
	gmem
 = 
√wmem
;

65 1664 
k‰ì
(
ﬁdmem
, 
˝
->
sz
);

66 1665 
	g˝
->
	gsz
 +
n
;

67 1666 
£tup£gs
(
˝
);

68 1667  
	g˝
->
	gsz
 - 
	gn
;

74 1673 
£tup£gs
(
¥oc
 *
p
)

76 1675 
˝u
 *
	gc
;

78 1677 
push˛i
();

79 1678 
	gc
 = &
˝us
[
˝u
()];

80 1679 
	gc
->
	gts
.
	gss0
 = 
SEG_KDATA
 << 3;

81 1680 if(
	gp
)

82 1681 
	gc
->
	gts
.
	ge•0
 = (
uöt
)(
p
->
k°ack
 + 
KSTACKSIZE
);

84 1683 
	gc
->
	gts
.
	ge•0
 = 0xffffffff;

86 1685 
	gc
->
	ggdt
[0] = 
SEG_NULL
;

87 1686 
	gc
->
	ggdt
[
SEG_KCODE
] = 
SEG
(
STA_X
|
STA_R
, 0, 0x100000 + 64*1024-1, 0);

88 1687 
	gc
->
	ggdt
[
SEG_KDATA
] = 
SEG
(
STA_W
, 0, 0xffffffff, 0);

89 1688 
	gc
->
	ggdt
[
SEG_TSS
] = 
SEG16
(
STS_T32A
, (
uöt
)&
c
->
ts
, (c->ts)-1, 0);

90 1689 
	gc
->
	ggdt
[
SEG_TSS
].
	gs
 = 0;

91 1690 if(
	gp
){

92 1691 
	gc
->
	ggdt
[
SEG_UCODE
] = 
SEG
(
STA_X
|
STA_R
, (
uöt
)
p
->
mem
,Ö->
sz
-1, 
DPL_USER
);

93 1692 
	gc
->
	ggdt
[
SEG_UDATA
] = 
SEG
(
STA_W
, (
uöt
)
p
->
mem
,Ö->
sz
-1, 
DPL_USER
);

95 1694 
	gc
->
	ggdt
[
SEG_UCODE
] = 
SEG_NULL
;

96 1695 
	gc
->
	ggdt
[
SEG_UDATA
] = 
SEG_NULL
;

101 1700 
lgdt
(
c
->
gdt
, (c->gdt));

102 1701 
…r
(
SEG_TSS
 << 3);

103 1702 
p›˛i
();

109 1708 
	g¥oc
*

110 1709 
c›y¥oc
(
¥oc
 *
p
)

112 1711 
	gi
;

113 1712 
¥oc
 *
	g≈
;

116 1715 if((
	g≈
 = 
Ælo˝roc
()) == 0)

120 1719 if((
	g≈
->
	gk°ack
 = 
kÆloc
(
KSTACKSIZE
)) == 0){

121 1720 
≈
->
°©e
 = 
UNUSED
;

124 1723 
	g≈
->
	gtf
 = (
å≠‰ame
*)(
≈
->
k°ack
 + 
KSTACKSIZE
) - 1;

126 1725 if(
	gp
){

127 1726 
	g≈
->
	g∑ª¡
 = 
p
;

128 1727 
memmove
(
≈
->
tf
, 
p
->tf, (*np->tf));

130 1729 
	g≈
->
	gsz
 = 
p
->
sz
;

131 1730 if((
	g≈
->
	gmem
 = 
kÆloc
(
≈
->
sz
)) == 0){

132 1731 
k‰ì
(
≈
->
k°ack
, 
KSTACKSIZE
);

133 1732 
	g≈
->
	gk°ack
 = 0;

134 1733 
	g≈
->
	g°©e
 = 
UNUSED
;

137 1736 
memmove
(
≈
->
mem
, 
p
->mem,Çp->
sz
);

139 1738 
	gi
 = 0; i < 
	gNOFILE
; i++)

140 1739 if(
	gp
->
	gofûe
[
i
])

141 1740 
	g≈
->
	gofûe
[
i
] = 
fûedup
(
p
->
ofûe
[i]);

142 1741 
	g≈
->
	gcwd
 = 
idup
(
p
->
cwd
);

146 1745 
mem£t
(&
≈
->
c⁄ãxt
, 0, (np->context));

147 1746 
	g≈
->
	gc⁄ãxt
.
	geù
 = (
uöt
)
f‹kªt
;

148 1747 
	g≈
->
	gc⁄ãxt
.
	ge•
 = (
uöt
)
≈
->
tf
;

152 1751 
	g≈
->
	gtf
->
	góx
 = 0;

153 1752  
	g≈
;

158 1757 
u£röô
()

160 1759 
¥oc
 *
	gp
;

161 1760 
uch¨
 
_bö¨y_öôcode_°¨t
[], 
_bö¨y_öôcode_size
[];

163 1762 
	gp
 = 
c›y¥oc
(0);

164 1763 
	gp
->
	gsz
 = 
PAGE
;

165 1764 
	gp
->
	gmem
 = 
kÆloc
(
p
->
sz
);

166 1765 
	gp
->
	gcwd
 = 
«mei
("/");

167 1766 
mem£t
(
p
->
tf
, 0, (*p->tf));

168 1767 
	gp
->
	gtf
->
	gcs
 = (
SEG_UCODE
 << 3Ë| 
DPL_USER
;

169 1768 
	gp
->
	gtf
->
	gds
 = (
SEG_UDATA
 << 3Ë| 
DPL_USER
;

170 1769 
	gp
->
	gtf
->
	ges
 = 
p
->
tf
->
ds
;

171 1770 
	gp
->
	gtf
->
	gss
 = 
p
->
tf
->
ds
;

172 1771 
	gp
->
	gtf
->
	geÊags
 = 
FL_IF
;

173 1772 
	gp
->
	gtf
->
	ge•
 = 
p
->
sz
;

176 1775 
	gp
->
	gtf
->
	ge•
 -= 4;

177 1776 *(
	guöt
*)(
	gp
->
	gmem
 +Ö->
	gtf
->
	ge•
) = 0xefefefef;

180 1779 
	gp
->
	gtf
->
	geù
 = 0;

181 1780 
memmove
(
p
->
mem
, 
_bö¨y_öôcode_°¨t
, ()
_bö¨y_öôcode_size
);

182 1781 
ß„°r˝y
(
p
->
«me
, "initcode", (p->name));

183 1782 
	gp
->
	g°©e
 = 
RUNNABLE
;

185 1784 
	göô¥oc
 = 
p
;

189 1788 
	g¥oc
*

190 1789 
cuΩroc
()

192 1791 
¥oc
 *
	gp
;

194 1793 
push˛i
();

195 1794 
	gp
 = 
˝us
[
˝u
()].
cuΩroc
;

196 1795 
p›˛i
();

197 1796  
	gp
;

209 1808 
scheduÀr
()

211 1810 
¥oc
 *
	gp
;

212 1811 
˝u
 *
	gc
;

213 1812 
	gi
;

215 1814 
	gc
 = &
˝us
[
˝u
()];

218 1817 
°i
();

221 1820 
acquúe
(&
¥oc_èbÀ_lock
);

222 1821 
	gi
 = 0; i < 
	gNPROC
; i++){

223 1822 
	gp
 = &
¥oc
[
i
];

224 1823 if(
	gp
->
	g°©e
 !
RUNNABLE
)

230 1829 
	gc
->
	gcuΩroc
 = 
p
;

231 1830 
£tup£gs
(
p
);

232 1831 
	gp
->
	g°©e
 = 
RUNNING
;

233 1832 
swtch
(&
c
->
c⁄ãxt
, &
p
->context);

237 1836 
	gc
->
	gcuΩroc
 = 0;

238 1837 
£tup£gs
(0);

240 1839 
ªÀa£
(&
¥oc_èbÀ_lock
);

254 1853 
sched
()

256 1855 if(
ªad_eÊags
()&
	gFL_IF
)

257 1856 
∑nic
("sched interruptible");

258 1857 if(
	g˝
->
	g°©e
 =
RUNNING
)

259 1858 
∑nic
("schedÑunning");

260 1859 if(!
hﬁdög
(&
¥oc_èbÀ_lock
))

261 1860 
∑nic
("schedÖroc_table_lock");

262 1861 if(
	g˝us
[
˝u
()].
	gn˛i
 != 1)

263 1862 
∑nic
("schedÜocks");

265 1864 
swtch
(&
˝
->
c⁄ãxt
, &
˝us
[
˝u
()].context);

270 1869 
yõld
()

272 1871 
acquúe
(&
¥oc_èbÀ_lock
);

273 1872 
	g˝
->
	g°©e
 = 
RUNNABLE
;

274 1873 
sched
();

275 1874 
ªÀa£
(&
¥oc_èbÀ_lock
);

281 1880 
f‹kªt
()

284 1883 
ªÀa£
(&
¥oc_èbÀ_lock
);

287 1886 
f‹kªt1
(
˝
->
tf
);

304 1903 
¶ìp
(*
ch™
, 
•ölock
 *
lk
)

306 1905 if(
	g˝
 == 0)

307 1906 
∑nic
("sleep");

309 1908 if(
	glk
 == 0)

310 1909 
∑nic
("sleep withoutÜk");

318 1917 if(
	glk
 !&
¥oc_èbÀ_lock
){

319 1918 
acquúe
(&
¥oc_èbÀ_lock
);

320 1919 
ªÀa£
(
lk
);

324 1923 
	g˝
->
	gch™
 = 
ch™
;

325 1924 
	g˝
->
	g°©e
 = 
SLEEPING
;

326 1925 
sched
();

329 1928 
	g˝
->
	gch™
 = 0;

332 1931 if(
	glk
 !&
¥oc_èbÀ_lock
){

333 1932 
ªÀa£
(&
¥oc_èbÀ_lock
);

334 1933 
acquúe
(
lk
);

341 1940 
wakeup1
(*
ch™
)

343 1942 
¥oc
 *
	gp
;

345 1944 
	gp
 = 
¥oc
;Ö < &
	g¥oc
[
NPROC
];Ö++)

346 1945 if(
	gp
->
	g°©e
 =
SLEEPING
 && 
p
->
ch™
 == chan)

347 1946 
p
->
°©e
 = 
RUNNABLE
;

354 1953 
wakeup
(*
ch™
)

356 1955 
acquúe
(&
¥oc_èbÀ_lock
);

357 1956 
wakeup1
(
ch™
);

358 1957 
ªÀa£
(&
¥oc_èbÀ_lock
);

365 1964 
kûl
(
pid
)

367 1966 
¥oc
 *
	gp
;

369 1968 
acquúe
(&
¥oc_èbÀ_lock
);

370 1969 
	gp
 = 
¥oc
;Ö < &
	g¥oc
[
NPROC
];Ö++){

371 1970 if(
	gp
->
	gpid
 =
pid
){

372 1971 
p
->
kûÀd
 = 1;

374 1973 if(
	gp
->
	g°©e
 =
SLEEPING
)

375 1974 
p
->
°©e
 = 
RUNNABLE
;

376 1975 
ªÀa£
(&
¥oc_èbÀ_lock
);

380 1979 
ªÀa£
(&
¥oc_èbÀ_lock
);

388 1987 
exô
()

390 1989 
¥oc
 *
	gp
;

391 1990 
	gfd
;

393 1992 if(
	g˝
 =
öô¥oc
)

394 1993 
∑nic
("initÉxiting");

397 1996 
	gfd
 = 0; fd < 
	gNOFILE
; fd++){

398 1997 if(
	g˝
->
	gofûe
[
fd
]){

399 1998 
fûe˛o£
(
˝
->
ofûe
[
fd
]);

400 1999 
	g˝
->
	gofûe
[
fd
] = 0;

404 2003 
ùut
(
˝
->
cwd
);

405 2004 
	g˝
->
	gcwd
 = 0;

407 2006 
acquúe
(&
¥oc_èbÀ_lock
);

410 2009 
wakeup1
(
˝
->
∑ª¡
);

413 2012 
	gp
 = 
¥oc
;Ö < &
	g¥oc
[
NPROC
];Ö++){

414 2013 if(
	gp
->
	g∑ª¡
 =
˝
){

415 2014 
p
->
∑ª¡
 = 
öô¥oc
;

416 2015 if(
	gp
->
	g°©e
 =
ZOMBIE
)

417 2016 
wakeup1
(
öô¥oc
);

422 2021 
	g˝
->
	gkûÀd
 = 0;

423 2022 
	g˝
->
	g°©e
 = 
ZOMBIE
;

424 2023 
sched
();

425 2024 
∑nic
("zombieÉxit");

431 2030 
waô
()

433 2032 
¥oc
 *
	gp
;

434 2033 
	gi
, 
	ghavekids
, 
	gpid
;

436 2035 
acquúe
(&
¥oc_èbÀ_lock
);

439 2038 
	ghavekids
 = 0;

440 2039 
	gi
 = 0; i < 
	gNPROC
; i++){

441 2040 
	gp
 = &
¥oc
[
i
];

442 2041 if(
	gp
->
	g°©e
 =
UNUSED
)

444 2043 if(
	gp
->
	g∑ª¡
 =
˝
){

445 2044 if(
p
->
°©e
 =
ZOMBIE
){

447 2046 
k‰ì
(
p
->
mem
,Ö->
sz
);

448 2047 
k‰ì
(
p
->
k°ack
, 
KSTACKSIZE
);

449 2048 
	gpid
 = 
p
->
pid
;

450 2049 
	gp
->
	g°©e
 = 
UNUSED
;

451 2050 
	gp
->
	gpid
 = 0;

452 2051 
	gp
->
	g∑ª¡
 = 0;

453 2052 
	gp
->
	g«me
[0] = 0;

454 2053 
ªÀa£
(&
¥oc_èbÀ_lock
);

455 2054  
	gpid
;

457 2056 
	ghavekids
 = 1;

462 2061 if(!
	ghavekids
 || 
	g˝
->
	gkûÀd
){

463 2062 
ªÀa£
(&
¥oc_èbÀ_lock
);

468 2067 
¶ìp
(
˝
, &
¥oc_èbÀ_lock
);

476 2075 
¥ocdump
()

478 2077 *
	g°©es
[] = {

479 2078 [
UNUSED
] "unused",

480 2079 [
EMBRYO
] "embryo",

481 2080 [
SLEEPING
] "sleep ",

482 2081 [
RUNNABLE
] "runble",

483 2082 [
RUNNING
] "run ",

484 2083 [
ZOMBIE
] "zombie"

486 2085 
	gi
, 
	gj
;

487 2086 
¥oc
 *
	gp
;

488 2087 *
	g°©e
;

489 2088 
uöt
 
	gpc
[10];

491 2090 
	gi
 = 0; i < 
	gNPROC
; i++){

492 2091 
	gp
 = &
¥oc
[
i
];

493 2092 if(
	gp
->
	g°©e
 =
UNUSED
)

495 2094 if(
	gp
->
	g°©e
 >0 && 
p
->
°©e
 < 
NELEM
(
°©es
) && states[p->state])

496 2095 
°©e
 = 
°©es
[
p
->state];

498 2097 
	g°©e
 = "???";

499 2098 
˝rötf
("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

500 2099 if(
	gp
->
	g°©e
 =
SLEEPING
){

501 2100 
gëˇŒîpcs
((
uöt
*)
p
->
c⁄ãxt
.
ebp
+2, 
pc
);

502 2101 
	gj
=0; j<10 && 
	gpc
[
j
] != 0; j++)

503 2102 
˝rötf
(" %p", 
pc
[
j
]);

505 2104 
˝rötf
("\n");

	@fmt/proc.h

2 501 #deföê
	#SEG_KCODE
 1

3 502 #deföê
	#SEG_KDATA
 2

4 503 #deföê
	#SEG_UCODE
 3

	)

5 504 #deföê
	#SEG_UDATA
 4

	)

6 505 #deföê
	#SEG_TSS
 5

7 506 #deföê
	#NSEGS
 6

	)

16 1515 
	sc⁄ãxt
 {

17 1516 
	meù
;

18 1517 
	me•
;

19 1518 
	mebx
;

20 1519 
	mecx
;

21 1520 
	medx
;

22 1521 
	mesi
;

23 1522 
	medi
;

24 1523 
	mebp
;

27 1526 
	e¥oc_°©e
 { 
	mUNUSED
, 
	mEMBRYO
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

30 1529 
	s¥oc
 {

31 1530 *
	mmem
;

32 1531 
uöt
 
	msz
;

33 1532 *
	mk°ack
;

34 1533 
¥oc_°©e
 
	m°©e
;

35 1534 
	mpid
;

36 1535 
¥oc
 *
	m∑ª¡
;

37 1536 *
	mch™
;

38 1537 
	mkûÀd
;

39 1538 
fûe
 *
	mofûe
[
NOFILE
];

40 1539 
öode
 *
	mcwd
;

41 1540 
c⁄ãxt
 
	mc⁄ãxt
;

42 1541 
å≠‰ame
 *
	mtf
;

43 1542 
	m«me
[16];

58 1557 
	s˝u
 {

59 1558 
uch¨
 
	m≠icid
;

60 1559 
¥oc
 *
	mcuΩroc
;

61 1560 
c⁄ãxt
 
	mc⁄ãxt
;

62 1561 
èsk°©e
 
	mts
;

63 1562 
£gdesc
 
	mgdt
[
NSEGS
];

64 1563 vﬁ©ûê
uöt
 
	mboŸed
;

65 1564 
	mn˛i
;

66 1565 
	möã«
;

69 1568 
˝u
 
˝us
[
NCPU
];

70 1569 
n˝u
;

74 573 #deföê
	#˝
 
	`cuΩroc
()

	)

	@fmt/sh.c

3 752 #ö˛udê
	~"ty≥s.h
"

4 753 #ö˛udê
	~"u£r.h
"

5 754 #ö˛udê
	~"f˙é.h
"

8 757 #deföê
	#EXEC
 1

	)

9 758 #deföê
	#REDIR
 2

	)

10 759 #deföê
	#PIPE
 3

	)

11 760 #deföê
	#LIST
 4

	)

12 761 #deföê
	#BACK
 5

	)

14 763 #deföê
	#MAXARGS
 10

	)

16 6765 
	scmd
 {

17 6766 
	mty≥
;

20 6769 
	sexeccmd
 {

21 6770 
	mty≥
;

22 6771 *
	m¨gv
[
MAXARGS
];

23 6772 *
	mórgv
[
MAXARGS
];

26 6775 
	sªdúcmd
 {

27 6776 
	mty≥
;

28 6777 
cmd
 *
	mcmd
;

29 6778 *
	mfûe
;

30 6779 *
	mefûe
;

31 6780 
	mmode
;

32 6781 
	mfd
;

35 6784 
	spùecmd
 {

36 6785 
	mty≥
;

37 6786 
cmd
 *
	mÀ·
;

38 6787 
cmd
 *
	mright
;

41 6790 
	sli°cmd
 {

42 6791 
	mty≥
;

43 6792 
cmd
 *
	mÀ·
;

44 6793 
cmd
 *
	mright
;

47 6796 
	sbackcmd
 {

48 6797 
	mty≥
;

49 6798 
cmd
 *
	mcmd
;

51 6800 
f‹k1
();

52 6801 
∑nic
(*);

53 6802 
cmd
 *
∑r£cmd
(*);

57 6806 
runcmd
(
cmd
 *cmd)

59 6808 
	gp
[2];

60 6809 
backcmd
 *
	gbcmd
;

61 6810 
execcmd
 *
	gecmd
;

62 6811 
li°cmd
 *
	glcmd
;

63 6812 
pùecmd
 *
	gpcmd
;

64 6813 
ªdúcmd
 *
	grcmd
;

66 6815 if(
	gcmd
 == 0)

67 6816 
exô
();

69 6818 
	gcmd
->
	gty≥
){

71 6820 
∑nic
("runcmd");

73 6822 
	gEXEC
:

74 6823 
ecmd
 = (
execcmd
*)
cmd
;

75 6824 if(
	gecmd
->
	g¨gv
[0] == 0)

76 6825 
exô
();

77 6826 
exec
(
ecmd
->
¨gv
[0],Écmd->argv);

78 6827 
¥ötf
(2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

81 6830 
	gREDIR
:

82 6831 
rcmd
 = (
ªdúcmd
*)
cmd
;

83 6832 
˛o£
(
rcmd
->
fd
);

84 6833 if(
›í
(
rcmd
->
fûe
,Ñcmd->
mode
) < 0){

85 6834 
¥ötf
(2, "›í %†Áûed\n", 
rcmd
->
fûe
);

86 6835 
exô
();

88 6837 
runcmd
(
rcmd
->
cmd
);

91 6840 
	gLIST
:

92 6841 
lcmd
 = (
li°cmd
*)
cmd
;

93 6842 if(
f‹k1
() == 0)

94 6843 
runcmd
(
lcmd
->
À·
);

95 6844 
waô
();

96 6845 
runcmd
(
lcmd
->
right
);

101 6850 
	gPIPE
:

102 6851 
pcmd
 = (
pùecmd
*)
cmd
;

103 6852 if(
pùe
(
p
) < 0)

104 6853 
∑nic
("pipe");

105 6854 if(
f‹k1
() == 0){

106 6855 
˛o£
(1);

107 6856 
dup
(
p
[1]);

108 6857 
˛o£
(
p
[0]);

109 6858 
˛o£
(
p
[1]);

110 6859 
runcmd
(
pcmd
->
À·
);

112 6861 if(
f‹k1
() == 0){

113 6862 
˛o£
(0);

114 6863 
dup
(
p
[0]);

115 6864 
˛o£
(
p
[0]);

116 6865 
˛o£
(
p
[1]);

117 6866 
runcmd
(
pcmd
->
right
);

119 6868 
˛o£
(
p
[0]);

120 6869 
˛o£
(
p
[1]);

121 6870 
waô
();

122 6871 
waô
();

125 6874 
	gBACK
:

126 6875 
bcmd
 = (
backcmd
*)
cmd
;

127 6876 if(
f‹k1
() == 0)

128 6877 
runcmd
(
bcmd
->
cmd
);

131 6880 
exô
();

135 6884 
gëcmd
(*
buf
, 
nbuf
)

137 6886 
¥ötf
(2, "$ ");

138 6887 
mem£t
(
buf
, 0, 
nbuf
);

139 6888 
gës
(
buf
, 
nbuf
);

140 6889 if(
	gbuf
[0] == 0)

152 6901 
maö
()

154 6903 
	gbuf
[100];

155 6904 
	gfd
;

158 6907 (
	gfd
 = 
›í
("c⁄sﬁe", 
O_RDWR
)) >= 0){

159 6908 if(
fd
 >= 3){

160 6909 
˛o£
(
fd
);

166 6915 
gëcmd
(
buf
, (buf)) >= 0){

167 6916 if(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){

170 6919 
buf
[
°æí
(buf)-1] = 0;

171 6920 if(
chdú
(
buf
+3) < 0)

172 6921 
¥ötf
(2, "ˇ¬Ÿ cd %s\n", 
buf
+3);

175 6924 if(
f‹k1
() == 0)

176 6925 
runcmd
(
∑r£cmd
(
buf
));

177 6926 
waô
();

179 6928 
exô
();

183 6932 
∑nic
(*
s
)

185 6934 
¥ötf
(2, "%s\n", 
s
);

186 6935 
exô
();

190 6939 
f‹k1
()

192 6941 
	gpid
;

194 6943 
	gpid
 = 
f‹k
();

195 6944 if(
	gpid
 == -1)

196 6945 
∑nic
("fork");

197 6946  
	gpid
;

203 6952 
	gcmd
*

204 6953 
execcmd
()

206 6955 
execcmd
 *
	gcmd
;

208 6957 
	gcmd
 = 
mÆloc
((*
cmd
));

209 6958 
mem£t
(
cmd
, 0, (*cmd));

210 6959 
	gcmd
->
	gty≥
 = 
EXEC
;

211 6960  (
	gcmd
*)cmd;

214 6963 
	gcmd
*

215 6964 
ªdúcmd
(
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

217 6966 
ªdúcmd
 *
	gcmd
;

219 6968 
	gcmd
 = 
mÆloc
((*
cmd
));

220 6969 
mem£t
(
cmd
, 0, (*cmd));

221 6970 
	gcmd
->
	gty≥
 = 
REDIR
;

222 6971 
	gcmd
->cmd = 
subcmd
;

223 6972 
	gcmd
->
	gfûe
 = 
fûe
;

224 6973 
	gcmd
->
	gefûe
 = 
efûe
;

225 6974 
	gcmd
->
	gmode
 = 
mode
;

226 6975 
	gcmd
->
	gfd
 = 
fd
;

227 6976  (
	gcmd
*)cmd;

230 6979 
	gcmd
*

231 6980 
pùecmd
(
cmd
 *
À·
, cmd *
right
)

233 6982 
pùecmd
 *
	gcmd
;

235 6984 
	gcmd
 = 
mÆloc
((*
cmd
));

236 6985 
mem£t
(
cmd
, 0, (*cmd));

237 6986 
	gcmd
->
	gty≥
 = 
PIPE
;

238 6987 
	gcmd
->
	gÀ·
 = 
À·
;

239 6988 
	gcmd
->
	gright
 = 
right
;

240 6989  (
	gcmd
*)cmd;

251 7000 
	gcmd
*

252 7001 
li°cmd
(
cmd
 *
À·
, cmd *
right
)

254 7003 
li°cmd
 *
	gcmd
;

256 7005 
	gcmd
 = 
mÆloc
((*
cmd
));

257 7006 
mem£t
(
cmd
, 0, (*cmd));

258 7007 
	gcmd
->
	gty≥
 = 
LIST
;

259 7008 
	gcmd
->
	gÀ·
 = 
À·
;

260 7009 
	gcmd
->
	gright
 = 
right
;

261 7010  (
	gcmd
*)cmd;

264 7013 
	gcmd
*

265 7014 
backcmd
(
cmd
 *
subcmd
)

267 7016 
backcmd
 *
	gcmd
;

269 7018 
	gcmd
 = 
mÆloc
((*
cmd
));

270 7019 
mem£t
(
cmd
, 0, (*cmd));

271 7020 
	gcmd
->
	gty≥
 = 
BACK
;

272 7021 
	gcmd
->cmd = 
subcmd
;

273 7022  (
	gcmd
*)cmd;

277 7026 
	gwhôe•a˚
[] = " \t\r\n\v";

278 7027 
	gsymbﬁs
[] = "<|>&;()";

281 7030 
gëtokí
(**
ps
, *
es
, **
q
, **
eq
)

283 7032 *
	gs
;

284 7033 
	gªt
;

286 7035 
	gs
 = *
ps
;

287 7036 
	gs
 < 
	ges
 && 
°rchr
(
whôe•a˚
, *
s
))

288 7037 
	gs
++;

289 7038 if(
	gq
)

290 7039 *
	gq
 = 
s
;

291 7040 
	gªt
 = *
s
;

292 7041 *
	gs
){

301 7050 
s
++;

304 7053 
s
++;

305 7054 if(*
	gs
 == '>'){

306 7055 
ªt
 = '+';

307 7056 
	gs
++;

311 7060 
ªt
 = 'a';

312 7061 
	gs
 < 
	ges
 && !
°rchr
(
whôe•a˚
, *
s
Ë&& !°rchr(
symbﬁs
, *s))

313 7062 
	gs
++;

316 7065 if(
	geq
)

317 7066 *
	geq
 = 
s
;

319 7068 
	gs
 < 
	ges
 && 
°rchr
(
whôe•a˚
, *
s
))

320 7069 
	gs
++;

321 7070 *
	gps
 = 
s
;

322 7071  
	gªt
;

326 7075 
≥ek
(**
ps
, *
es
, *
toks
)

328 7077 *
	gs
;

330 7079 
	gs
 = *
ps
;

331 7080 
	gs
 < 
	ges
 && 
°rchr
(
whôe•a˚
, *
s
))

332 7081 
	gs
++;

333 7082 *
	gps
 = 
s
;

334 7083  *
	gs
 && 
°rchr
(
toks
, *
s
);

351 7100 
cmd
 *
∑r£löe
(**, *);

352 7101 
cmd
 *
∑r£pùe
(**, *);

353 7102 
cmd
 *
∑r£exec
(**, *);

354 7103 
cmd
 *
nu…îmö©e
(cmd*);

356 7105 
	gcmd
*

357 7106 
∑r£cmd
(*
s
)

359 7108 *
	ges
;

360 7109 
cmd
 *
	gcmd
;

362 7111 
	ges
 = 
s
 + 
°æí
(s);

363 7112 
	gcmd
 = 
∑r£löe
(&
s
, 
es
);

364 7113 
≥ek
(&
s
, 
es
, "");

365 7114 if(
	gs
 !
es
){

366 7115 
¥ötf
(2, "À·ovîs: %s\n", 
s
);

367 7116 
∑nic
("syntax");

369 7118 
nu…îmö©e
(
cmd
);

370 7119  
	gcmd
;

373 7122 
	gcmd
*

374 7123 
∑r£löe
(**
ps
, *
es
)

376 7125 
cmd
 *
	gcmd
;

378 7127 
	gcmd
 = 
∑r£pùe
(
ps
, 
es
);

379 7128 
≥ek
(
ps
, 
es
, "&")){

380 7129 
gëtokí
(
ps
, 
es
, 0, 0);

381 7130 
	gcmd
 = 
backcmd
(
cmd
);

383 7132 if(
≥ek
(
ps
, 
es
, ";")){

384 7133 
gëtokí
(
ps
, 
es
, 0, 0);

385 7134 
	gcmd
 = 
li°cmd
(
cmd
, 
∑r£löe
(
ps
, 
es
));

387 7136  
	gcmd
;

401 7150 
	gcmd
*

402 7151 
∑r£pùe
(**
ps
, *
es
)

404 7153 
cmd
 *
	gcmd
;

406 7155 
	gcmd
 = 
∑r£exec
(
ps
, 
es
);

407 7156 if(
≥ek
(
ps
, 
es
, "|")){

408 7157 
gëtokí
(
ps
, 
es
, 0, 0);

409 7158 
	gcmd
 = 
pùecmd
(
cmd
, 
∑r£pùe
(
ps
, 
es
));

411 7160  
	gcmd
;

414 7163 
	gcmd
*

415 7164 
∑r£ªdús
(
cmd
 *cmd, **
ps
, *
es
)

417 7166 
	gtok
;

418 7167 *
	gq
, *
	geq
;

420 7169 
≥ek
(
ps
, 
es
, "<>")){

421 7170 
	gtok
 = 
gëtokí
(
ps
, 
es
, 0, 0);

422 7171 if(
gëtokí
(
ps
, 
es
, &
q
, &
eq
) != 'a')

423 7172 
∑nic
("missing file forÑedirection");

424 7173 
	gtok
){

426 7175 
cmd
 = 
ªdúcmd
(cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

429 7178 
cmd
 = 
ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

432 7181 
cmd
 = 
ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

436 7185  
	gcmd
;

451 7200 
	gcmd
*

452 7201 
∑r£block
(**
ps
, *
es
)

454 7203 
cmd
 *
	gcmd
;

456 7205 if(!
≥ek
(
ps
, 
es
, "("))

457 7206 
∑nic
("parseblock");

458 7207 
gëtokí
(
ps
, 
es
, 0, 0);

459 7208 
	gcmd
 = 
∑r£löe
(
ps
, 
es
);

460 7209 if(!
≥ek
(
ps
, 
es
, ")"))

461 7210 
∑nic
("syntax - missing )");

462 7211 
gëtokí
(
ps
, 
es
, 0, 0);

463 7212 
	gcmd
 = 
∑r£ªdús
(
cmd
, 
ps
, 
es
);

464 7213  
	gcmd
;

467 7216 
	gcmd
*

468 7217 
∑r£exec
(**
ps
, *
es
)

470 7219 *
	gq
, *
	geq
;

471 7220 
	gtok
, 
	g¨gc
;

472 7221 
execcmd
 *
	gcmd
;

473 7222 
cmd
 *
	gªt
;

475 7224 if(
≥ek
(
ps
, 
es
, "("))

476 7225  
∑r£block
(
ps
, 
es
);

478 7227 
	gªt
 = 
execcmd
();

479 7228 
	gcmd
 = (
execcmd
*)
ªt
;

481 7230 
	g¨gc
 = 0;

482 7231 
	gªt
 = 
∑r£ªdús
(
ªt
, 
ps
, 
es
);

483 7232 !
≥ek
(
ps
, 
es
, "|)&;")){

484 7233 if((
	gtok
=
gëtokí
(
ps
, 
es
, &
q
, &
eq
)) == 0)

486 7235 if(
	gtok
 != 'a')

487 7236 
∑nic
("syntax");

488 7237 
	gcmd
->
	g¨gv
[
¨gc
] = 
q
;

489 7238 
	gcmd
->
	górgv
[
¨gc
] = 
eq
;

490 7239 
	g¨gc
++;

491 7240 if(
	g¨gc
 >
MAXARGS
)

492 7241 
∑nic
("too manyárgs");

493 7242 
	gªt
 = 
∑r£ªdús
(
ªt
, 
ps
, 
es
);

495 7244 
	gcmd
->
	g¨gv
[
¨gc
] = 0;

496 7245 
	gcmd
->
	górgv
[
¨gc
] = 0;

497 7246  
	gªt
;

502 7251 
	gcmd
*

503 7252 
nu…îmö©e
(
cmd
 *cmd)

505 7254 
	gi
;

506 7255 
backcmd
 *
	gbcmd
;

507 7256 
execcmd
 *
	gecmd
;

508 7257 
li°cmd
 *
	glcmd
;

509 7258 
pùecmd
 *
	gpcmd
;

510 7259 
ªdúcmd
 *
	grcmd
;

512 7261 if(
	gcmd
 == 0)

515 7264 
	gcmd
->
	gty≥
){

516 7265 
	gEXEC
:

517 7266 
ecmd
 = (
execcmd
*)
cmd
;

518 7267 
	gi
=0; 
	gecmd
->
	g¨gv
[
i
]; i++)

519 7268 *
	gecmd
->
	górgv
[
i
] = 0;

522 7271 
	gREDIR
:

523 7272 
rcmd
 = (
ªdúcmd
*)
cmd
;

524 7273 
nu…îmö©e
(
rcmd
->
cmd
);

525 7274 *
	grcmd
->
	gefûe
 = 0;

528 7277 
	gPIPE
:

529 7278 
pcmd
 = (
pùecmd
*)
cmd
;

530 7279 
nu…îmö©e
(
pcmd
->
À·
);

531 7280 
nu…îmö©e
(
pcmd
->
right
);

534 7283 
	gLIST
:

535 7284 
lcmd
 = (
li°cmd
*)
cmd
;

536 7285 
nu…îmö©e
(
lcmd
->
À·
);

537 7286 
nu…îmö©e
(
lcmd
->
right
);

540 7289 
	gBACK
:

541 7290 
bcmd
 = (
backcmd
*)
cmd
;

542 7291 
nu…îmö©e
(
bcmd
->
cmd
);

545 7294  
	gcmd
;

	@fmt/spinlock.c

3 352 #ö˛udê
	~"ty≥s.h
"

4 353 #ö˛udê
	~"defs.h
"

5 354 #ö˛udê
	~"∑øm.h
"

6 355 #ö˛udê
	~"x86.h
"

7 356 #ö˛udê
	~"mmu.h
"

8 357 #ö˛udê
	~"¥oc.h
"

9 358 #ö˛udê
	~"•ölock.h
"

11 1360 
u£_c⁄sﬁe_lock
;

14 1363 
öôlock
(
•ölock
 *
lock
, *
«me
)

16 1365 
	glock
->
	g«me
 = 
«me
;

17 1366 
	glock
->
	glocked
 = 0;

18 1367 
	glock
->
	g˝u
 = 0xffffffff;

26 1375 
acquúe
(
•ölock
 *
lock
)

28 1377 
push˛i
();

29 1378 if(
hﬁdög
(
lock
))

30 1379 
∑nic
("acquire");

35 1384 
xchg
(&
lock
->
locked
, 1) == 1)

42 1391 
	glock
->
	g˝u
 = 
˝u
() + 10;

43 1392 
gëˇŒîpcs
(&
lock
,Üock->
pcs
);

53 1402 
ªÀa£
(
•ölock
 *
lock
)

55 1404 if(!
hﬁdög
(
lock
))

56 1405 
∑nic
("release");

58 1407 
	glock
->
	gpcs
[0] = 0;

59 1408 
	glock
->
	g˝u
 = 0xffffffff;

66 1415 
xchg
(&
lock
->
locked
, 0);

68 1417 
p›˛i
();

73 1422 
gëˇŒîpcs
(*
v
, 
uöt
 
pcs
[])

75 1424 
uöt
 *
	gebp
;

76 1425 
	gi
;

78 1427 
	gebp
 = (
uöt
*)
v
 - 2;

79 1428 
	gi
 = 0; i < 10; i++){

80 1429 if(
	gebp
 =0 || 
ebp
 =(
uöt
*)0xffffffff)

82 1431 
	gpcs
[
i
] = 
ebp
[1];

83 1432 
	gebp
 = (
uöt
*)
ebp
[0];

85 1434 ; 
	gi
 < 10; i++)

86 1435 
	gpcs
[
i
] = 0;

91 1440 
hﬁdög
(
•ölock
 *
lock
)

93 1442  
	glock
->
	glocked
 &&Üock->
	g˝u
 =
˝u
() + 10;

106 1455 
push˛i
()

108 1457 
	geÊags
;

110 1459 
	geÊags
 = 
ªad_eÊags
();

111 1460 
˛i
();

112 1461 if(
	g˝us
[
˝u
()].
	gn˛i
++ == 0)

113 1462 
˝us
[
˝u
()].
öã«
 = 
eÊags
 & 
FL_IF
;

117 1466 
p›˛i
()

119 1468 if(
ªad_eÊags
()&
	gFL_IF
)

120 1469 
∑nic
("popcli - interruptible");

121 1470 if(--
	g˝us
[
˝u
()].
	gn˛i
 < 0)

122 1471 
∑nic
("popcli");

123 1472 if(
	g˝us
[
˝u
()].
	gn˛i
 =0 && 
˝us
[˝u()].
öã«
)

124 1473 
°i
();

	@fmt/spinlock.h

2 1301 
	s•ölock
 {

3 1302 
uöt
 
	mlocked
;

6 1305 *
	m«me
;

7 1306 
	m˝u
;

8 1307 
uöt
 
	mpcs
[10];

	@fmt/stat.h

1 3050 
	s°©
 {

2 3051 
	mdev
;

3 3052 
uöt
 
	möo
;

4 3053 
	mty≥
;

5 3054 
	m∆ök
;

6 3055 
uöt
 
	msize
;

	@fmt/string.c

1 200 #ö˛udê
	~"ty≥s.h
"

4 5203 
mem£t
(*
d°
, 
c
, 
uöt
 
n
)

6 5205 *
	gd
;

8 5207 
	gd
 = (*)
d°
;

9 5208 
	gn
-- > 0)

10 5209 *
	gd
++ = 
c
;

12 5211  
	gd°
;

16 5215 
memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

18 5217 c⁄° 
uch¨
 *
	gs1
, *
	gs2
;

20 5219 
	gs1
 = 
v1
;

21 5220 
	gs2
 = 
v2
;

22 5221 
	gn
-- > 0){

23 5222 if(*
	gs1
 !*
s2
)

24 5223  *
s1
 - *
s2
;

25 5224 
	gs1
++, 
	gs2
++;

32 5231 
memmove
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

34 5233 c⁄° *
	gs
;

35 5234 *
	gd
;

37 5236 
	gs
 = 
§c
;

38 5237 
	gd
 = 
d°
;

39 5238 if(
	gs
 < 
	gd
 && s + 
	gn
 > d){

40 5239 
	gs
 +
n
;

41 5240 
	gd
 +
n
;

42 5241 
	gn
-- > 0)

43 5242 *--
	gd
 = *--
s
;

45 5244 
	gn
-- > 0)

46 5245 *
	gd
++ = *
s
++;

48 5247  
	gd°
;

52 5251 
°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

54 5253 
	gn
 > 0 && *
	gp
 && *∞=*
q
)

55 5254 
n
--, 
	gp
++, 
	gq
++;

56 5255 if(
	gn
 == 0)

58 5257  (
	guch¨
)*
	gp
 - (uch¨)*
	gq
;

62 5261 
°∫˝y
(*
s
, c⁄° *
t
, 
n
)

64 5263 *
	gos
;

66 5265 
	gos
 = 
s
;

67 5266 
	gn
-- > 0 && (*
	gs
++ = *
t
++) != 0)

69 5268 
	gn
-- > 0)

70 5269 *
	gs
++ = 0;

71 5270  
	gos
;

76 5275 
ß„°r˝y
(*
s
, c⁄° *
t
, 
n
)

78 5277 *
	gos
;

80 5279 
	gos
 = 
s
;

81 5280 if(
	gn
 <= 0)

82 5281  
os
;

83 5282 --
	gn
 > 0 && (*
	gs
++ = *
t
++) != 0)

85 5284 *
	gs
 = 0;

86 5285  
	gos
;

90 5289 
°æí
(c⁄° *
s
)

92 5291 
	gn
;

94 5293 
	gn
 = 0; 
	gs
[
n
];Ç++)

96 5295  
	gn
;

	@fmt/swtch.S

1 2150 #void 
swtch
(
c⁄ãxt
 *
ﬁd
, c⁄ãxà*
√w
);

2 2151 #
2152 #Savê
cuºít
 
c⁄ãxt
 
ö
 
	gﬁd


3 2153 #™d 
thí
 
lﬂd
 
c⁄ãxt
 
‰om
 
	g√w
.

5 2155 .
globl
 
	gswtch


6 2156 
	gswtch
:

7 2157 #Savê
ﬁd
 
ªgi°îs


8 2158 
movl
 4(%
e•
), %
	góx


10 2160 
	gp›l
 0(%
	góx
Ë#%
	geù


11 2161 
	gmovl
 %
	ge•
, 4(%
	góx
)

12 2162 
	gmovl
 %
	gebx
, 8(%
	góx
)

13 2163 
	gmovl
 %
	gecx
, 12(%
	góx
)

14 2164 
	gmovl
 %
	gedx
, 16(%
	góx
)

15 2165 
	gmovl
 %
	gesi
, 20(%
	góx
)

16 2166 
	gmovl
 %
	gedi
, 24(%
	góx
)

17 2167 
	gmovl
 %
	gebp
, 28(%
	góx
)

19 2169 #Lﬂd 
√w
 
	gªgi°îs


20 2170 
	gmovl
 4(%
	ge•
), %
	góx
 #nŸ 8(%e•Ë- 
p›≥d
  
addªss
 
	gabove


22 2172 
	gmovl
 28(%
	góx
), %
	gebp


23 2173 
	gmovl
 24(%
	góx
), %
	gedi


24 2174 
	gmovl
 20(%
	góx
), %
	gesi


25 2175 
	gmovl
 16(%
	góx
), %
	gedx


26 2176 
	gmovl
 12(%
	góx
), %
	gecx


27 2177 
	gmovl
 8(%
	góx
), %
	gebx


28 2178 
	gmovl
 4(%
	góx
), %
	ge•


29 2179 
	gpushl
 0(%
	góx
Ë#%
	geù


31 2181 
	gªt


	@fmt/syscall.c

1 650 #ö˛udê
	~"ty≥s.h
"

2 651 #ö˛udê
	~"defs.h
"

3 652 #ö˛udê
	~"∑øm.h
"

4 653 #ö˛udê
	~"mmu.h
"

5 654 #ö˛udê
	~"¥oc.h
"

6 655 #ö˛udê
	~"x86.h
"

7 656 #ö˛udê
	~"sysˇŒ.h
"

17 2666 
„tchöt
(
¥oc
 *
p
, 
uöt
 
addr
, *
ù
)

19 2668 if(
	gaddr
 >
p
->
sz
 || 
addr
+4 >Ö->sz)

21 2670 *
	gù
 = *(*)(
p
->
mem
 + 
addr
);

29 2678 
„tch°r
(
¥oc
 *
p
, 
uöt
 
addr
, **
µ
)

31 2680 *
	gs
, *
	gï
;

33 2682 if(
	gaddr
 >
p
->
sz
)

35 2684 *
	gµ
 = 
p
->
mem
 + 
addr
;

36 2685 
	gï
 = 
p
->
mem
 +Ö->
sz
;

37 2686 
	gs
 = *
µ
; s < 
	gï
; s++)

38 2687 if(*
	gs
 == 0)

39 2688  
s
 - *
µ
;

45 2694 
¨göt
(
n
, *
ù
)

47 2696  
„tchöt
(
˝
, cp->
tf
->
e•
 + 4 + 4*
n
, 
ù
);

55 2704 
¨g±r
(
n
, **
µ
, 
size
)

57 2706 
	gi
;

59 2708 if(
¨göt
(
n
, &
i
) < 0)

61 2710 if((
	guöt
)
	gi
 >
˝
->
sz
 || (
uöt
)
i
+
size
 >= cp->sz)

63 2712 *
	gµ
 = 
˝
->
mem
 + 
i
;

72 2721 
¨g°r
(
n
, **
µ
)

74 2723 
	gaddr
;

75 2724 if(
¨göt
(
n
, &
addr
) < 0)

77 2726  
„tch°r
(
˝
, 
addr
, 
µ
);

80 2729 
sys_chdú
();

81 2730 
sys_˛o£
();

82 2731 
sys_dup
();

83 2732 
sys_exec
();

84 2733 
sys_exô
();

85 2734 
sys_f‹k
();

86 2735 
sys_f°©
();

87 2736 
sys_gëpid
();

88 2737 
sys_kûl
();

89 2738 
sys_lök
();

90 2739 
sys_mkdú
();

91 2740 
sys_mknod
();

92 2741 
sys_›í
();

93 2742 
sys_pùe
();

94 2743 
sys_ªad
();

95 2744 
sys_sbrk
();

96 2745 
sys_¶ìp
();

97 2746 
sys_u∆ök
();

98 2747 
sys_waô
();

99 2748 
sys_wrôe
();

101 2750 (*
sysˇŒs
[])() = {

102 2751 [
SYS_chdú
] 
sys_chdú
,

103 2752 [
SYS_˛o£
] 
sys_˛o£
,

104 2753 [
SYS_dup
] 
sys_dup
,

105 2754 [
SYS_exec
] 
sys_exec
,

106 2755 [
SYS_exô
] 
sys_exô
,

107 2756 [
SYS_f‹k
] 
sys_f‹k
,

108 2757 [
SYS_f°©
] 
sys_f°©
,

109 2758 [
SYS_gëpid
] 
sys_gëpid
,

110 2759 [
SYS_kûl
] 
sys_kûl
,

111 2760 [
SYS_lök
] 
sys_lök
,

112 2761 [
SYS_mkdú
] 
sys_mkdú
,

113 2762 [
SYS_mknod
] 
sys_mknod
,

114 2763 [
SYS_›í
] 
sys_›í
,

115 2764 [
SYS_pùe
] 
sys_pùe
,

116 2765 [
SYS_ªad
] 
sys_ªad
,

117 2766 [
SYS_sbrk
] 
sys_sbrk
,

118 2767 [
SYS_¶ìp
] 
sys_¶ìp
,

119 2768 [
SYS_u∆ök
] 
sys_u∆ök
,

120 2769 [
SYS_waô
] 
sys_waô
,

121 2770 [
SYS_wrôe
] 
sys_wrôe
,

122 2771 
	}
};

125 2774 
sysˇŒ
()

127 2776 
	gnum
;

129 2778 
	gnum
 = 
˝
->
tf
->
óx
;

130 2779 if(
	gnum
 >0 && 
num
 < 
NELEM
(
sysˇŒs
) && syscalls[num])

131 2780 
˝
->
tf
->
óx
 = 
sysˇŒs
[
num
]();

133 2782 
˝rötf
("%d %s: unknown sys call %d\n",

134 2783 
˝
->
pid
, cp->
«me
, 
num
);

135 2784 
	g˝
->
	gtf
->
	góx
 = -1;

	@fmt/syscall.h

2 601 #deföê
	#SYS_f‹k
 1

	)

3 602 #deföê
	#SYS_exô
 2

	)

4 603 #deföê
	#SYS_waô
 3

	)

5 604 #deföê
	#SYS_pùe
 4

	)

6 605 #deföê
	#SYS_wrôe
 5

	)

7 606 #deföê
	#SYS_ªad
 6

	)

8 607 #deföê
	#SYS_˛o£
 7

	)

9 608 #deföê
	#SYS_kûl
 8

	)

10 609 #deföê
	#SYS_exec
 9

	)

11 610 #deföê
	#SYS_›í
 10

	)

12 611 #deföê
	#SYS_mknod
 11

	)

13 612 #deföê
	#SYS_u∆ök
 12

	)

14 613 #deföê
	#SYS_f°©
 13

	)

15 614 #deföê
	#SYS_lök
 14

	)

16 615 #deföê
	#SYS_mkdú
 15

	)

17 616 #deföê
	#SYS_chdú
 16

	)

18 617 #deföê
	#SYS_dup
 17

	)

19 618 #deföê
	#SYS_gëpid
 18

	)

20 619 #deföê
	#SYS_sbrk
 19

	)

21 620 #deföê
	#SYS_¶ìp
 20

	)

	@fmt/sysfile.c

1 500 #ö˛udê
	~"ty≥s.h
"

2 501 #ö˛udê
	~"defs.h
"

3 502 #ö˛udê
	~"∑øm.h
"

4 503 #ö˛udê
	~"°©.h
"

5 504 #ö˛udê
	~"mmu.h
"

6 505 #ö˛udê
	~"¥oc.h
"

7 506 #ö˛udê
	~"fs.h
"

8 507 #ö˛udê
	~"fsv¨.h
"

9 508 #ö˛udê
	~"fûe.h
"

10 509 #ö˛udê
	~"f˙é.h
"

15 4514 
¨gfd
(
n
, *
pfd
, 
fûe
 **
pf
)

17 4516 
	gfd
;

18 4517 
fûe
 *
	gf
;

20 4519 if(
¨göt
(
n
, &
fd
) < 0)

22 4521 if(
	gfd
 < 0 || fd >
NOFILE
 || (
f
=
˝
->
ofûe
[
fd
]) == 0)

24 4523 if(
	gpfd
)

25 4524 *
	gpfd
 = 
fd
;

26 4525 if(
	gpf
)

27 4526 *
	gpf
 = 
f
;

34 4533 
fdÆloc
(
fûe
 *
f
)

36 4535 
	gfd
;

38 4537 
	gfd
 = 0; fd < 
	gNOFILE
; fd++){

39 4538 if(
	g˝
->
	gofûe
[
fd
] == 0){

40 4539 
˝
->
ofûe
[
fd
] = 
f
;

41 4540  
	gfd
;

52 4551 
sys_ªad
()

54 4553 
fûe
 *
	gf
;

55 4554 
	gn
;

56 4555 *
	gp
;

58 4557 if(
¨gfd
(0, 0, &
f
Ë< 0 || 
¨göt
(2, &
n
Ë< 0 || 
¨g±r
(1, &
p
,Ç) < 0)

60 4559  
fûîód
(
f
, 
p
, 
n
);

64 4563 
sys_wrôe
()

66 4565 
fûe
 *
	gf
;

67 4566 
	gn
;

68 4567 *
	gp
;

70 4569 if(
¨gfd
(0, 0, &
f
Ë< 0 || 
¨göt
(2, &
n
Ë< 0 || 
¨g±r
(1, &
p
,Ç) < 0)

72 4571  
fûewrôe
(
f
, 
p
, 
n
);

76 4575 
sys_dup
()

78 4577 
fûe
 *
	gf
;

79 4578 
	gfd
;

81 4580 if(
¨gfd
(0, 0, &
f
) < 0)

83 4582 if((
	gfd
=
fdÆloc
(
f
)) < 0)

85 4584 
fûedup
(
f
);

86 4585  
	gfd
;

90 4589 
sys_˛o£
()

92 4591 
	gfd
;

93 4592 
fûe
 *
	gf
;

95 4594 if(
¨gfd
(0, &
fd
, &
f
) < 0)

97 4596 
	g˝
->
	gofûe
[
fd
] = 0;

98 4597 
fûe˛o£
(
f
);

102 4601 
sys_f°©
()

104 4603 
fûe
 *
	gf
;

105 4604 
°©
 *
	g°
;

107 4606 if(
¨gfd
(0, 0, &
f
Ë< 0 || 
¨g±r
(1, (*)&
°
, (*st)) < 0)

109 4608  
fûe°©
(
f
, 
°
);

114 4613 
sys_lök
()

116 4615 
	g«me
[
DIRSIZ
], *
	g√w
, *
	gﬁd
;

117 4616 
öode
 *
	gdp
, *
	gù
;

119 4618 if(
¨g°r
(0, &
ﬁd
Ë< 0 ||árg°r(1, &
√w
) < 0)

121 4620 if((
	gù
 = 
«mei
(
ﬁd
)) == 0)

123 4622 
ûock
(
ù
);

124 4623 if(
	gù
->
	gty≥
 =
T_DIR
){

125 4624 
iu∆ockput
(
ù
);

128 4627 
	gù
->
	g∆ök
++;

129 4628 
iupd©e
(
ù
);

130 4629 
iu∆ock
(
ù
);

132 4631 if((
	gdp
 = 
«meù¨ít
(
√w
, 
«me
)) == 0)

133 4632 
bad
;

134 4633 
ûock
(
dp
);

135 4634 if(
	gdp
->
	gdev
 !
ù
->
dev
 || 
dúlök
(
dp
, 
«me
, ip->
öum
) < 0)

136 4635 
	gbad
;

137 4636 
iu∆ockput
(
dp
);

138 4637 
ùut
(
ù
);

141 4640 
	gbad
:

142 4641 if(
dp
)

143 4642 
iu∆ockput
(
dp
);

144 4643 
ûock
(
ù
);

145 4644 
	gù
->
	g∆ök
--;

146 4645 
iupd©e
(
ù
);

147 4646 
iu∆ockput
(
ù
);

153 4652 
isdúem±y
(
öode
 *
dp
)

155 4654 
	goff
;

156 4655 
dúít
 
	gde
;

158 4657 
	goff
=2*(
de
); off<
	gdp
->
	gsize
; off+=(de)){

159 4658 if(
ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

160 4659 
∑nic
("isdirempty:Ñeadi");

161 4660 if(
	gde
.
	göum
 != 0)

168 4667 
sys_u∆ök
()

170 4669 
öode
 *
	gù
, *
	gdp
;

171 4670 
dúít
 
	gde
;

172 4671 
	g«me
[
DIRSIZ
], *
	g∑th
;

173 4672 
uöt
 
	goff
;

175 4674 if(
¨g°r
(0, &
∑th
) < 0)

177 4676 if((
	gdp
 = 
«meù¨ít
(
∑th
, 
«me
)) == 0)

179 4678 
ûock
(
dp
);

182 4681 if(
«mecmp
(
«me
, ".") == 0 ||Çamecmp(name, "..") == 0){

183 4682 
iu∆ockput
(
dp
);

187 4686 if((
	gù
 = 
dúlookup
(
dp
, 
«me
, &
off
)) == 0){

188 4687 
iu∆ockput
(
dp
);

191 4690 
ûock
(
ù
);

193 4692 if(
	gù
->
	g∆ök
 < 1)

194 4693 
∑nic
("unlink:Çlink < 1");

195 4694 if(
	gù
->
	gty≥
 =
T_DIR
 && !
isdúem±y
(
ù
)){

196 4695 
iu∆ockput
(
ù
);

197 4696 
iu∆ockput
(
dp
);

201 4700 
mem£t
(&
de
, 0, (de));

202 4701 if(
wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

203 4702 
∑nic
("unlink: writei");

204 4703 
iu∆ockput
(
dp
);

206 4705 
	gù
->
	g∆ök
--;

207 4706 
iupd©e
(
ù
);

208 4707 
iu∆ockput
(
ù
);

212 4711 
	göode
*

213 4712 
¸óã
(*
∑th
, 
ˇ√xi°
, 
ty≥
, 
maj‹
, 
mö‹
)

215 4714 
uöt
 
	goff
;

216 4715 
öode
 *
	gù
, *
	gdp
;

217 4716 
	g«me
[
DIRSIZ
];

219 4718 if((
	gdp
 = 
«meù¨ít
(
∑th
, 
«me
)) == 0)

221 4720 
ûock
(
dp
);

223 4722 if(
	gˇ√xi°
 && (
	gù
 = 
dúlookup
(
dp
, 
«me
, &
off
)) != 0){

224 4723 
iu∆ockput
(
dp
);

225 4724 
ûock
(
ù
);

226 4725 if(
	gù
->
	gty≥
 !
ty≥
 || 
ù
->
maj‹
 !maj‹ || ip->
mö‹
 != minor){

227 4726 
iu∆ockput
(
ù
);

230 4729  
	gù
;

233 4732 if((
	gù
 = 
üŒoc
(
dp
->
dev
, 
ty≥
)) == 0){

234 4733 
iu∆ockput
(
dp
);

237 4736 
ûock
(
ù
);

238 4737 
	gù
->
	gmaj‹
 = 
maj‹
;

239 4738 
	gù
->
	gmö‹
 = 
mö‹
;

240 4739 
	gù
->
	g∆ök
 = 1;

241 4740 
iupd©e
(
ù
);

243 4742 if(
dúlök
(
dp
, 
«me
, 
ù
->
öum
) < 0){

244 4743 
	gù
->
	g∆ök
 = 0;

245 4744 
iu∆ockput
(
ù
);

246 4745 
iu∆ockput
(
dp
);

251 4750 if(
	gty≥
 =
T_DIR
){

252 4751 
dp
->
∆ök
++;

253 4752 
iupd©e
(
dp
);

255 4754 if(
dúlök
(
ù
, ".", ip->
öum
Ë< 0 || dúlök(ù, "..", 
dp
->inum) < 0)

256 4755 
∑nic
("create dots");

258 4757 
iu∆ockput
(
dp
);

259 4758  
	gù
;

263 4762 
sys_›í
()

265 4764 *
	g∑th
;

266 4765 
	gfd
, 
	gomode
;

267 4766 
fûe
 *
	gf
;

268 4767 
öode
 *
	gù
;

270 4769 if(
¨g°r
(0, &
∑th
Ë< 0 || 
¨göt
(1, &
omode
) < 0)

273 4772 if(
	gomode
 & 
	gO_CREATE
){

274 4773 if((
	gù
 = 
¸óã
(
∑th
, 1, 
T_FILE
, 0, 0)) == 0)

277 4776 if((
	gù
 = 
«mei
(
∑th
)) == 0)

279 4778 
ûock
(
ù
);

280 4779 if(
	gù
->
	gty≥
 =
T_DIR
 && (
omode
 & (
O_RDWR
|
O_WRONLY
))){

281 4780 
iu∆ockput
(
ù
);

286 4785 if((
	gf
 = 
fûóŒoc
()Ë=0 || (
fd
 = 
fdÆloc
(
f
)) < 0){

287 4786 if(
f
)

288 4787 
fûe˛o£
(
f
);

289 4788 
iu∆ockput
(
ù
);

292 4791 
iu∆ock
(
ù
);

294 4793 
	gf
->
	gty≥
 = 
FD_INODE
;

295 4794 
	gf
->
	gù
 = 
ù
;

296 4795 
	gf
->
	goff
 = 0;

297 4796 
	gf
->
	gªadabÀ
 = !(
omode
 & 
O_WRONLY
);

298 4797 
	gf
->
	gwrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

301 4800  
	gfd
;

305 4804 
sys_mknod
()

307 4806 
öode
 *
	gù
;

308 4807 *
	g∑th
;

309 4808 
	gÀn
;

310 4809 
	gmaj‹
, 
	gmö‹
;

312 4811 if((
	gÀn
=
¨g°r
(0, &
∑th
)) < 0 ||

313 4812 
¨göt
(1, &
maj‹
) < 0 ||

314 4813 
¨göt
(2, &
mö‹
) < 0 ||

315 4814 (
	gù
 = 
¸óã
(
∑th
, 0, 
T_DEV
, 
maj‹
, 
mö‹
)) == 0)

317 4816 
iu∆ockput
(
ù
);

322 4821 
sys_mkdú
()

324 4823 *
	g∑th
;

325 4824 
öode
 *
	gù
;

327 4826 if(
¨g°r
(0, &
∑th
Ë< 0 || (
	gù
 = 
¸óã
’©h, 0, 
T_DIR
, 0, 0)) == 0)

329 4828 
iu∆ockput
(
ù
);

334 4833 
sys_chdú
()

336 4835 *
	g∑th
;

337 4836 
öode
 *
	gù
;

339 4838 if(
¨g°r
(0, &
∑th
Ë< 0 || (
	gù
 = 
«mei
(path)) == 0)

341 4840 
ûock
(
ù
);

342 4841 if(
	gù
->
	gty≥
 !
T_DIR
){

343 4842 
iu∆ockput
(
ù
);

346 4845 
iu∆ock
(
ù
);

347 4846 
ùut
(
˝
->
cwd
);

348 4847 
	g˝
->
	gcwd
 = 
ù
;

352 4851 
sys_exec
()

354 4853 *
	g∑th
, *
	g¨gv
[20];

355 4854 
	gi
;

356 4855 
uöt
 
	gu¨gv
, 
	gu¨g
;

358 4857 if(
¨g°r
(0, &
∑th
Ë< 0 || 
¨göt
(1, (*)&
u¨gv
) < 0)

360 4859 
mem£t
(
¨gv
, 0, (argv));

361 4860 
	gi
=0;; i++){

362 4861 if(
	gi
 >
NELEM
(
¨gv
))

364 4863 if(
„tchöt
(
˝
, 
u¨gv
+4*
i
, (*)&
u¨g
) < 0)

366 4865 if(
	gu¨g
 == 0){

367 4866 
¨gv
[
i
] = 0;

370 4869 if(
„tch°r
(
˝
, 
u¨g
, &
¨gv
[
i
]) < 0)

373 4872  
exec
(
∑th
, 
¨gv
);

377 4876 
sys_pùe
()

379 4878 *
	gfd
;

380 4879 
fûe
 *
	grf
, *
	gwf
;

381 4880 
	gfd0
, 
	gfd1
;

383 4882 if(
¨g±r
(0, (*)&
fd
, 2*(fd[0])) < 0)

385 4884 if(
pùóŒoc
(&
rf
, &
wf
) < 0)

387 4886 
	gfd0
 = -1;

388 4887 if((
	gfd0
 = 
fdÆloc
(
rf
)Ë< 0 || (
fd1
 = fdÆloc(
wf
)) < 0){

389 4888 if(
fd0
 >= 0)

390 4889 
˝
->
ofûe
[
fd0
] = 0;

391 4890 
fûe˛o£
(
rf
);

392 4891 
fûe˛o£
(
wf
);

395 4894 
	gfd
[0] = 
fd0
;

396 4895 
	gfd
[1] = 
fd1
;

	@fmt/sysproc.c

1 800 #ö˛udê
	~"ty≥s.h
"

2 801 #ö˛udê
	~"defs.h
"

3 802 #ö˛udê
	~"∑øm.h
"

4 803 #ö˛udê
	~"mmu.h
"

5 804 #ö˛udê
	~"¥oc.h
"

8 2807 
sys_f‹k
()

10 2809 
	gpid
;

11 2810 
¥oc
 *
	g≈
;

13 2812 if((
	g≈
 = 
c›y¥oc
(
˝
)) == 0)

15 2814 
	gpid
 = 
≈
->
pid
;

16 2815 
	g≈
->
	g°©e
 = 
RUNNABLE
;

17 2816  
	gpid
;

21 2820 
sys_exô
()

23 2822 
exô
();

28 2827 
sys_waô
()

30 2829  
waô
();

34 2833 
sys_kûl
()

36 2835 
	gpid
;

38 2837 if(
¨göt
(0, &
pid
) < 0)

40 2839  
kûl
(
pid
);

44 2843 
sys_gëpid
()

46 2845  
	g˝
->
	gpid
;

52 2851 
sys_sbrk
()

54 2853 
	gaddr
;

55 2854 
	gn
;

57 2856 if(
¨göt
(0, &
n
) < 0)

59 2858 if((
	gaddr
 = 
grow¥oc
(
n
)) < 0)

61 2860  
	gaddr
;

65 2864 
sys_¶ìp
()

67 2866 
	gn
, 
	gticks0
;

69 2868 if(
¨göt
(0, &
n
) < 0)

71 2870 
acquúe
(&
tick¶ock
);

72 2871 
	gticks0
 = 
ticks
;

73 2872 
	gticks
 - 
	gticks0
 < 
	gn
){

74 2873 if(
	g˝
->
	gkûÀd
){

75 2874 
ªÀa£
(&
tick¶ock
);

78 2877 
¶ìp
(&
ticks
, &
tick¶ock
);

80 2879 
ªÀa£
(&
tick¶ock
);

	@fmt/timer.c

5 504 #ö˛udê
	~"ty≥s.h
"

6 505 #ö˛udê
	~"defs.h
"

7 506 #ö˛udê
	~"å≠s.h
"

8 507 #ö˛udê
	~"x86.h
"

10 509 #deföê
	#IO_TIMER1
 0x040

11 6510

	)

16 515 #deföê
	#TIMER_FREQ
 1193182

	)

17 516 #deföê
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

19 518 #deföê
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

20 519 #deföê
	#TIMER_SEL0
 0x00

21 520 #deföê
	#TIMER_RATEGEN
 0x04

22 521 #deföê
	#TIMER_16BIT
 0x30

23 6522

	)

25 6524 
timî_öô
()

28 6527 
outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

29 6528 
outb
(
IO_TIMER1
, 
TIMER_DIV
(100) % 256);

30 6529 
outb
(
IO_TIMER1
, 
TIMER_DIV
(100) / 256);

31 6530 
pic_íabÀ
(
IRQ_TIMER
);

	@fmt/trap.c

1 500 #ö˛udê
	~"ty≥s.h
"

2 501 #ö˛udê
	~"defs.h
"

3 502 #ö˛udê
	~"∑øm.h
"

4 503 #ö˛udê
	~"mmu.h
"

5 504 #ö˛udê
	~"¥oc.h
"

6 505 #ö˛udê
	~"x86.h
"

7 506 #ö˛udê
	~"å≠s.h
"

8 507 #ö˛udê
	~"•ölock.h
"

11 2510 
g©edesc
 
	gidt
[256];

12 2511 
uöt
 
ve˘‹s
[];

13 2512 
•ölock
 
	gtick¶ock
;

14 2513 
	gticks
;

17 2516 
tvöô
()

19 2518 
	gi
;

21 2520 
	gi
 = 0; i < 256; i++)

22 2521 
SETGATE
(
idt
[
i
], 0, 
SEG_KCODE
<<3, 
ve˘‹s
[i], 0);

23 2522 
SETGATE
(
idt
[
T_SYSCALL
], 1, 
SEG_KCODE
<<3, 
ve˘‹s
[T_SYSCALL], 
DPL_USER
);

25 2524 
öôlock
(&
tick¶ock
, "time");

29 2528 
idtöô
()

31 2530 
lidt
(
idt
, (idt));

35 2534 
å≠
(
å≠‰ame
 *
tf
)

37 2536 if(
	gtf
->
	gå≠no
 =
T_SYSCALL
){

38 2537 if(
˝
->
kûÀd
)

39 2538 
exô
();

40 2539 
	g˝
->
	gtf
 = 
tf
;

41 2540 
sysˇŒ
();

42 2541 if(
	g˝
->
	gkûÀd
)

43 2542 
exô
();

47 2546 
	gtf
->
	gå≠no
){

48 2547 
	gIRQ_OFFSET
 + 
	gIRQ_TIMER
:

49 2548 if(
˝u
() == 0){

50 2549 
acquúe
(&
tick¶ock
);

51 2550 
	gticks
++;

52 2551 
wakeup
(&
ticks
);

53 2552 
ªÀa£
(&
tick¶ock
);

55 2554 
œpic_eoi
();

57 2556 
	gIRQ_OFFSET
 + 
	gIRQ_IDE
:

58 2557 
ide_öå
();

59 2558 
œpic_eoi
();

61 2560 
	gIRQ_OFFSET
 + 
	gIRQ_KBD
:

62 2561 
kbd_öå
();

63 2562 
œpic_eoi
();

65 2564 
	gIRQ_OFFSET
 + 
	gIRQ_SPURIOUS
:

66 2565 
˝rötf
("cpu%d: spurious interruptát %x:%x\n",

67 2566 
˝u
(), 
tf
->
cs
,Åf->
eù
);

68 2567 
œpic_eoi
();

72 2571 if(
˝
 =0 || (
tf
->
cs
&3) == 0){

74 2573 
˝rötf
("unexpectedÅrap %d from cpu %dÉip %x\n",

75 2574 
tf
->
å≠no
, 
˝u
(),Åf->
eù
);

76 2575 
∑nic
("trap");

79 2578 
˝rötf
("pid %d %s:Årap %dÉrr %d on cpu %dÉip %x -- killÖroc\n",

80 2579 
˝
->
pid
, cp->
«me
, 
tf
->
å≠no
,Åf->
îr
, 
˝u
(),Åf->
eù
);

81 2580 
	g˝
->
	gkûÀd
 = 1;

87 2586 if(
	g˝
 && cp->
	gkûÀd
 && (
	gtf
->
	gcs
&3Ë=
DPL_USER
)

88 2587 
exô
();

92 2591 if(
	g˝
 && cp->
	g°©e
 =
RUNNING
 && 
tf
->
å≠no
 =
IRQ_OFFSET
+
IRQ_TIMER
)

93 2592 
yõld
();

	@fmt/trapasm.S

1 2450 .
	gãxt


3 2452 .
£t
 
	gSEG_KDATA_SEL
, 0x10 #£À˘‹ 
	gSEG_KDATA


5 2454 #ve˘‹s.
S
 
£nds
 
Æl
 
å≠s
 
	ghîe
.

6 2455 .
globl
 
	gÆ…øps


7 2456 
	gÆ…øps
:

8 2457 #Buûd 
å≠
 
‰ame
.

9 2458 
pushl
 %
ds


10 2459 
pushl
 %
es


11 2460 
pushÆ


13 2462 #Së 
up
 
d©a
 
£gmíts
.

14 2463 
movl
 
$SEG_KDATA_SEL
, %
	góx


15 2464 
	gmovw
 %
	gax
,%
	gds


16 2465 
	gmovw
 %
	gax
,%
	ges


18 2467 #CÆ»
å≠
(
tf
), 
whîe
 
	gtf
=%
e•


19 2468 
pushl
 %
e•


20 2469 
ˇŒ
 
å≠


21 2470 
addl
 
$4
, %
	ge•


23 2472 #Rëu∫ 
ÁŒs
 
through
 
to
 
	gå≠ªt
...

24 2473 .
globl
 
	gå≠ªt


25 2474 
	gå≠ªt
:

26 2475 
p›Æ


27 2476 
p›l
 %
es


28 2477 
p›l
 %
ds


29 2478 
addl
 
$0x8
, %
	ge•
 #å≠nÿ
™d
 
	gîrcode


30 2479 
	gúë


32 2481 #A 
f‹ked
 
¥o˚ss
 
swôches
 
to
 
u£r
 
mode
 
by
 
	gˇŒög


33 2482 #f‹kªt1(
	gtf
), 
whîe
 
tf
 
is
 
the
 
å≠
 
‰ame
 
to
 
	gu£
.

34 2483 .
globl
 
	gf‹kªt1


35 2484 
	gf‹kªt1
:

36 2485 
movl
 4(%
e•
), %
	ge•


37 2486 
jmp
 
	gå≠ªt


	@fmt/traps.h

4 353 #deföê
	#T_DIVIDE
 0

5 354 #deföê
	#T_DEBUG
 1

6 355 #deföê
	#T_NMI
 2

7 356 #deföê
	#T_BRKPT
 3

8 357 #deföê
	#T_OFLOW
 4

9 358 #deföê
	#T_BOUND
 5

10 359 #deföê
	#T_ILLOP
 6

11 360 #deföê
	#T_DEVICE
 7

12 361 #deföê
	#T_DBLFLT
 8

14 363 #deföê
	#T_TSS
 10

15 364 #deföê
	#T_SEGNP
 11

16 365 #deföê
	#T_STACK
 12

17 366 #deföê
	#T_GPFLT
 13

18 367 #deföê
	#T_PGFLT
 14

20 369 #deföê
	#T_FPERR
 16

21 370 #deföê
	#T_ALIGN
 17

22 371 #deföê
	#T_MCHK
 18

23 372 #deföê
	#T_SIMDERR
 19

24 2373

	)

27 376 #deföê
	#T_SYSCALL
 48

28 377 #deföê
	#T_DEFAULT
 500

29 2378

	)

30 379 #deföê
	#IRQ_OFFSET
 32

31 2380

	)

32 381 #deföê
	#IRQ_TIMER
 0

	)

33 382 #deföê
	#IRQ_KBD
 1

	)

34 383 #deföê
	#IRQ_IDE
 14

	)

35 384 #deföê
	#IRQ_ERROR
 19

	)

36 385 #deföê
	#IRQ_SPURIOUS
 31

	)

	@fmt/types.h

1 0100 
	tuöt
;

2 0101 
	tush‹t
;

3 0102 
	tuch¨
;

	@fmt/usys.S

1 700 #ö˛udê
	~"sysˇŒ.h
"

2 701 #ö˛udê
	~"å≠s.h
"

4 703 #deföê
	#STUB
(
«me
) \

5 6704 .
globl
 
«me
; \

6 6705 
«me
: \

7 6706 
movl
 
$SYS_
 ## 
«me
, %
óx
; \

8 6707 
$T_SYSCALL
; \

9 6708 
ªt


	)

11 6710 
STUB
(
f‹k
)

12 6711 
STUB
(
exô
)

13 6712 
STUB
(
waô
)

14 6713 
STUB
(
pùe
)

15 6714 
STUB
(
ªad
)

16 6715 
STUB
(
wrôe
)

17 6716 
STUB
(
˛o£
)

18 6717 
STUB
(
kûl
)

19 6718 
STUB
(
exec
)

20 6719 
STUB
(
›í
)

21 6720 
STUB
(
mknod
)

22 6721 
STUB
(
u∆ök
)

23 6722 
STUB
(
f°©
)

24 6723 
STUB
(
lök
)

25 6724 
STUB
(
mkdú
)

26 6725 
STUB
(
chdú
)

27 6726 
STUB
(
dup
)

28 6727 
STUB
(
gëpid
)

29 6728 
STUB
(
sbrk
)

30 6729 
STUB
(
¶ìp
)

	@fmt/x86.h

3 0352 
ölöe
 
	guch¨


4 0353 
öb
(
ush‹t
 
p‹t
)

6 0355 
uch¨
 
	gd©a
;

8 0357 
asm
 vﬁ©ûe("ö %1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

9 0358  
	gd©a
;

12 0361 
ölöe
 

13 0362 
ö¶
(
p‹t
, *
addr
, 
˙t
)

15 0364 
asm
 volatile("cld\n\trepne\n\tinsl" :

16 0365 "=D" (
addr
), "=c" (
	g˙t
) :

17 0366 "d" (
p‹t
), "0" (
	gaddr
), "1" (
	g˙t
) :

21 0370 
ölöe
 

22 0371 
outb
(
ush‹t
 
p‹t
, 
uch¨
 
d©a
)

24 0373 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
	gp‹t
));

27 0376 
ölöe
 

28 0377 
outw
(
ush‹t
 
p‹t
, ush‹à
d©a
)

30 0379 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
	gp‹t
));

33 0382 
ölöe
 

34 0383 
out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

36 0385 
asm
 volatile("cld\n\trepne\n\toutsl" :

37 0386 "=S" (
addr
), "=c" (
	g˙t
) :

38 0387 "d" (
p‹t
), "0" (
	gaddr
), "1" (
	g˙t
) :

42 0391 
ölöe
 
	guöt


43 0392 
ªad_ebp
()

45 0394 
uöt
 
	gebp
;

47 0396 
asm
 vﬁ©ûe("mov»%%ebp, %0" : "˜" (
ebp
));

48 0397  
	gebp
;

51 0400 
	g£gdesc
;

53 0402 
ölöe
 

54 0403 
lgdt
(
£gdesc
 *
p
, 
size
)

56 0405 vﬁ©ûê
ush‹t
 
	gpd
[3];

58 0407 
	gpd
[0] = 
size
-1;

59 0408 
	gpd
[1] = (
uöt
)
p
;

60 0409 
	gpd
[2] = (
uöt
)
p
 >> 16;

62 0411 
asm
 vﬁ©ûe("lgdà(%0)" : : "r" (
pd
));

65 0414 
	gg©edesc
;

67 0416 
ölöe
 

68 0417 
lidt
(
g©edesc
 *
p
, 
size
)

70 0419 vﬁ©ûê
ush‹t
 
	gpd
[3];

72 0421 
	gpd
[0] = 
size
-1;

73 0422 
	gpd
[1] = (
uöt
)
p
;

74 0423 
	gpd
[2] = (
uöt
)
p
 >> 16;

76 0425 
asm
 vﬁ©ûe("lidà(%0)" : : "r" (
pd
));

79 0428 
ölöe
 

80 0429 
…r
(
ush‹t
 
£l
)

82 0431 
asm
 vﬁ©ûe("…∏%0" : : "r" (
£l
));

85 0434 
ölöe
 
	guöt


86 0435 
ªad_eÊags
()

88 0437 
uöt
 
	geÊags
;

89 0438 
asm
 vﬁ©ûe("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

90 0439  
	geÊags
;

93 0442 
ölöe
 

94 0443 
wrôe_eÊags
(
uöt
 
eÊags
)

96 0445 
asm
 vﬁ©ûe("push»%0;Ö›Ê" : : "r" (
eÊags
));

101 0450 
ölöe
 
	guöt


102 0451 
xchg
(vﬁ©ûê
uöt
 *
addr
, uöà
√wvÆ
)

104 0453 
uöt
 
	gªsu…
;

107 0456 
asm
 volatile("lock; xchgl %0, %1" :

108 0457 "+m" (*
addr
), "˜" (
	gªsu…
) :

109 0458 "1" (
√wvÆ
) :

111 0460  
	gªsu…
;

114 0463 
ölöe
 

115 0464 
˛i
()

117 0466 
asm
 volatile("cli");

120 0469 
ölöe
 

121 0470 
°i
()

123 0472 
asm
 volatile("sti");

128 0477 
	så≠‰ame
 {

130 0479 
uöt
 
	medi
;

131 0480 
uöt
 
	mesi
;

132 0481 
uöt
 
	mebp
;

133 0482 
uöt
 
	m€•
;

134 0483 
uöt
 
	mebx
;

135 0484 
uöt
 
	medx
;

136 0485 
uöt
 
	mecx
;

137 0486 
uöt
 
	móx
;

140 0489 
ush‹t
 
	mes
;

141 0490 
ush‹t
 
	m∑ddög1
;

142 0491 
ush‹t
 
	mds
;

143 0492 
ush‹t
 
	m∑ddög2
;

144 0493 
uöt
 
	må≠no
;

147 0496 
uöt
 
	mîr
;

148 0497 
uöt
 
	meù
;

149 0498 
ush‹t
 
	mcs
;

150 0499 
ush‹t
 
	m∑ddög3
;

151 0500 
uöt
 
	meÊags
;

154 0503 
uöt
 
	me•
;

155 0504 
ush‹t
 
	mss
;

156 0505 
ush‹t
 
	m∑ddög4
;

	@forktest.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

9 
	$¥ötf
(
fd
, *
s
, ...)

11 
	`wrôe
(
fd
, 
s
, 
	`°æí
(s));

12 
	}
}

15 
	$f‹kã°
()

17 
n
, 
pid
;

19 
	`¥ötf
(1, "forkÅest\n");

21 
n
=0;Ç<1000;Ç++){

22 
pid
 = 
	`f‹k
();

23 if(
pid
 < 0)

25 if(
pid
 == 0)

26 
	`exô
();

29 if(
n
 == 1000){

30 
	`¥ötf
(1, "fork claimedÅo work 1000Åimes!\n");

31 
	`exô
();

34 ; 
n
 > 0;Ç--){

35 if(
	`waô
() < 0){

36 
	`¥ötf
(1, "wait stoppedÉarly\n");

37 
	`exô
();

41 if(
	`waô
() != -1){

42 
	`¥ötf
(1, "wait gotÅoo many\n");

43 
	`exô
();

46 
	`¥ötf
(1, "forkÅest OK\n");

47 
	}
}

50 
	$maö
()

52 
	`f‹kã°
();

53 
	`exô
();

54 
	}
}

	@fs.c

13 
	~"ty≥s.h
"

14 
	~"defs.h
"

15 
	~"∑øm.h
"

16 
	~"°©.h
"

17 
	~"mmu.h
"

18 
	~"¥oc.h
"

19 
	~"•ölock.h
"

20 
	~"buf.h
"

21 
	~"fs.h
"

22 
	~"fsv¨.h
"

23 
	~"dev.h
"

25 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

26 
ôrunc
(
öode
*);

30 
	$ªadsb
(
dev
, 
su≥rblock
 *
sb
)

32 
buf
 *
bp
;

34 
bp
 = 
	`bªad
(
dev
, 1);

35 
	`memmove
(
sb
, 
bp
->
d©a
, (*sb));

36 
	`bªl£
(
bp
);

37 
	}
}

41 
	$bzîo
(
dev
, 
bno
)

43 
buf
 *
bp
;

45 
bp
 = 
	`bªad
(
dev
, 
bno
);

46 
	`mem£t
(
bp
->
d©a
, 0, 
BSIZE
);

47 
	`bwrôe
(
bp
);

48 
	`bªl£
(
bp
);

49 
	}
}

54 
uöt


55 
	$bÆloc
(
uöt
 
dev
)

57 
b
, 
bi
, 
m
;

58 
buf
 *
bp
;

59 
su≥rblock
 
sb
;

61 
bp
 = 0;

62 
	`ªadsb
(
dev
, &
sb
);

63 
b
 = 0; b < 
sb
.
size
; b +
BPB
){

64 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

65 
bi
 = 0; bò< 
BPB
; bi++){

66 
m
 = 1 << (
bi
 % 8);

67 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0){

68 
bp
->
d©a
[
bi
/8] |
m
;

69 
	`bwrôe
(
bp
);

70 
	`bªl£
(
bp
);

71  
b
 + 
bi
;

74 
	`bªl£
(
bp
);

76 
	`∑nic
("balloc: out of blocks");

77 
	}
}

81 
	$b‰ì
(
dev
, 
uöt
 
b
)

83 
buf
 *
bp
;

84 
su≥rblock
 
sb
;

85 
bi
, 
m
;

87 
	`bzîo
(
dev
, 
b
);

89 
	`ªadsb
(
dev
, &
sb
);

90 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
.
nöodes
));

91 
bi
 = 
b
 % 
BPB
;

92 
m
 = 1 << (
bi
 % 8);

93 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0)

94 
	`∑nic
("freeing free block");

95 
bp
->
d©a
[
bi
/8] &~
m
;

96 
	`bwrôe
(
bp
);

97 
	`bªl£
(
bp
);

98 
	}
}

134 
•ölock
 
	mlock
;

135 
öode
 
	möode
[
NINODE
];

136 } 
	giˇche
;

139 
	$iöô
()

141 
	`öôlock
(&
iˇche
.
lock
, "icache.lock");

142 
	}
}

146 
öode
*

147 
	$igë
(
uöt
 
dev
, uöà
öum
)

149 
öode
 *
ù
, *
em±y
;

151 
	`acquúe
(&
iˇche
.
lock
);

154 
em±y
 = 0;

155 
ù
 = &
iˇche
.
öode
[0]; i∞< &iˇche.öode[
NINODE
]; ip++){

156 if(
ù
->
ªf
 > 0 && ip->
dev
 =dev && ip->
öum
 == inum){

157 
ù
->
ªf
++;

158 
	`ªÀa£
(&
iˇche
.
lock
);

159  
ù
;

161 if(
em±y
 =0 && 
ù
->
ªf
 == 0)

162 
em±y
 = 
ù
;

166 if(
em±y
 == 0)

167 
	`∑nic
("iget:Ço inodes");

169 
ù
 = 
em±y
;

170 
ù
->
dev
 = dev;

171 
ù
->
öum
 = inum;

172 
ù
->
ªf
 = 1;

173 
ù
->
Êags
 = 0;

174 
	`ªÀa£
(&
iˇche
.
lock
);

176  
ù
;

177 
	}
}

181 
öode
*

182 
	$idup
(
öode
 *
ù
)

184 
	`acquúe
(&
iˇche
.
lock
);

185 
ù
->
ªf
++;

186 
	`ªÀa£
(&
iˇche
.
lock
);

187  
ù
;

188 
	}
}

192 
	$ûock
(
öode
 *
ù
)

194 
buf
 *
bp
;

195 
döode
 *
dù
;

197 if(
ù
 =0 || ip->
ªf
 < 1)

198 
	`∑nic
("ilock");

200 
	`acquúe
(&
iˇche
.
lock
);

201 
ù
->
Êags
 & 
I_BUSY
)

202 
	`¶ìp
(
ù
, &
iˇche
.
lock
);

203 
ù
->
Êags
 |
I_BUSY
;

204 
	`ªÀa£
(&
iˇche
.
lock
);

206 if(!(
ù
->
Êags
 & 
I_VALID
)){

207 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

208 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

209 
ù
->
ty≥
 = 
dù
->type;

210 
ù
->
maj‹
 = 
dù
->major;

211 
ù
->
mö‹
 = 
dù
->minor;

212 
ù
->
∆ök
 = 
dù
->nlink;

213 
ù
->
size
 = 
dù
->size;

214 
	`memmove
(
ù
->
addrs
, 
dù
->addrs, (ip->addrs));

215 
	`bªl£
(
bp
);

216 
ù
->
Êags
 |
I_VALID
;

217 if(
ù
->
ty≥
 == 0)

218 
	`∑nic
("ilock:ÇoÅype");

220 
	}
}

224 
	$iu∆ock
(
öode
 *
ù
)

226 if(
ù
 =0 || !(ù->
Êags
 & 
I_BUSY
Ë|| ip->
ªf
 < 1)

227 
	`∑nic
("iunlock");

229 
	`acquúe
(&
iˇche
.
lock
);

230 
ù
->
Êags
 &~
I_BUSY
;

231 
	`wakeup
(
ù
);

232 
	`ªÀa£
(&
iˇche
.
lock
);

233 
	}
}

237 
	$ùut
(
öode
 *
ù
)

239 
	`acquúe
(&
iˇche
.
lock
);

240 if(
ù
->
ªf
 =1 && (ù->
Êags
 & 
I_VALID
Ë&& ip->
∆ök
 == 0){

242 if(
ù
->
Êags
 & 
I_BUSY
)

243 
	`∑nic
("iput busy");

244 
ù
->
Êags
 |
I_BUSY
;

245 
	`ªÀa£
(&
iˇche
.
lock
);

246 
	`ôrunc
(
ù
);

247 
ù
->
ty≥
 = 0;

248 
	`iupd©e
(
ù
);

249 
	`acquúe
(&
iˇche
.
lock
);

250 
ù
->
Êags
 &~
I_BUSY
;

251 
	`wakeup
(
ù
);

253 
ù
->
ªf
--;

254 
	`ªÀa£
(&
iˇche
.
lock
);

255 
	}
}

259 
	$iu∆ockput
(
öode
 *
ù
)

261 
	`iu∆ock
(
ù
);

262 
	`ùut
(
ù
);

263 
	}
}

266 
öode
*

267 
	$üŒoc
(
uöt
 
dev
, 
ty≥
)

269 
öum
;

270 
buf
 *
bp
;

271 
döode
 *
dù
;

272 
su≥rblock
 
sb
;

274 
	`ªadsb
(
dev
, &
sb
);

275 
öum
 = 1; inum < 
sb
.
nöodes
; inum++){

276 
bp
 = 
	`bªad
(
dev
, 
	`IBLOCK
(
öum
));

277 
dù
 = (
döode
*)
bp
->
d©a
 + 
öum
%
IPB
;

278 if(
dù
->
ty≥
 == 0){

279 
	`mem£t
(
dù
, 0, (*dip));

280 
dù
->
ty≥
 =Åype;

281 
	`bwrôe
(
bp
);

282 
	`bªl£
(
bp
);

283  
	`igë
(
dev
, 
öum
);

285 
	`bªl£
(
bp
);

287 
	`∑nic
("ialloc:Ço inodes");

288 
	}
}

292 
	$iupd©e
(
öode
 *
ù
)

294 
buf
 *
bp
;

295 
döode
 *
dù
;

297 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
));

298 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

299 
dù
->
ty≥
 = 
ù
->type;

300 
dù
->
maj‹
 = 
ù
->major;

301 
dù
->
mö‹
 = 
ù
->minor;

302 
dù
->
∆ök
 = 
ù
->nlink;

303 
dù
->
size
 = 
ù
->size;

304 
	`memmove
(
dù
->
addrs
, 
ù
->addrs, (ip->addrs));

305 
	`bwrôe
(
bp
);

306 
	`bªl£
(
bp
);

307 
	}
}

318 
uöt


319 
	$bm≠
(
öode
 *
ù
, 
uöt
 
bn
, 
Æloc
)

321 
uöt
 
addr
, *
a
;

322 
buf
 *
bp
;

324 if(
bn
 < 
NDIRECT
){

325 if((
addr
 = 
ù
->
addrs
[
bn
]) == 0){

326 if(!
Æloc
)

328 
ù
->
addrs
[
bn
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

330  
addr
;

332 
bn
 -
NDIRECT
;

334 if(
bn
 < 
NINDIRECT
){

336 if((
addr
 = 
ù
->
addrs
[
INDIRECT
]) == 0){

337 if(!
Æloc
)

339 
ù
->
addrs
[
INDIRECT
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

341 
bp
 = 
	`bªad
(
ù
->
dev
, 
addr
);

342 
a
 = (
uöt
*)
bp
->
d©a
;

344 if((
addr
 = 
a
[
bn
]) == 0){

345 if(!
Æloc
){

346 
	`bªl£
(
bp
);

349 
a
[
bn
] = 
addr
 = 
	`bÆloc
(
ù
->
dev
);

350 
	`bwrôe
(
bp
);

352 
	`bªl£
(
bp
);

353  
addr
;

356 
	`∑nic
("bmap: out ofÑange");

357 
	}
}

361 
	$ôrunc
(
öode
 *
ù
)

363 
i
, 
j
;

364 
buf
 *
bp
;

365 
uöt
 *
a
;

367 
i
 = 0; i < 
NDIRECT
; i++){

368 if(
ù
->
addrs
[
i
]){

369 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
i
]);

370 
ù
->
addrs
[
i
] = 0;

374 if(
ù
->
addrs
[
INDIRECT
]){

375 
bp
 = 
	`bªad
(
ù
->
dev
, ip->
addrs
[
INDIRECT
]);

376 
a
 = (
uöt
*)
bp
->
d©a
;

377 
j
 = 0; j < 
NINDIRECT
; j++){

378 if(
a
[
j
])

379 
	`b‰ì
(
ù
->
dev
, 
a
[
j
]);

381 
	`bªl£
(
bp
);

382 
ù
->
addrs
[
INDIRECT
] = 0;

385 
ù
->
size
 = 0;

386 
	`iupd©e
(
ù
);

387 
	}
}

391 
	$°©i
(
öode
 *
ù
, 
°©
 *
°
)

393 
°
->
dev
 = 
ù
->dev;

394 
°
->
öo
 = 
ù
->
öum
;

395 
°
->
ty≥
 = 
ù
->type;

396 
°
->
∆ök
 = 
ù
->nlink;

397 
°
->
size
 = 
ù
->size;

398 
	}
}

402 
	$ªadi
(
öode
 *
ù
, *
d°
, 
uöt
 
off
, uöà
n
)

404 
uöt
 
tŸ
, 
m
;

405 
buf
 *
bp
;

407 if(
ù
->
ty≥
 =
T_DEV
){

408 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
ªad
)

410  
devsw
[
ù
->
maj‹
].
	`ªad
(ù, 
d°
, 
n
);

413 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

415 if(
off
 + 
n
 > 
ù
->
size
)

416 
n
 = 
ù
->
size
 - 
off
;

418 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
d°
+=m){

419 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
, 0));

420 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

421 
	`memmove
(
d°
, 
bp
->
d©a
 + 
off
%
BSIZE
, 
m
);

422 
	`bªl£
(
bp
);

424  
n
;

425 
	}
}

429 
	$wrôei
(
öode
 *
ù
, *
§c
, 
uöt
 
off
, uöà
n
)

431 
uöt
 
tŸ
, 
m
;

432 
buf
 *
bp
;

434 if(
ù
->
ty≥
 =
T_DEV
){

435 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
wrôe
)

437  
devsw
[
ù
->
maj‹
].
	`wrôe
(ù, 
§c
, 
n
);

440 if(
off
 + 
n
 < off)

442 if(
off
 + 
n
 > 
MAXFILE
*
BSIZE
)

443 
n
 = 
MAXFILE
*
BSIZE
 - 
off
;

445 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
§c
+=m){

446 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
, 1));

447 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

448 
	`memmove
(
bp
->
d©a
 + 
off
%
BSIZE
, 
§c
, 
m
);

449 
	`bwrôe
(
bp
);

450 
	`bªl£
(
bp
);

453 if(
n
 > 0 && 
off
 > 
ù
->
size
){

454 
ù
->
size
 = 
off
;

455 
	`iupd©e
(
ù
);

457  
n
;

458 
	}
}

463 
	$«mecmp
(c⁄° *
s
, c⁄° *
t
)

465  
	`°∫cmp
(
s
, 
t
, 
DIRSIZ
);

466 
	}
}

471 
öode
*

472 
	$dúlookup
(
öode
 *
dp
, *
«me
, 
uöt
 *
poff
)

474 
uöt
 
off
, 
öum
;

475 
buf
 *
bp
;

476 
dúít
 *
de
;

478 if(
dp
->
ty≥
 !
T_DIR
)

479 
	`∑nic
("dirlookupÇot DIR");

481 
off
 = 0; of‡< 
dp
->
size
; of‡+
BSIZE
){

482 
bp
 = 
	`bªad
(
dp
->
dev
, 
	`bm≠
(dp, 
off
 / 
BSIZE
, 0));

483 
de
 = (
dúít
*)
bp
->
d©a
;

484 
de
 < (
dúít
*)(
bp
->
d©a
 + 
BSIZE
);

485 
de
++){

486 if(
de
->
öum
 == 0)

488 if(
	`«mecmp
(
«me
, 
de
->name) == 0){

490 if(
poff
)

491 *
poff
 = 
off
 + (
uch¨
*)
de
 - 
bp
->
d©a
;

492 
öum
 = 
de
->inum;

493 
	`bªl£
(
bp
);

494  
	`igë
(
dp
->
dev
, 
öum
);

497 
	`bªl£
(
bp
);

500 
	}
}

504 
	$dúlök
(
öode
 *
dp
, *
«me
, 
uöt
 
öo
)

506 
off
;

507 
dúít
 
de
;

508 
öode
 *
ù
;

511 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, 0)) != 0){

512 
	`ùut
(
ù
);

517 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

518 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

519 
	`∑nic
("dirlinkÑead");

520 if(
de
.
öum
 == 0)

524 
	`°∫˝y
(
de
.
«me
,Çame, 
DIRSIZ
);

525 
de
.
öum
 = 
öo
;

526 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

527 
	`∑nic
("dirlink");

530 
	}
}

546 
	$skùñem
(*
∑th
, *
«me
)

548 *
s
;

549 
Àn
;

551 *
∑th
 == '/')

552 
∑th
++;

553 if(*
∑th
 == 0)

555 
s
 = 
∑th
;

556 *
∑th
 != '/' && *path != 0)

557 
∑th
++;

558 
Àn
 = 
∑th
 - 
s
;

559 if(
Àn
 >
DIRSIZ
)

560 
	`memmove
(
«me
, 
s
, 
DIRSIZ
);

562 
	`memmove
(
«me
, 
s
, 
Àn
);

563 
«me
[
Àn
] = 0;

565 *
∑th
 == '/')

566 
∑th
++;

567  
∑th
;

568 
	}
}

573 
öode
*

574 
	$_«mei
(*
∑th
, 
∑ª¡
, *
«me
)

576 
öode
 *
ù
, *
√xt
;

578 if(*
∑th
 == '/')

579 
ù
 = 
	`igë
(
ROOTDEV
, 1);

581 
ù
 = 
	`idup
(
˝
->
cwd
);

583 (
∑th
 = 
	`skùñem
’©h, 
«me
)) != 0){

584 
	`ûock
(
ù
);

585 if(
ù
->
ty≥
 !
T_DIR
){

586 
	`iu∆ockput
(
ù
);

589 if(
∑ª¡
 && *
∑th
 == '\0'){

591 
	`iu∆ock
(
ù
);

592  
ù
;

594 if((
√xt
 = 
	`dúlookup
(
ù
, 
«me
, 0)) == 0){

595 
	`iu∆ockput
(
ù
);

598 
	`iu∆ockput
(
ù
);

599 
ù
 = 
√xt
;

601 if(
∑ª¡
){

602 
	`ùut
(
ù
);

605  
ù
;

606 
	}
}

608 
öode
*

609 
	$«mei
(*
∑th
)

611 
«me
[
DIRSIZ
];

612  
	`_«mei
(
∑th
, 0, 
«me
);

613 
	}
}

615 
öode
*

616 
	$«meù¨ít
(*
∑th
, *
«me
)

618  
	`_«mei
(
∑th
, 1, 
«me
);

619 
	}
}

	@fs.h

8 
	#BSIZE
 512

9 

	)

11 
	ssu≥rblock
 {

12 
uöt
 
	msize
;

13 
uöt
 
	mnblocks
;

14 
uöt
 
	mnöodes
;

17 
	#NADDRS
 (
NDIRECT
+1)

	)

18 
	#NDIRECT
 12

	)

19 
	#INDIRECT
 12

	)

20 
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

21 
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

24 
	sdöode
 {

25 
	mty≥
;

26 
	mmaj‹
;

27 
	mmö‹
;

28 
	m∆ök
;

29 
uöt
 
	msize
;

30 
uöt
 
	maddrs
[
NADDRS
];

33 
	#T_DIR
 1

34 
	#T_FILE
 2

35 
	#T_DEV
 3

36 

	)

38 
	#IPB
 (
BSIZE
 / (
döode
))

	)

41 
	#IBLOCK
(
i
Ë((iË/ 
IPB
 + 2)

	)

44 
	#BPB
 (
BSIZE
*8)

	)

47 
	#BBLOCK
(
b
, 
nöodes
Ë(b/
BPB
 + (nöodes)/
IPB
 + 3)

	)

50 
	#DIRSIZ
 14

	)

52 
	sdúít
 {

53 
ush‹t
 
	möum
;

54 
	m«me
[
DIRSIZ
];

	@fsvar.h

3 
	söode
 {

4 
uöt
 
	mdev
;

5 
uöt
 
	möum
;

6 
	mªf
;

7 
	mÊags
;

9 
	mty≥
;

10 
	mmaj‹
;

11 
	mmö‹
;

12 
	m∆ök
;

13 
uöt
 
	msize
;

14 
uöt
 
	maddrs
[
NADDRS
];

17 
	#I_BUSY
 0x1

	)

18 
	#I_VALID
 0x2

	)

	@grep.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

7 
	gbuf
[1024];

8 
m©ch
(*, *);

11 
	$gªp
(*
∑âîn
, 
fd
)

13 
n
, 
m
;

14 *
p
, *
q
;

16 
m
 = 0;

17 (
n
 = 
	`ªad
(
fd
, 
buf
+
m
, (buf)-m)) > 0){

18 
m
 +
n
;

19 
p
 = 
buf
;

20 (
q
 = 
	`°rchr
(
p
, '\n')) != 0){

21 *
q
 = 0;

22 if(
	`m©ch
(
∑âîn
, 
p
)){

23 *
q
 = '\n';

24 
	`wrôe
(1, 
p
, 
q
+1 -Ö);

26 
p
 = 
q
+1;

28 if(
p
 =
buf
)

29 
m
 = 0;

30 if(
m
 > 0){

31 
m
 -
p
 - 
buf
;

32 
	`memmove
(
buf
, 
p
, 
m
);

35 
	}
}

38 
	$maö
(
¨gc
, *
¨gv
[])

40 
fd
, 
i
;

41 *
∑âîn
;

43 if(
¨gc
 <= 1){

44 
	`¥ötf
(2, "usage: grepÖattern [file ...]\n");

45 
	`exô
();

47 
∑âîn
 = 
¨gv
[1];

49 if(
¨gc
 <= 2){

50 
	`gªp
(
∑âîn
, 0);

51 
	`exô
();

54 
i
 = 2; i < 
¨gc
; i++){

55 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

56 
	`¥ötf
(1, "gªp: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

57 
	`exô
();

59 
	`gªp
(
∑âîn
, 
fd
);

60 
	`˛o£
(
fd
);

62 
	`exô
();

63 
	}
}

68 
m©chhîe
(*, *);

69 
m©ch°¨
(, *, *);

72 
	$m©ch
(*
ª
, *
ãxt
)

74 if(
ª
[0] == '^')

75  
	`m©chhîe
(
ª
+1, 
ãxt
);

77 if(
	`m©chhîe
(
ª
, 
ãxt
))

79 }*
ãxt
++ != '\0');

81 
	}
}

84 
	$m©chhîe
(*
ª
, *
ãxt
)

86 if(
ª
[0] == '\0')

88 if(
ª
[1] == '*')

89  
	`m©ch°¨
(
ª
[0],Ñe+2, 
ãxt
);

90 if(
ª
[0] == '$' &&Ñe[1] == '\0')

91  *
ãxt
 == '\0';

92 if(*
ãxt
!='\0' && (
ª
[0]=='.' ||Ñe[0]==*text))

93  
	`m©chhîe
(
ª
+1, 
ãxt
+1);

95 
	}
}

98 
	$m©ch°¨
(
c
, *
ª
, *
ãxt
)

101 if(
	`m©chhîe
(
ª
, 
ãxt
))

103 }*
ãxt
!='\0' && (*ãxt++==
c
 || c=='.'));

105 
	}
}

	@hackbench-pseudo-gettimeofday.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<î∫o.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<sys/waô.h
>

7 
	~<sys/time.h
>

8 
	~<sys/pﬁl.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

12 
	$gëkiffõs
()

14 
buf
[64], *
±r
;

15 
kiffõs
 = 0, 
fd
;

17 
fd
 = 
	`›í
("/¥oc/kiffõs", 
O_RDONLY
);

18 if(
fd
 < 0){

21 if(
	`ªad
(
fd
, 
buf
, 63) < 0){

25 
±r
 = 
buf
; *ptr != '\n';Ötr++){

26 
kiffõs
 *= 10;

27 
kiffõs
 +*
±r
 - '0';

29  
kiffõs
;

30 
	}
}

32 
	$p£udo_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

34 
kiffõs
 = 
	`gëkiffõs
();

37 
tv
->
tv_£c
 = 
kiffõs
 / 100;

38 
tv
->
tv_u£c
 = (
kiffõs
 - (tv->
tv_£c
 * 100)) * 10000;

39 
	}
}

	@hackbench-pseudo.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<sys/waô.h
>

8 
	~<sys/time.h
>

9 
	~<sys/pﬁl.h
>

11 
	#DATASIZE
 100

	)

12 
	glo›s
 = 100;

13 
	gu£_pùes
 = 0;

15 
	$b¨f
(c⁄° *
msg
)

17 
	`Ârötf
(
°dîr
, "%†”º‹: %s)\n", 
msg
, 
	`°ªº‹
(
î∫o
));

18 
	`exô
(1);

19 
	}
}

21 
	$fd∑ú
(
fds
[2])

23 i‡(
u£_pùes
) {

24 i‡(
	`pùe
(
fds
) == 0)

27 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
fds
) == 0)

30 
	`b¨f
("Creating fdpair");

31 
	}
}

34 
	$ªady
(
ªady_out
, 
wakefd
)

36 
dummy
;

37 
pﬁlfd
Öﬁlfd = { .
fd
 = 
wakefd
, .
evíts
 = 
POLLIN
 };

40 i‡(
	`wrôe
(
ªady_out
, &
dummy
, 1) != 1)

41 
	`b¨f
("CLIENT:Ñeady write");

44 i‡(
	`pﬁl
(&
pﬁlfd
, 1, -1) != 1)

45 
	`b¨f
("poll");

46 
	}
}

49 
	$£ndî
(
num_fds
,

50 
out_fd
[
num_fds
],

51 
ªady_out
,

52 
wakefd
)

54 
d©a
[
DATASIZE
];

55 
i
, 
j
;

57 
	`ªady
(
ªady_out
, 
wakefd
);

60 
i
 = 0; i < 
lo›s
; i++) {

61 
j
 = 0; j < 
num_fds
; j++) {

62 
ªt
, 
d⁄e
 = 0;

64 
agaö
:

65 
ªt
 = 
	`wrôe
(
out_fd
[
j
], 
d©a
 + 
d⁄e
, (data)-done);

66 i‡(
ªt
 < 0)

67 
	`b¨f
("SENDER: write");

68 
d⁄e
 +
ªt
;

69 i‡(
d⁄e
 < (
d©a
))

70 
agaö
;

73 
	}
}

76 
	$ª˚ivî
(
num_∑ckës
,

77 
ö_fd
,

78 
ªady_out
,

79 
wakefd
)

81 
i
;

84 
	`ªady
(
ªady_out
, 
wakefd
);

87 
i
 = 0; i < 
num_∑ckës
; i++) {

88 
d©a
[
DATASIZE
];

89 
ªt
, 
d⁄e
 = 0;

91 
agaö
:

92 
ªt
 = 
	`ªad
(
ö_fd
, 
d©a
 + 
d⁄e
, 
DATASIZE
 - done);

93 i‡(
ªt
 < 0)

94 
	`b¨f
("SERVER:Ñead");

95 
d⁄e
 +
ªt
;

96 i‡(
d⁄e
 < 
DATASIZE
)

97 
agaö
;

99 
	}
}

102 
	$group
(
num_fds
,

103 
ªady_out
,

104 
wakefd
)

106 
i
;

107 
out_fds
[
num_fds
];

109 
i
 = 0; i < 
num_fds
; i++) {

110 
fds
[2];

113 
	`fd∑ú
(
fds
);

116 
	`f‹k
()) {

117 -1: 
	`b¨f
("fork()");

119 
	`˛o£
(
fds
[1]);

120 
	`ª˚ivî
(
num_fds
*
lo›s
, 
fds
[0], 
ªady_out
, 
wakefd
);

121 
	`exô
(0);

124 
out_fds
[
i
] = 
fds
[1];

125 
	`˛o£
(
fds
[0]);

129 
i
 = 0; i < 
num_fds
; i++) {

130 
	`f‹k
()) {

131 -1: 
	`b¨f
("fork()");

133 
	`£ndî
(
num_fds
, 
out_fds
, 
ªady_out
, 
wakefd
);

134 
	`exô
(0);

139 
i
 = 0; i < 
num_fds
; i++)

140 
	`˛o£
(
out_fds
[
i
]);

143  
num_fds
 * 2;

144 
	}
}

146 
	$maö
(
¨gc
, *
¨gv
[])

148 
i
, 
num_groups
, 
tŸÆ_chûdªn
;

149 
timevÆ
 
°¨t
, 
°›
, 
diff
;

150 
num_fds
 = 20;

151 
ªadyfds
[2], 
wakefds
[2];

152 
dummy
;

154 i‡(
¨gv
[1] && 
	`°rcmp
(argv[1], "-pipe") == 0) {

155 
u£_pùes
 = 1;

156 
¨gc
--;

157 
¨gv
++;

160 i‡(
¨gc
 !2 || (
num_groups
 = 
	`©oi
(
¨gv
[1])) == 0)

161 
	`b¨f
("Usage: hackbench [-pipe] <num groups>\n");

163 
	`fd∑ú
(
ªadyfds
);

164 
	`fd∑ú
(
wakefds
);

166 
tŸÆ_chûdªn
 = 0;

167 
i
 = 0; i < 
num_groups
; i++)

168 
tŸÆ_chûdªn
 +
	`group
(
num_fds
, 
ªadyfds
[1], 
wakefds
[0]);

171 
i
 = 0; i < 
tŸÆ_chûdªn
; i++)

172 i‡(
	`ªad
(
ªadyfds
[0], &
dummy
, 1) != 1)

173 
	`b¨f
("Reading forÑeadyfds");

175 
	`p£udo_gëtimeofday
(&
°¨t
, 
NULL
);

178 i‡(
	`wrôe
(
wakefds
[1], &
dummy
, 1) != 1)

179 
	`b¨f
("WritingÅo startÅhem");

182 
i
 = 0; i < 
tŸÆ_chûdªn
; i++) {

183 
°©us
;

184 
	`waô
(&
°©us
);

185 i‡(!
	`WIFEXITED
(
°©us
))

186 
	`exô
(1);

189 
	`p£udo_gëtimeofday
(&
°›
, 
NULL
);

192 
	`timîsub
(&
°›
, &
°¨t
, &
diff
);

193 
	`¥ötf
("Time: %lu.%03lu\n", 
diff
.
tv_£c
, diff.
tv_u£c
/1000);

194 
	`exô
(0);

195 
	}
}

	@hackbench.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<sys/waô.h
>

8 
	~<sys/time.h
>

9 
	~<sys/pﬁl.h
>

11 
	#DATASIZE
 100

	)

12 
	glo›s
 = 100;

13 
	gu£_pùes
 = 0;

15 
	$b¨f
(c⁄° *
msg
)

17 
	`Ârötf
(
°dîr
, "%†”º‹: %s)\n", 
msg
, 
	`°ªº‹
(
î∫o
));

18 
	`exô
(1);

19 
	}
}

21 
	$fd∑ú
(
fds
[2])

23 i‡(
u£_pùes
) {

24 i‡(
	`pùe
(
fds
) == 0)

27 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
fds
) == 0)

30 
	`b¨f
("Creating fdpair");

31 
	}
}

34 
	$ªady
(
ªady_out
, 
wakefd
)

36 
dummy
;

37 
pﬁlfd
Öﬁlfd = { .
fd
 = 
wakefd
, .
evíts
 = 
POLLIN
 };

40 i‡(
	`wrôe
(
ªady_out
, &
dummy
, 1) != 1)

41 
	`b¨f
("CLIENT:Ñeady write");

44 i‡(
	`pﬁl
(&
pﬁlfd
, 1, -1) != 1)

45 
	`b¨f
("poll");

46 
	}
}

49 
	$£ndî
(
num_fds
,

50 
out_fd
[
num_fds
],

51 
ªady_out
,

52 
wakefd
)

54 
d©a
[
DATASIZE
];

55 
i
, 
j
;

57 
	`ªady
(
ªady_out
, 
wakefd
);

60 
i
 = 0; i < 
lo›s
; i++) {

61 
j
 = 0; j < 
num_fds
; j++) {

62 
ªt
, 
d⁄e
 = 0;

64 
agaö
:

65 
ªt
 = 
	`wrôe
(
out_fd
[
j
], 
d©a
 + 
d⁄e
, (data)-done);

66 i‡(
ªt
 < 0)

67 
	`b¨f
("SENDER: write");

68 
d⁄e
 +
ªt
;

69 i‡(
d⁄e
 < (
d©a
))

70 
agaö
;

73 
	}
}

76 
	$ª˚ivî
(
num_∑ckës
,

77 
ö_fd
,

78 
ªady_out
,

79 
wakefd
)

81 
i
;

84 
	`ªady
(
ªady_out
, 
wakefd
);

87 
i
 = 0; i < 
num_∑ckës
; i++) {

88 
d©a
[
DATASIZE
];

89 
ªt
, 
d⁄e
 = 0;

91 
agaö
:

92 
ªt
 = 
	`ªad
(
ö_fd
, 
d©a
 + 
d⁄e
, 
DATASIZE
 - done);

93 i‡(
ªt
 < 0)

94 
	`b¨f
("SERVER:Ñead");

95 
d⁄e
 +
ªt
;

96 i‡(
d⁄e
 < 
DATASIZE
)

97 
agaö
;

99 
	}
}

102 
	$group
(
num_fds
,

103 
ªady_out
,

104 
wakefd
)

106 
i
;

107 
out_fds
[
num_fds
];

109 
i
 = 0; i < 
num_fds
; i++) {

110 
fds
[2];

113 
	`fd∑ú
(
fds
);

116 
	`f‹k
()) {

117 -1: 
	`b¨f
("fork()");

119 
	`˛o£
(
fds
[1]);

120 
	`ª˚ivî
(
num_fds
*
lo›s
, 
fds
[0], 
ªady_out
, 
wakefd
);

121 
	`exô
(0);

124 
out_fds
[
i
] = 
fds
[1];

125 
	`˛o£
(
fds
[0]);

129 
i
 = 0; i < 
num_fds
; i++) {

130 
	`f‹k
()) {

131 -1: 
	`b¨f
("fork()");

133 
	`£ndî
(
num_fds
, 
out_fds
, 
ªady_out
, 
wakefd
);

134 
	`exô
(0);

139 
i
 = 0; i < 
num_fds
; i++)

140 
	`˛o£
(
out_fds
[
i
]);

143  
num_fds
 * 2;

144 
	}
}

146 
	$maö
(
¨gc
, *
¨gv
[])

148 
i
, 
num_groups
, 
tŸÆ_chûdªn
;

149 
timevÆ
 
°¨t
, 
°›
, 
diff
;

150 
num_fds
 = 20;

151 
ªadyfds
[2], 
wakefds
[2];

152 
dummy
;

154 i‡(
¨gv
[1] && 
	`°rcmp
(argv[1], "-pipe") == 0) {

155 
u£_pùes
 = 1;

156 
¨gc
--;

157 
¨gv
++;

160 i‡(
¨gc
 !2 || (
num_groups
 = 
	`©oi
(
¨gv
[1])) == 0)

161 
	`b¨f
("Usage: hackbench [-pipe] <num groups>\n");

163 
	`fd∑ú
(
ªadyfds
);

164 
	`fd∑ú
(
wakefds
);

166 
tŸÆ_chûdªn
 = 0;

167 
i
 = 0; i < 
num_groups
; i++)

168 
tŸÆ_chûdªn
 +
	`group
(
num_fds
, 
ªadyfds
[1], 
wakefds
[0]);

171 
i
 = 0; i < 
tŸÆ_chûdªn
; i++)

172 i‡(
	`ªad
(
ªadyfds
[0], &
dummy
, 1) != 1)

173 
	`b¨f
("Reading forÑeadyfds");

175 
	`gëtimeofday
(&
°¨t
, 
NULL
);

178 i‡(
	`wrôe
(
wakefds
[1], &
dummy
, 1) != 1)

179 
	`b¨f
("WritingÅo startÅhem");

182 
i
 = 0; i < 
tŸÆ_chûdªn
; i++) {

183 
°©us
;

184 
	`waô
(&
°©us
);

185 i‡(!
	`WIFEXITED
(
°©us
))

186 
	`exô
(1);

189 
	`gëtimeofday
(&
°›
, 
NULL
);

192 
	`timîsub
(&
°›
, &
°¨t
, &
diff
);

193 
	`¥ötf
("Time: %lu.%03lu\n", 
diff
.
tv_£c
, diff.
tv_u£c
/1000);

194 
	`exô
(0);

195 
	}
}

	@hackbench/hackbench-pseudo.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<sys/waô.h
>

8 
	~<sys/time.h
>

9 
	~<sys/pﬁl.h
>

11 
	#DATASIZE
 100

	)

12 
	glo›s
 = 100;

13 
	gu£_pùes
 = 0;

15 
	$b¨f
(c⁄° *
msg
)

17 
	`Ârötf
(
°dîr
, "%†”º‹: %s)\n", 
msg
, 
	`°ªº‹
(
î∫o
));

18 
	`exô
(1);

19 
	}
}

21 
	$fd∑ú
(
fds
[2])

23 i‡(
u£_pùes
) {

24 i‡(
	`pùe
(
fds
) == 0)

27 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
fds
) == 0)

30 
	`b¨f
("Creating fdpair");

31 
	}
}

34 
	$ªady
(
ªady_out
, 
wakefd
)

36 
dummy
;

37 
pﬁlfd
Öﬁlfd = { .
fd
 = 
wakefd
, .
evíts
 = 
POLLIN
 };

40 i‡(
	`wrôe
(
ªady_out
, &
dummy
, 1) != 1)

41 
	`b¨f
("CLIENT:Ñeady write");

44 i‡(
	`pﬁl
(&
pﬁlfd
, 1, -1) != 1)

45 
	`b¨f
("poll");

46 
	}
}

49 
	$£ndî
(
num_fds
,

50 
out_fd
[
num_fds
],

51 
ªady_out
,

52 
wakefd
)

54 
d©a
[
DATASIZE
];

55 
i
, 
j
;

57 
	`ªady
(
ªady_out
, 
wakefd
);

60 
i
 = 0; i < 
lo›s
; i++) {

61 
j
 = 0; j < 
num_fds
; j++) {

62 
ªt
, 
d⁄e
 = 0;

64 
agaö
:

65 
ªt
 = 
	`wrôe
(
out_fd
[
j
], 
d©a
 + 
d⁄e
, (data)-done);

66 i‡(
ªt
 < 0)

67 
	`b¨f
("SENDER: write");

68 
d⁄e
 +
ªt
;

69 i‡(
d⁄e
 < (
d©a
))

70 
agaö
;

73 
	}
}

76 
	$ª˚ivî
(
num_∑ckës
,

77 
ö_fd
,

78 
ªady_out
,

79 
wakefd
)

81 
i
;

84 
	`ªady
(
ªady_out
, 
wakefd
);

87 
i
 = 0; i < 
num_∑ckës
; i++) {

88 
d©a
[
DATASIZE
];

89 
ªt
, 
d⁄e
 = 0;

91 
agaö
:

92 
ªt
 = 
	`ªad
(
ö_fd
, 
d©a
 + 
d⁄e
, 
DATASIZE
 - done);

93 i‡(
ªt
 < 0)

94 
	`b¨f
("SERVER:Ñead");

95 
d⁄e
 +
ªt
;

96 i‡(
d⁄e
 < 
DATASIZE
)

97 
agaö
;

99 
	}
}

102 
	$group
(
num_fds
,

103 
ªady_out
,

104 
wakefd
)

106 
i
;

107 
out_fds
[
num_fds
];

109 
i
 = 0; i < 
num_fds
; i++) {

110 
fds
[2];

113 
	`fd∑ú
(
fds
);

116 
	`f‹k
()) {

117 -1: 
	`b¨f
("fork()");

119 
	`˛o£
(
fds
[1]);

120 
	`ª˚ivî
(
num_fds
*
lo›s
, 
fds
[0], 
ªady_out
, 
wakefd
);

121 
	`exô
(0);

124 
out_fds
[
i
] = 
fds
[1];

125 
	`˛o£
(
fds
[0]);

129 
i
 = 0; i < 
num_fds
; i++) {

130 
	`f‹k
()) {

131 -1: 
	`b¨f
("fork()");

133 
	`£ndî
(
num_fds
, 
out_fds
, 
ªady_out
, 
wakefd
);

134 
	`exô
(0);

139 
i
 = 0; i < 
num_fds
; i++)

140 
	`˛o£
(
out_fds
[
i
]);

143  
num_fds
 * 2;

144 
	}
}

146 
	$maö
(
¨gc
, *
¨gv
[])

148 
i
, 
num_groups
, 
tŸÆ_chûdªn
;

149 
timevÆ
 
°¨t
, 
°›
, 
diff
;

150 
num_fds
 = 20;

151 
ªadyfds
[2], 
wakefds
[2];

152 
dummy
;

154 i‡(
¨gv
[1] && 
	`°rcmp
(argv[1], "-pipe") == 0) {

155 
u£_pùes
 = 1;

156 
¨gc
--;

157 
¨gv
++;

160 i‡(
¨gc
 !2 || (
num_groups
 = 
	`©oi
(
¨gv
[1])) == 0)

161 
	`b¨f
("Usage: hackbench [-pipe] <num groups>\n");

163 
	`fd∑ú
(
ªadyfds
);

164 
	`fd∑ú
(
wakefds
);

166 
tŸÆ_chûdªn
 = 0;

167 
i
 = 0; i < 
num_groups
; i++)

168 
tŸÆ_chûdªn
 +
	`group
(
num_fds
, 
ªadyfds
[1], 
wakefds
[0]);

171 
i
 = 0; i < 
tŸÆ_chûdªn
; i++)

172 i‡(
	`ªad
(
ªadyfds
[0], &
dummy
, 1) != 1)

173 
	`b¨f
("Reading forÑeadyfds");

175 
	`p£udo_gëtimeofday
(&
°¨t
, 
NULL
);

178 i‡(
	`wrôe
(
wakefds
[1], &
dummy
, 1) != 1)

179 
	`b¨f
("WritingÅo startÅhem");

182 
i
 = 0; i < 
tŸÆ_chûdªn
; i++) {

183 
°©us
;

184 
	`waô
(&
°©us
);

185 i‡(!
	`WIFEXITED
(
°©us
))

186 
	`exô
(1);

189 
	`p£udo_gëtimeofday
(&
°›
, 
NULL
);

192 
	`timîsub
(&
°›
, &
°¨t
, &
diff
);

193 
	`¥ötf
("Time: %lu.%03lu\n", 
diff
.
tv_£c
, diff.
tv_u£c
/1000);

194 
	`exô
(0);

195 
	}
}

	@hackbench/hackbench.c

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/sockë.h
>

7 
	~<sys/waô.h
>

8 
	~<sys/time.h
>

9 
	~<sys/pﬁl.h
>

11 
	#DATASIZE
 100

	)

12 
	glo›s
 = 100;

13 
	gu£_pùes
 = 0;

15 
	$b¨f
(c⁄° *
msg
)

17 
	`Ârötf
(
°dîr
, "%†”º‹: %s)\n", 
msg
, 
	`°ªº‹
(
î∫o
));

18 
	`exô
(1);

19 
	}
}

21 
	$fd∑ú
(
fds
[2])

23 i‡(
u£_pùes
) {

24 i‡(
	`pùe
(
fds
) == 0)

27 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
fds
) == 0)

30 
	`b¨f
("Creating fdpair");

31 
	}
}

34 
	$ªady
(
ªady_out
, 
wakefd
)

36 
dummy
;

37 
pﬁlfd
Öﬁlfd = { .
fd
 = 
wakefd
, .
evíts
 = 
POLLIN
 };

40 i‡(
	`wrôe
(
ªady_out
, &
dummy
, 1) != 1)

41 
	`b¨f
("CLIENT:Ñeady write");

44 i‡(
	`pﬁl
(&
pﬁlfd
, 1, -1) != 1)

45 
	`b¨f
("poll");

46 
	}
}

49 
	$£ndî
(
num_fds
,

50 
out_fd
[
num_fds
],

51 
ªady_out
,

52 
wakefd
)

54 
d©a
[
DATASIZE
];

55 
i
, 
j
;

57 
	`ªady
(
ªady_out
, 
wakefd
);

60 
i
 = 0; i < 
lo›s
; i++) {

61 
j
 = 0; j < 
num_fds
; j++) {

62 
ªt
, 
d⁄e
 = 0;

64 
agaö
:

65 
ªt
 = 
	`wrôe
(
out_fd
[
j
], 
d©a
 + 
d⁄e
, (data)-done);

66 i‡(
ªt
 < 0)

67 
	`b¨f
("SENDER: write");

68 
d⁄e
 +
ªt
;

69 i‡(
d⁄e
 < (
d©a
))

70 
agaö
;

73 
	}
}

76 
	$ª˚ivî
(
num_∑ckës
,

77 
ö_fd
,

78 
ªady_out
,

79 
wakefd
)

81 
i
;

84 
	`ªady
(
ªady_out
, 
wakefd
);

87 
i
 = 0; i < 
num_∑ckës
; i++) {

88 
d©a
[
DATASIZE
];

89 
ªt
, 
d⁄e
 = 0;

91 
agaö
:

92 
ªt
 = 
	`ªad
(
ö_fd
, 
d©a
 + 
d⁄e
, 
DATASIZE
 - done);

93 i‡(
ªt
 < 0)

94 
	`b¨f
("SERVER:Ñead");

95 
d⁄e
 +
ªt
;

96 i‡(
d⁄e
 < 
DATASIZE
)

97 
agaö
;

99 
	}
}

102 
	$group
(
num_fds
,

103 
ªady_out
,

104 
wakefd
)

106 
i
;

107 
out_fds
[
num_fds
];

109 
i
 = 0; i < 
num_fds
; i++) {

110 
fds
[2];

113 
	`fd∑ú
(
fds
);

116 
	`f‹k
()) {

117 -1: 
	`b¨f
("fork()");

119 
	`˛o£
(
fds
[1]);

120 
	`ª˚ivî
(
num_fds
*
lo›s
, 
fds
[0], 
ªady_out
, 
wakefd
);

121 
	`exô
(0);

124 
out_fds
[
i
] = 
fds
[1];

125 
	`˛o£
(
fds
[0]);

129 
i
 = 0; i < 
num_fds
; i++) {

130 
	`f‹k
()) {

131 -1: 
	`b¨f
("fork()");

133 
	`£ndî
(
num_fds
, 
out_fds
, 
ªady_out
, 
wakefd
);

134 
	`exô
(0);

139 
i
 = 0; i < 
num_fds
; i++)

140 
	`˛o£
(
out_fds
[
i
]);

143  
num_fds
 * 2;

144 
	}
}

146 
	$maö
(
¨gc
, *
¨gv
[])

148 
i
, 
num_groups
, 
tŸÆ_chûdªn
;

149 
timevÆ
 
°¨t
, 
°›
, 
diff
;

150 
num_fds
 = 20;

151 
ªadyfds
[2], 
wakefds
[2];

152 
dummy
;

154 i‡(
¨gv
[1] && 
	`°rcmp
(argv[1], "-pipe") == 0) {

155 
u£_pùes
 = 1;

156 
¨gc
--;

157 
¨gv
++;

160 i‡(
¨gc
 !2 || (
num_groups
 = 
	`©oi
(
¨gv
[1])) == 0)

161 
	`b¨f
("Usage: hackbench [-pipe] <num groups>\n");

163 
	`fd∑ú
(
ªadyfds
);

164 
	`fd∑ú
(
wakefds
);

166 
tŸÆ_chûdªn
 = 0;

167 
i
 = 0; i < 
num_groups
; i++)

168 
tŸÆ_chûdªn
 +
	`group
(
num_fds
, 
ªadyfds
[1], 
wakefds
[0]);

171 
i
 = 0; i < 
tŸÆ_chûdªn
; i++)

172 i‡(
	`ªad
(
ªadyfds
[0], &
dummy
, 1) != 1)

173 
	`b¨f
("Reading forÑeadyfds");

175 
	`gëtimeofday
(&
°¨t
, 
NULL
);

178 i‡(
	`wrôe
(
wakefds
[1], &
dummy
, 1) != 1)

179 
	`b¨f
("WritingÅo startÅhem");

182 
i
 = 0; i < 
tŸÆ_chûdªn
; i++) {

183 
°©us
;

184 
	`waô
(&
°©us
);

185 i‡(!
	`WIFEXITED
(
°©us
))

186 
	`exô
(1);

189 
	`gëtimeofday
(&
°›
, 
NULL
);

192 
	`timîsub
(&
°›
, &
°¨t
, &
diff
);

193 
	`¥ötf
("Time: %lu.%03lu\n", 
diff
.
tv_£c
, diff.
tv_u£c
/1000);

194 
	`exô
(0);

195 
	}
}

	@hackbench/pseudo-gettimeofday.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<î∫o.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<sys/waô.h
>

7 
	~<sys/time.h
>

8 
	~<sys/pﬁl.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

12 
	$gëkiffõs
()

14 
buf
[64], *
±r
;

15 
kiffõs
 = 0, 
fd
;

17 
fd
 = 
	`›í
("/¥oc/kiffõs", 
O_RDONLY
);

18 if(
fd
 < 0){

21 if(
	`ªad
(
fd
, 
buf
, 63) < 0){

25 
±r
 = 
buf
; *ptr != '\n';Ötr++){

26 
kiffõs
 *= 10;

27 
kiffõs
 +*
±r
 - '0';

29  
kiffõs
;

30 
	}
}

32 
	$p£udo_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

34 
kiffõs
 = 
	`gëkiffõs
();

37 
tv
->
tv_£c
 = 
kiffõs
 / 100;

38 
tv
->
tv_u£c
 = (
kiffõs
 - (tv->
tv_£c
 * 100)) * 10000;

39 
	}
}

	@ide.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

8 
	~"x86.h
"

9 
	~"å≠s.h
"

10 
	~"•ölock.h
"

11 
	~"buf.h
"

13 
	#IDE_BSY
 0x80

	)

14 
	#IDE_DRDY
 0x40

	)

15 
	#IDE_DF
 0x20

	)

16 
	#IDE_ERR
 0x01

	)

18 
	#IDE_CMD_READ
 0x20

	)

19 
	#IDE_CMD_WRITE
 0x30

	)

25 
•ölock
 
	gide_lock
;

26 
buf
 *
	gide_queue
;

28 
	gdisk_1_¥e£¡
;

29 
ide_°¨t_ªque°
();

33 
	$ide_waô_ªady
(
check_îr‹
)

35 
r
;

37 ((
r
 = 
	`öb
(0x1f7)Ë& 
IDE_BSY
Ë|| !‘ & 
IDE_DRDY
))

39 if(
check_îr‹
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

42 
	}
}

45 
	$ide_öô
()

47 
i
;

49 
	`öôlock
(&
ide_lock
, "ide");

50 
	`pic_íabÀ
(
IRQ_IDE
);

51 
	`iﬂpic_íabÀ
(
IRQ_IDE
, 
n˝u
 - 1);

52 
	`ide_waô_ªady
(0);

55 
	`outb
(0x1f6, 0xe0 | (1<<4));

56 
i
=0; i<1000; i++){

57 if(
	`öb
(0x1f7) != 0){

58 
disk_1_¥e£¡
 = 1;

64 
	`outb
(0x1f6, 0xe0 | (0<<4));

65 
	}
}

69 
	$ide_°¨t_ªque°
(
buf
 *
b
)

71 if(
b
 == 0)

72 
	`∑nic
("ide_start_request");

74 
	`ide_waô_ªady
(0);

75 
	`outb
(0x3f6, 0);

76 
	`outb
(0x1f2, 1);

77 
	`outb
(0x1f3, 
b
->
£˘‹
 & 0xff);

78 
	`outb
(0x1f4, (
b
->
£˘‹
 >> 8) & 0xff);

79 
	`outb
(0x1f5, (
b
->
£˘‹
 >> 16) & 0xff);

80 
	`outb
(0x1f6, 0xe0 | ((
b
->
dev
&1)<<4Ë| ((b->
£˘‹
>>24)&0x0f));

81 if(
b
->
Êags
 & 
B_DIRTY
){

82 
	`outb
(0x1f7, 
IDE_CMD_WRITE
);

83 
	`out¶
(0x1f0, 
b
->
d©a
, 512/4);

85 
	`outb
(0x1f7, 
IDE_CMD_READ
);

87 
	}
}

91 
	$ide_öå
()

93 
buf
 *
b
;

95 
	`acquúe
(&
ide_lock
);

96 if((
b
 = 
ide_queue
) == 0){

97 
	`ªÀa£
(&
ide_lock
);

102 if(!(
b
->
Êags
 & 
B_DIRTY
Ë&& 
	`ide_waô_ªady
(1) >= 0)

103 
	`ö¶
(0x1f0, 
b
->
d©a
, 512/4);

106 
b
->
Êags
 |
B_VALID
;

107 
b
->
Êags
 &~
B_DIRTY
;

108 
	`wakeup
(
b
);

111 if((
ide_queue
 = 
b
->
q√xt
) != 0)

112 
	`ide_°¨t_ªque°
(
ide_queue
);

114 
	`ªÀa£
(&
ide_lock
);

115 
	}
}

121 
	$ide_rw
(
buf
 *
b
)

123 
buf
 **
µ
;

125 if(!(
b
->
Êags
 & 
B_BUSY
))

126 
	`∑nic
("ide_rw: bufÇot busy");

127 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

128 
	`∑nic
("ide_rw:ÇothingÅo do");

129 if(
b
->
dev
 !0 && !
disk_1_¥e£¡
)

130 
	`∑nic
("ide disk 1ÇotÖresent");

132 
	`acquúe
(&
ide_lock
);

135 
b
->
q√xt
 = 0;

136 
µ
=&
ide_queue
; *µ;Öp=&(*µ)->
q√xt
)

138 *
µ
 = 
b
;

141 if(
ide_queue
 =
b
)

142 
	`ide_°¨t_ªque°
(
b
);

146 (
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) != B_VALID)

147 
	`¶ìp
(
b
, &
ide_lock
);

149 
	`ªÀa£
(&
ide_lock
);

150 
	}
}

	@init.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

6 
	~"f˙é.h
"

8 *
	gsh_¨gs
[] = { "sh", 0 };

11 
	$maö
()

13 
pid
, 
wpid
;

15 if(
	`›í
("c⁄sﬁe", 
O_RDWR
) < 0){

16 
	`mknod
("console", 1, 1);

17 
	`›í
("c⁄sﬁe", 
O_RDWR
);

19 
	`dup
(0);

20 
	`dup
(0);

23 
	`¥ötf
(1, "init: starting sh\n");

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0){

26 
	`¥ötf
(1, "init: fork failed\n");

27 
	`exô
();

29 if(
pid
 == 0){

30 
	`exec
("sh", 
sh_¨gs
);

31 
	`¥ötf
(1, "init:Éxec sh failed\n");

32 
	`exô
();

34 (
wpid
=
	`waô
()Ë>0 && wpid !
pid
)

35 
	`¥ötf
(1, "zombie!\n");

37 
	}
}

	@initcode.S

1 #Inôü»
¥o˚ss
 
execs
 /
öô
.

3 
	~"sysˇŒ.h
"

4 
	~"å≠s.h
"

6 #exec(
öô
, 
¨gv
)

7 .
globl
 
°¨t


8 
	g°¨t
:

9 
pushl
 
$¨gv


10 
pushl
 
$öô


11 
pushl
 
$0


12 
movl
 
$SYS_exec
, %
óx


13 
	g$T_SYSCALL


15 #f‹(;;Ë
exô
();

16 
	gexô
:

17 
movl
 
$SYS_exô
, %
óx


18 
$T_SYSCALL


19 
jmp
 
	gexô


21 #ch¨ 
öô
[] = "/init\0";

22 
	göô
:

23 .
°rög
 "/init\0"

25 #ch¨ *
¨gv
[] = { 
öô
, 0 };

26 .
	gp2Æign
 2

27 
	g¨gv
:

28 .
öô


	@ioapic.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

9 
	#IOAPIC
 0xFEC00000

10 

	)

11 
	#REG_ID
 0x00

12 
	#REG_VER
 0x01

13 
	#REG_TABLE
 0x10

14 

	)

20 
	#INT_DISABLED
 0x00010000

21 
	#INT_LEVEL
 0x00008000

22 
	#INT_ACTIVELOW
 0x00002000

23 
	#INT_LOGICAL
 0x00000800

24 

	)

25 vﬁ©ûê
iﬂpic
 *
	giﬂpic
;

28 
	siﬂpic
 {

29 
uöt
 
	mªg
;

30 
uöt
 
	m∑d
[3];

31 
uöt
 
	md©a
;

34 
uöt


35 
	$iﬂpic_ªad
(
ªg
)

37 
iﬂpic
->
ªg
 =Ñeg;

38  
iﬂpic
->
d©a
;

39 
	}
}

42 
	$iﬂpic_wrôe
(
ªg
, 
uöt
 
d©a
)

44 
iﬂpic
->
ªg
 =Ñeg;

45 
iﬂpic
->
d©a
 = data;

46 
	}
}

49 
	$iﬂpic_öô
()

51 
i
, 
id
, 
maxöå
;

53 if(!
ismp
)

56 
iﬂpic
 = (vﬁ©ûêiﬂpic*)
IOAPIC
;

57 
maxöå
 = (
	`iﬂpic_ªad
(
REG_VER
) >> 16) & 0xFF;

58 
id
 = 
	`iﬂpic_ªad
(
REG_ID
) >> 24;

59 if(
id
 !
iﬂpic_id
)

60 
	`˝rötf
("ioapic_init: id isn'tÉqualÅo ioapic_id;Çotá MP\n");

64 
i
 = 0; i <
maxöå
; i++){

65 
	`iﬂpic_wrôe
(
REG_TABLE
+2*
i
, 
INT_DISABLED
 | (
IRQ_OFFSET
 + i));

66 
	`iﬂpic_wrôe
(
REG_TABLE
+2*
i
+1, 0);

68 
	}
}

71 
	$iﬂpic_íabÀ
(
úq
, 
˝unum
)

73 if(!
ismp
)

79 
	`iﬂpic_wrôe
(
REG_TABLE
+2*
úq
, 
IRQ_OFFSET
 + irq);

80 
	`iﬂpic_wrôe
(
REG_TABLE
+2*
úq
+1, 
˝unum
 << 24);

81 
	}
}

	@kalloc.c

8 
	~"ty≥s.h
"

9 
	~"defs.h
"

10 
	~"∑øm.h
"

11 
	~"•ölock.h
"

13 
•ölock
 
	gkÆloc_lock
;

15 
	srun
 {

16 
run
 *
	m√xt
;

17 
	mÀn
;

19 
run
 *
	g‰ìli°
;

26 
	$köô
()

28 
íd
;

29 
uöt
 
mem
;

30 *
°¨t
;

32 
	`öôlock
(&
kÆloc_lock
, "kalloc");

33 
°¨t
 = (*Ë&
íd
;

34 
°¨t
 = (*Ë(((
uöt
)°¨à+ 
PAGE
) & ~(PAGE-1));

35 
mem
 = 256;

36 
	`˝rötf
("mem = %d\n", 
mem
 * 
PAGE
);

37 
	`k‰ì
(
°¨t
, 
mem
 * 
PAGE
);

38 
	}
}

45 
	$k‰ì
(*
v
, 
Àn
)

47 
run
 *
r
, *
ªnd
, **
Ω
, *
p
, *
≥nd
;

49 if(
Àn
 <0 ||Üí % 
PAGE
)

50 
	`∑nic
("kfree");

53 
	`mem£t
(
v
, 1, 
Àn
);

55 
	`acquúe
(&
kÆloc_lock
);

56 
p
 = (
run
*)
v
;

57 
≥nd
 = (
run
*)(
v
 + 
Àn
);

58 
Ω
=&
‰ìli°
; (
r
=*ΩË!0 &&Ñ <
≥nd
;Ñp=&r->
√xt
){

59 
ªnd
 = (
run
*)((*)
r
 +Ñ->
Àn
);

60 if(
r
 <
p
 &&Ö < 
ªnd
)

61 
	`∑nic
("freeing freeÖage");

62 if(
≥nd
 =
r
){

63 
p
->
Àn
 =Üí + 
r
->len;

64 
p
->
√xt
 = 
r
->next;

65 *
Ω
 = 
p
;

66 
out
;

68 if(
ªnd
 =
p
){

69 
r
->
Àn
 +=Üen;

70 if(
r
->
√xt
 &&Ñ->√xà=
≥nd
){

71 
r
->
Àn
 +r->
√xt
->len;

72 
r
->
√xt
 =Ñ->next->next;

74 
out
;

78 
p
->
Àn
 =Üen;

79 
p
->
√xt
 = 
r
;

80 *
Ω
 = 
p
;

82 
out
:

83 
	`ªÀa£
(&
kÆloc_lock
);

84 
	}
}

90 
	$kÆloc
(
n
)

92 *
p
;

93 
run
 *
r
, **
Ω
;

95 if(
n
 % 
PAGE
 ||Ç <= 0)

96 
	`∑nic
("kalloc");

98 
	`acquúe
(&
kÆloc_lock
);

99 
Ω
=&
‰ìli°
; (
r
=*ΩË!0;Ñp=&r->
√xt
){

100 if(
r
->
Àn
 =
n
){

101 *
Ω
 = 
r
->
√xt
;

102 
	`ªÀa£
(&
kÆloc_lock
);

103  (*)
r
;

105 if(
r
->
Àn
 > 
n
){

106 
r
->
Àn
 -
n
;

107 
p
 = (*)
r
 +Ñ->
Àn
;

108 
	`ªÀa£
(&
kÆloc_lock
);

109  
p
;

112 
	`ªÀa£
(&
kÆloc_lock
);

114 
	`˝rötf
("kalloc: out of memory\n");

116 
	}
}

	@kbd.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"kbd.h
"

7 
	$kbd_gëc
()

9 
uöt
 
shi·
;

10 
uch¨
 *
ch¨code
[4] = {

11 
n‹mÆm≠
, 
shi·m≠
, 
˘lm≠
, ctlmap

13 
uöt
 
°
, 
d©a
, 
c
;

15 
°
 = 
	`öb
(
KBSTATP
);

16 if((
°
 & 
KBS_DIB
) == 0)

18 
d©a
 = 
	`öb
(
KBDATAP
);

20 if(
d©a
 == 0xE0){

21 
shi·
 |
E0ESC
;

23 } if(
d©a
 & 0x80){

25 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

26 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

28 } if(
shi·
 & 
E0ESC
){

30 
d©a
 |= 0x80;

31 
shi·
 &~
E0ESC
;

34 
shi·
 |
shi·code
[
d©a
];

35 
shi·
 ^
toggÀcode
[
d©a
];

36 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

37 if(
shi·
 & 
CAPSLOCK
){

38 if('a' <
c
 && c <= 'z')

39 
c
 += 'A' - 'a';

40 if('A' <
c
 && c <= 'Z')

41 
c
 += 'a' - 'A';

43  
c
;

44 
	}
}

47 
	$kbd_öå
()

49 
	`c⁄sﬁe_öå
(
kbd_gëc
);

50 
	}
}

	@kbd.h

3 
	#KBSTATP
 0x64

4 
	#KBS_DIB
 0x01

5 
	#KBDATAP
 0x60

6 

	)

7 
	#NO
 0

	)

9 
	#SHIFT
 (1<<0)

	)

10 
	#CTL
 (1<<1)

	)

11 
	#ALT
 (1<<2)

	)

13 
	#CAPSLOCK
 (1<<3)

	)

14 
	#NUMLOCK
 (1<<4)

	)

15 
	#SCROLLLOCK
 (1<<5)

	)

17 
	#E0ESC
 (1<<6)

	)

20 
	#KEY_HOME
 0xE0

	)

21 
	#KEY_END
 0xE1

	)

22 
	#KEY_UP
 0xE2

	)

23 
	#KEY_DN
 0xE3

	)

24 
	#KEY_LF
 0xE4

	)

25 
	#KEY_RT
 0xE5

	)

26 
	#KEY_PGUP
 0xE6

	)

27 
	#KEY_PGDN
 0xE7

	)

28 
	#KEY_INS
 0xE8

	)

29 
	#KEY_DEL
 0xE9

	)

32 
	#C
(
x
Ë(x - '@')

	)

34 
uch¨
 
	gshi·code
[256] =

36 [0x1D] 
CTL
,

37 [0x2A] 
SHIFT
,

38 [0x36] 
SHIFT
,

39 [0x38] 
ALT
,

40 [0x9D] 
CTL
,

41 [0xB8] 
ALT


44 
uch¨
 
	gtoggÀcode
[256] =

46 [0x3A] 
CAPSLOCK
,

47 [0x45] 
NUMLOCK
,

48 [0x46] 
SCROLLLOCK


51 
uch¨
 
	gn‹mÆm≠
[256] =

53 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

56 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

58 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

59 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

60 
NO
, ' ', NO, NO, NO, NO, NO, NO,

61 
NO
, NO, NO, NO, NO, NO, NO, '7',

63 '2', '3', '0', '.', 
NO
, NO, NO, NO,

66 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

67 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

68 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

69 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

70 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


73 
uch¨
 
	gshi·m≠
[256] =

75 
NO
, 033, '!', '@', '#', '$', '%', '^',

78 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

80 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

81 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

82 
NO
, ' ', NO, NO, NO, NO, NO, NO,

83 
NO
, NO, NO, NO, NO, NO, NO, '7',

85 '2', '3', '0', '.', 
NO
, NO, NO, NO,

88 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

89 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

90 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

91 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

92 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


95 
uch¨
 
	g˘lm≠
[256] =

97 
NO
, NO, NO, NO, NO, NO, NO, NO,

98 
NO
, NO, NO, NO, NO, NO, NO, NO,

99 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

100 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

101 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

102 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

103 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

105 [0xB5] 
C
('/'),

106 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

107 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

108 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

109 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

110 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


	@kill.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
i
;

10 if(
¨gc
 < 1){

11 
	`¥ötf
(2, "usage: killÖid...\n");

12 
	`exô
();

14 
i
=1; i<
¨gc
; i++)

15 
	`kûl
(
	`©oi
(
¨gv
[
i
]));

16 
	`exô
();

17 
	}
}

	@lapic.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"å≠s.h
"

7 
	~"mmu.h
"

8 
	~"x86.h
"

11 
	#ID
 (0x0020/4)

12 
	#VER
 (0x0030/4)

13 
	#TPR
 (0x0080/4)

14 
	#EOI
 (0x00B0/4)

15 
	#SVR
 (0x00F0/4)

16 
	#ENABLE
 0x00000100

17 
	#ESR
 (0x0280/4)

18 
	#ICRLO
 (0x0300/4)

19 
	#INIT
 0x00000500

20 
	#STARTUP
 0x00000600

21 
	#DELIVS
 0x00001000

22 
	#ASSERT
 0x00004000

23 
	#LEVEL
 0x00008000

24 
	#BCAST
 0x00080000

25 
	#ICRHI
 (0x0310/4)

26 
	#TIMER
 (0x0320/4)

27 
	#X1
 0x0000000B

28 
	#PERIODIC
 0x00020000

29 
	#PCINT
 (0x0340/4)

30 
	#LINT0
 (0x0350/4)

31 
	#LINT1
 (0x0360/4)

32 
	#ERROR
 (0x0370/4)

33 
	#MASKED
 0x00010000

34 
	#TICR
 (0x0380/4)

35 
	#TCCR
 (0x0390/4)

36 
	#TDCR
 (0x03E0/4)

37 

	)

38 vﬁ©ûê
uöt
 *
	gœpic
;

41 
	$œpicw
(
ödex
, 
vÆue
)

43 
œpic
[
ödex
] = 
vÆue
;

44 
œpic
[
ID
];

45 
	}
}

48 
	$œpic_öô
(
c
)

50 if(!
œpic
)

54 
	`œpicw
(
SVR
, 
ENABLE
 | (
IRQ_OFFSET
+
IRQ_SPURIOUS
));

60 
	`œpicw
(
TDCR
, 
X1
);

61 
	`œpicw
(
TIMER
, 
PERIODIC
 | (
IRQ_OFFSET
 + 
IRQ_TIMER
));

62 
	`œpicw
(
TICR
, 10000000);

65 
	`œpicw
(
LINT0
, 
MASKED
);

66 
	`œpicw
(
LINT1
, 
MASKED
);

70 if(((
œpic
[
VER
]>>16) & 0xFF) >= 4)

71 
	`œpicw
(
PCINT
, 
MASKED
);

74 
	`œpicw
(
ERROR
, 
IRQ_OFFSET
+
IRQ_ERROR
);

77 
	`œpicw
(
ESR
, 0);

78 
	`œpicw
(
ESR
, 0);

81 
	`œpicw
(
EOI
, 0);

84 
	`œpicw
(
ICRHI
, 0);

85 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

86 
œpic
[
ICRLO
] & 
DELIVS
)

90 
	`œpicw
(
TPR
, 0);

91 
	}
}

94 
	$˝u
()

101 if(
	`ªad_eÊags
()&
FL_IF
){

102 
n
;

103 if(
n
++ == 0)

104 
	`˝rötf
("cpu called from %x with interruptsÉnabled\n",

105 ((
uöt
*)
	`ªad_ebp
())[1]);

108 if(
œpic
)

109  
œpic
[
ID
]>>24;

111 
	}
}

115 
	$œpic_eoi
()

117 if(
œpic
)

118 
	`œpicw
(
EOI
, 0);

119 
	}
}

124 
	$mi¸odñay
(
us
)

126 vﬁ©ûê
j
 = 0;

128 
us
-- > 0)

129 
j
=0; j<10000; j++);

130 
	}
}

133 
	#IO_RTC
 0x70

	)

138 
	$œpic_°¨èp
(
uch¨
 
≠icid
, 
uöt
 
addr
)

140 
i
;

141 
ush‹t
 *
wrv
;

146 
	`outb
(
IO_RTC
, 0xF);

147 
	`outb
(
IO_RTC
+1, 0x0A);

148 
wrv
 = (
ush‹t
*)(0x40<<4 | 0x67);

149 
wrv
[0] = 0;

150 
wrv
[1] = 
addr
 >> 4;

154 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

155 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

156 
	`mi¸odñay
(200);

157 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

158 
	`mi¸odñay
(100);

165 
i
 = 0; i < 2; i++){

166 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

167 
	`œpicw
(
ICRLO
, 
STARTUP
 | (
addr
>>12));

168 
	`mi¸odñay
(200);

170 
	}
}

	@ln.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 if(
¨gc
 != 3){

9 
	`¥ötf
(2, "Usage:Ün oldÇew\n");

10 
	`exô
();

12 if(
	`lök
(
¨gv
[1],árgv[2]) < 0)

13 
	`¥ötf
(2, "lök %†%s: faûed\n", 
¨gv
[1],árgv[2]);

14 
	`exô
();

15 
	}
}

	@ls.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"fs.h
"

7 
	$fmäame
(*
∑th
)

9 
buf
[
DIRSIZ
+1];

10 *
p
;

13 
p
=
∑th
+
	`°æí
(path);Ö >=Öath && *p != '/';Ö--)

15 
p
++;

18 if(
	`°æí
(
p
Ë>
DIRSIZ
)

19  
p
;

20 
	`memmove
(
buf
, 
p
, 
	`°æí
(p));

21 
	`mem£t
(
buf
+
	`°æí
(
p
), ' ', 
DIRSIZ
-strlen(p));

22  
buf
;

23 
	}
}

26 
	$ls
(*
∑th
)

28 
buf
[512], *
p
;

29 
fd
;

30 
dúít
 
de
;

31 
°©
 
°
;

33 if((
fd
 = 
	`›í
(
∑th
, 0)) < 0){

34 
	`¥ötf
(2, "ls: c™nŸ o≥¿%s\n", 
∑th
);

38 if(
	`f°©
(
fd
, &
°
) < 0){

39 
	`¥ötf
(2, "ls: c™nŸ sèà%s\n", 
∑th
);

40 
	`˛o£
(
fd
);

44 
°
.
ty≥
){

45 
T_FILE
:

46 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
∑th
), 
°
.
ty≥
, st.
öo
, st.
size
);

49 
T_DIR
:

50 if(
	`°æí
(
∑th
Ë+ 1 + 
DIRSIZ
 + 1 >  
buf
){

51 
	`¥ötf
(1, "ls:ÖathÅooÜong\n");

54 
	`°r˝y
(
buf
, 
∑th
);

55 
p
 = 
buf
+
	`°æí
(buf);

56 *
p
++ = '/';

57 
	`ªad
(
fd
, &
de
, (de)) == (de)){

58 if(
de
.
öum
 == 0)

60 
	`memmove
(
p
, 
de
.
«me
, 
DIRSIZ
);

61 
p
[
DIRSIZ
] = 0;

62 if(
	`°©
(
buf
, &
°
) < 0){

63 
	`¥ötf
(1, "ls: c™nŸ sèà%s\n", 
buf
);

66 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
buf
), 
°
.
ty≥
, st.
öo
, st.
size
);

70 
	`˛o£
(
fd
);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
i
;

78 if(
¨gc
 < 2){

79 
	`ls
(".");

80 
	`exô
();

82 
i
=1; i<
¨gc
; i++)

83 
	`ls
(
¨gv
[
i
]);

84 
	`exô
();

85 
	}
}

	@main.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"x86.h
"

8 
boŸŸhîs
();

9 
	$mpmaö
(Ë
	`__©åibuã__
((
n‹ëu∫
));

13 
	$maö
()

15 
ed©a
[], 
íd
[];

18 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

20 
	`mp_öô
();

21 
	`œpic_öô
(
	`mp_b˝u
());

22 
	`˝rötf
("\n˝u%d: sèπög xv6\n\n", 
	`˝u
());

24 
	`pöô
();

25 
	`böô
();

26 
	`pic_öô
();

27 
	`iﬂpic_öô
();

28 
	`köô
();

29 
	`tvöô
();

30 
	`fûeöô
();

31 
	`iöô
();

32 
	`c⁄sﬁe_öô
();

33 
	`ide_öô
();

34 if(!
ismp
)

35 
	`timî_öô
();

36 
	`u£röô
();

37 
	`boŸŸhîs
();

40 
	`mpmaö
();

41 
	}
}

46 
	$mpmaö
()

48 
	`˝rötf
("˝u%d: mpmaö\n", 
	`˝u
());

49 
	`idtöô
();

50 if(
	`˝u
(Ë!
	`mp_b˝u
())

51 
	`œpic_öô
(
	`˝u
());

52 
	`£tup£gs
(0);

53 
	`xchg
(&
˝us
[
	`˝u
()].
boŸed
, 1);

55 
	`˝rötf
("cpu%d: scheduling\n");

56 
	`scheduÀr
();

57 
	}
}

60 
	$boŸŸhîs
()

62 
uch¨
 
_bö¨y_boŸŸhî_°¨t
[], 
_bö¨y_boŸŸhî_size
[];

63 
uch¨
 *
code
;

64 
˝u
 *
c
;

65 *
°ack
;

68 
code
 = (
uch¨
*)0x7000;

69 
	`memmove
(
code
, 
_bö¨y_boŸŸhî_°¨t
, (
uöt
)
_bö¨y_boŸŸhî_size
);

71 
c
 = 
˝us
; c < cpus+
n˝u
; c++){

72 if(
c
 =
˝us
+
	`˝u
())

76 
°ack
 = 
	`kÆloc
(
KSTACKSIZE
);

77 *(**)(
code
-4Ë
°ack
 + 
KSTACKSIZE
;

78 *(**)(
code
-8Ë
mpmaö
;

79 
	`œpic_°¨èp
(
c
->
≠icid
, (
uöt
)
code
);

82 
c
->
boŸed
 == 0)

85 
	}
}

	@mkdir.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage: mkdir files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`mkdú
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "mkdú: %†ÁûedÅÿ¸óã\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@mkfs.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<as£π.h
>

7 
	~"ty≥s.h
"

8 
	~"fs.h
"

10 
	gnblocks
 = 995;

11 
	gnöodes
 = 200;

12 
	gsize
 = 1024;

14 
	gfsfd
;

15 
su≥rblock
 
	gsb
;

16 
	gzî€s
[512];

17 
uöt
 
	g‰ìblock
;

18 
uöt
 
	gu£dblocks
;

19 
uöt
 
	gbôblocks
;

20 
uöt
 
	g‰ìöode
 = 1;

22 
bÆloc
();

23 
w£˘
(
uöt
, *);

24 
wöode
(
uöt
, 
döode
*);

25 
röode
(
uöt
 
öum
, 
döode
 *
ù
);

26 
r£˘
(
uöt
 
£c
, *
buf
);

27 
uöt
 
üŒoc
(
ush‹t
 
ty≥
);

28 
üµíd
(
uöt
 
öum
, *
p
, 
n
);

31 
ush‹t


32 
	$xsh‹t
(
ush‹t
 
x
)

34 
ush‹t
 
y
;

35 
uch¨
 *
a
 = (uch¨*Ë&
y
;

36 
a
[0] = 
x
;

37 
a
[1] = 
x
 >> 8;

38  
y
;

39 
	}
}

41 
uöt


42 
	$xöt
(
uöt
 
x
)

44 
uöt
 
y
;

45 
uch¨
 *
a
 = (uch¨*Ë&
y
;

46 
a
[0] = 
x
;

47 
a
[1] = 
x
 >> 8;

48 
a
[2] = 
x
 >> 16;

49 
a
[3] = 
x
 >> 24;

50  
y
;

51 
	}
}

54 
	$maö
(
¨gc
, *
¨gv
[])

56 
i
, 
cc
, 
fd
;

57 
uöt
 
roŸöo
, 
öum
, 
off
;

58 
dúít
 
de
;

59 
buf
[512];

60 
döode
 
dö
;

62 if(
¨gc
 < 2){

63 
	`Ârötf
(
°dîr
, "Usage: mkfs fs.img files...\n");

64 
	`exô
(1);

67 
	`as£π
((512 % (
döode
)) == 0);

68 
	`as£π
((512 % (
dúít
)) == 0);

70 
fsfd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0666);

71 if(
fsfd
 < 0){

72 
	`≥º‹
(
¨gv
[1]);

73 
	`exô
(1);

76 
sb
.
size
 = 
	`xöt
(size);

77 
sb
.
nblocks
 = 
	`xöt
(nblocks);

78 
sb
.
nöodes
 = 
	`xöt
(ninodes);

80 
bôblocks
 = 
size
/(512*8) + 1;

81 
u£dblocks
 = 
nöodes
 / 
IPB
 + 3 + 
bôblocks
;

82 
‰ìblock
 = 
u£dblocks
;

84 
	`¥ötf
("u£d %d (bô %dÇöodê%luË‰ì %uÅŸÆ %d\n", 
u£dblocks
,

85 
bôblocks
, 
nöodes
/
IPB
 + 1, 
‰ìblock
, 
nblocks
+
u£dblocks
);

87 
	`as£π
(
nblocks
 + 
u£dblocks
 =
size
);

89 
i
 = 0; i < 
nblocks
 + 
u£dblocks
; i++)

90 
	`w£˘
(
i
, 
zî€s
);

92 
	`w£˘
(1, &
sb
);

94 
roŸöo
 = 
	`üŒoc
(
T_DIR
);

95 
	`as£π
(
roŸöo
 == 1);

97 
	`bzîo
(&
de
, (de));

98 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

99 
	`°r˝y
(
de
.
«me
, ".");

100 
	`üµíd
(
roŸöo
, &
de
, (de));

102 
	`bzîo
(&
de
, (de));

103 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

104 
	`°r˝y
(
de
.
«me
, "..");

105 
	`üµíd
(
roŸöo
, &
de
, (de));

107 
i
 = 2; i < 
¨gc
; i++){

108 
	`as£π
(
	`ödex
(
¨gv
[
i
], '/') == 0);

110 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

111 
	`≥º‹
(
¨gv
[
i
]);

112 
	`exô
(1);

119 if(
¨gv
[
i
][0] == '_')

120 ++
¨gv
[
i
];

122 
öum
 = 
	`üŒoc
(
T_FILE
);

124 
	`bzîo
(&
de
, (de));

125 
de
.
öum
 = 
	`xsh‹t
(inum);

126 
	`°∫˝y
(
de
.
«me
, 
¨gv
[
i
], 
DIRSIZ
);

127 
	`üµíd
(
roŸöo
, &
de
, (de));

129 (
cc
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

130 
	`üµíd
(
öum
, 
buf
, 
cc
);

132 
	`˛o£
(
fd
);

136 
	`röode
(
roŸöo
, &
dö
);

137 
off
 = 
	`xöt
(
dö
.
size
);

138 
off
 = ((off/
BSIZE
) + 1) * BSIZE;

139 
dö
.
size
 = 
	`xöt
(
off
);

140 
	`wöode
(
roŸöo
, &
dö
);

142 
	`bÆloc
(
u£dblocks
);

144 
	`exô
(0);

145 
	}
}

148 
	$w£˘
(
uöt
 
£c
, *
buf
)

150 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

151 
	`≥º‹
("lseek");

152 
	`exô
(1);

154 if(
	`wrôe
(
fsfd
, 
buf
, 512) != 512){

155 
	`≥º‹
("write");

156 
	`exô
(1);

158 
	}
}

160 
uöt


161 
	$i2b
(
uöt
 
öum
)

163  (
öum
 / 
IPB
) + 2;

164 
	}
}

167 
	$wöode
(
uöt
 
öum
, 
döode
 *
ù
)

169 
buf
[512];

170 
uöt
 
bn
;

171 
döode
 *
dù
;

173 
bn
 = 
	`i2b
(
öum
);

174 
	`r£˘
(
bn
, 
buf
);

175 
dù
 = ((
döode
*Ë
buf
Ë+ (
öum
 % 
IPB
);

176 *
dù
 = *
ù
;

177 
	`w£˘
(
bn
, 
buf
);

178 
	}
}

181 
	$röode
(
uöt
 
öum
, 
döode
 *
ù
)

183 
buf
[512];

184 
uöt
 
bn
;

185 
döode
 *
dù
;

187 
bn
 = 
	`i2b
(
öum
);

188 
	`r£˘
(
bn
, 
buf
);

189 
dù
 = ((
döode
*Ë
buf
Ë+ (
öum
 % 
IPB
);

190 *
ù
 = *
dù
;

191 
	}
}

194 
	$r£˘
(
uöt
 
£c
, *
buf
)

196 if(
	`l£ek
(
fsfd
, 
£c
 * 512L, 0) != sec * 512L){

197 
	`≥º‹
("lseek");

198 
	`exô
(1);

200 if(
	`ªad
(
fsfd
, 
buf
, 512) != 512){

201 
	`≥º‹
("read");

202 
	`exô
(1);

204 
	}
}

206 
uöt


207 
	$üŒoc
(
ush‹t
 
ty≥
)

209 
uöt
 
öum
 = 
‰ìöode
++;

210 
döode
 
dö
;

212 
	`bzîo
(&
dö
, (din));

213 
dö
.
ty≥
 = 
	`xsh‹t
(type);

214 
dö
.
∆ök
 = 
	`xsh‹t
(1);

215 
dö
.
size
 = 
	`xöt
(0);

216 
	`wöode
(
öum
, &
dö
);

217  
öum
;

218 
	}
}

221 
	$bÆloc
(
u£d
)

223 
uch¨
 
buf
[512];

224 
i
;

226 
	`¥ötf
("bÆloc: fú° %d block†havêbì¿Æloˇãd\n", 
u£d
);

227 
	`as£π
(
u£d
 < 512);

228 
	`bzîo
(
buf
, 512);

229 
i
 = 0; i < 
u£d
; i++) {

230 
buf
[
i
/8] = buf[i/8] | (0x1 << (i%8));

232 
	`¥ötf
("bÆloc: wrôêbôm≠ blockáà£˘‹ %lu\n", 
nöodes
/
IPB
 + 3);

233 
	`w£˘
(
nöodes
 / 
IPB
 + 3, 
buf
);

234 
	}
}

236 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

239 
	$üµíd
(
uöt
 
öum
, *
xp
, 
n
)

241 *
p
 = (*Ë
xp
;

242 
uöt
 
fbn
, 
off
, 
n1
;

243 
döode
 
dö
;

244 
buf
[512];

245 
uöt
 
ödúe˘
[
NINDIRECT
];

246 
uöt
 
x
;

248 
	`röode
(
öum
, &
dö
);

250 
off
 = 
	`xöt
(
dö
.
size
);

251 
n
 > 0){

252 
fbn
 = 
off
 / 512;

253 
	`as£π
(
fbn
 < 
MAXFILE
);

254 if(
fbn
 < 
NDIRECT
) {

255 if(
	`xöt
(
dö
.
addrs
[
fbn
]) == 0) {

256 
dö
.
addrs
[
fbn
] = 
	`xöt
(
‰ìblock
++);

257 
u£dblocks
++;

259 
x
 = 
	`xöt
(
dö
.
addrs
[
fbn
]);

261 if(
	`xöt
(
dö
.
addrs
[
INDIRECT
]) == 0) {

263 
dö
.
addrs
[
INDIRECT
] = 
	`xöt
(
‰ìblock
++);

264 
u£dblocks
++;

267 
	`r£˘
(
	`xöt
(
dö
.
addrs
[
INDIRECT
]), (*Ë
ödúe˘
);

268 if(
ödúe˘
[
fbn
 - 
NDIRECT
] == 0) {

269 
ödúe˘
[
fbn
 - 
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

270 
u£dblocks
++;

271 
	`w£˘
(
	`xöt
(
dö
.
addrs
[
INDIRECT
]), (*Ë
ödúe˘
);

273 
x
 = 
	`xöt
(
ödúe˘
[
fbn
-
NDIRECT
]);

275 
n1
 = 
	`mö
(
n
, (
fbn
 + 1Ë* 512 - 
off
);

276 
	`r£˘
(
x
, 
buf
);

277 
	`bc›y
(
p
, 
buf
 + 
off
 - (
fbn
 * 512), 
n1
);

278 
	`w£˘
(
x
, 
buf
);

279 
n
 -
n1
;

280 
off
 +
n1
;

281 
p
 +
n1
;

283 
dö
.
size
 = 
	`xöt
(
off
);

284 
	`wöode
(
öum
, &
dö
);

285 
	}
}

	@mmu.h

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	s£gdesc
 {

29 
uöt
 
	mlim_15_0
 : 16;

30 
uöt
 
	mba£_15_0
 : 16;

31 
uöt
 
	mba£_23_16
 : 8;

32 
uöt
 
	mty≥
 : 4;

33 
uöt
 
	ms
 : 1;

34 
uöt
 
	md∂
 : 2;

35 
uöt
 
	mp
 : 1;

36 
uöt
 
	mlim_19_16
 : 4;

37 
uöt
 
	mavl
 : 1;

38 
uöt
 
	mrsv1
 : 1;

39 
uöt
 
	mdb
 : 1;

40 
uöt
 
	mg
 : 1;

41 
uöt
 
	mba£_31_24
 : 8;

45 
	#SEG_NULL
 (
£gdesc
){ 0,0,0,0,0,0,0,0,0,0,0,0,0 }

	)

48 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

49 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

50 
ty≥
, 1, 
d∂
, 1, (
uöt
Ë(
lim
) >> 28, 0, 0, 1, 1, \

51 (
uöt
Ë(
ba£
Ë>> 24 }

	)

53 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

54 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

55 
ty≥
, 1, 
d∂
, 1, (
uöt
Ë(
lim
) >> 16, 0, 0, 1, 0, \

56 (
uöt
Ë(
ba£
Ë>> 24 }

	)

58 
	#DPL_USER
 0x3

59 

	)

61 
	#STA_X
 0x8

62 
	#STA_E
 0x4

63 
	#STA_C
 0x4

64 
	#STA_W
 0x2

65 
	#STA_R
 0x2

66 
	#STA_A
 0x1

67 

	)

69 
	#STS_T16A
 0x1

70 
	#STS_LDT
 0x2

71 
	#STS_T16B
 0x3

72 
	#STS_CG16
 0x4

73 
	#STS_TG
 0x5

74 
	#STS_IG16
 0x6

75 
	#STS_TG16
 0x7

76 
	#STS_T32A
 0x9

77 
	#STS_T32B
 0xB

78 
	#STS_CG32
 0xC

79 
	#STS_IG32
 0xE

80 
	#STS_TG32
 0xF

81 

	)

83 
	sèsk°©e
 {

84 
uöt
 
	mlök
;

85 
uöt
 
	me•0
;

86 
ush‹t
 
	mss0
;

87 
ush‹t
 
	m∑ddög1
;

88 
uöt
 *
	me•1
;

89 
ush‹t
 
	mss1
;

90 
ush‹t
 
	m∑ddög2
;

91 
uöt
 *
	me•2
;

92 
ush‹t
 
	mss2
;

93 
ush‹t
 
	m∑ddög3
;

94 *
	m¸3
;

95 
uöt
 *
	meù
;

96 
uöt
 
	meÊags
;

97 
uöt
 
	móx
;

98 
uöt
 
	mecx
;

99 
uöt
 
	medx
;

100 
uöt
 
	mebx
;

101 
uöt
 *
	me•
;

102 
uöt
 *
	mebp
;

103 
uöt
 
	mesi
;

104 
uöt
 
	medi
;

105 
ush‹t
 
	mes
;

106 
ush‹t
 
	m∑ddög4
;

107 
ush‹t
 
	mcs
;

108 
ush‹t
 
	m∑ddög5
;

109 
ush‹t
 
	mss
;

110 
ush‹t
 
	m∑ddög6
;

111 
ush‹t
 
	mds
;

112 
ush‹t
 
	m∑ddög7
;

113 
ush‹t
 
	mfs
;

114 
ush‹t
 
	m∑ddög8
;

115 
ush‹t
 
	mgs
;

116 
ush‹t
 
	m∑ddög9
;

117 
ush‹t
 
	mldt
;

118 
ush‹t
 
	m∑ddög10
;

119 
ush‹t
 
	mt
;

120 
ush‹t
 
	miomb
;

124 
	sg©edesc
 {

125 
uöt
 
	moff_15_0
 : 16;

126 
uöt
 
	mcs
 : 16;

127 
uöt
 
	m¨gs
 : 5;

128 
uöt
 
	mrsv1
 : 3;

129 
uöt
 
	mty≥
 : 4;

130 
uöt
 
	ms
 : 1;

131 
uöt
 
	md∂
 : 2;

132 
uöt
 
	mp
 : 1;

133 
uöt
 
	moff_31_16
 : 16;

144 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d
) \

146 (
g©e
).
off_15_0
 = (
uöt
Ë(
off
) & 0xffff; \

147 (
g©e
).
cs
 = (
£l
); \

148 (
g©e
).
¨gs
 = 0; \

149 (
g©e
).
rsv1
 = 0; \

150 (
g©e
).
ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

151 (
g©e
).
s
 = 0; \

152 (
g©e
).
d∂
 = (
d
); \

153 (
g©e
).
p
 = 1; \

154 (
g©e
).
off_31_16
 = (
uöt
Ë(
off
) >> 16; \

155 }

	)

	@mp.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"mp.h
"

9 
	~"x86.h
"

10 
	~"mmu.h
"

11 
	~"¥oc.h
"

13 
˝u
 
	g˝us
[
NCPU
];

14 
˝u
 *
	gb˝u
;

15 
	gismp
;

16 
	gn˝u
;

17 
uch¨
 
	giﬂpic_id
;

20 
	$mp_b˝u
()

22  
b˝u
-
˝us
;

23 
	}
}

25 
uch¨


26 
	$sum
(
uch¨
 *
addr
, 
Àn
)

28 
i
, 
sum
;

30 
sum
 = 0;

31 
i
=0; i<
Àn
; i++)

32 
sum
 +
addr
[
i
];

33  
sum
;

34 
	}
}

37 
mp
*

38 
	$mp_£¨ch1
(
uch¨
 *
addr
, 
Àn
)

40 
uch¨
 *
e
, *
p
;

42 
e
 = 
addr
+
Àn
;

43 
p
 = 
addr
;Ö < 
e
;Ö +(
mp
))

44 if(
	`memcmp
(
p
, "_MP_", 4Ë=0 && 
	`sum
’, (
mp
)) == 0)

45  (
mp
*)
p
;

47 
	}
}

54 
mp
*

55 
	$mp_£¨ch
()

57 
uch¨
 *
bda
;

58 
uöt
 
p
;

59 
mp
 *mp;

61 
bda
 = (
uch¨
*)0x400;

62 if((
p
 = ((
bda
[0x0F]<<8)|bda[0x0E]) << 4)){

63 if((
mp
 = 
	`mp_£¨ch1
((
uch¨
*)
p
, 1024)))

64  
mp
;

66 
p
 = ((
bda
[0x14]<<8)|bda[0x13])*1024;

67 if((
mp
 = 
	`mp_£¨ch1
((
uch¨
*)
p
-1024, 1024)))

68  
mp
;

70  
	`mp_£¨ch1
((
uch¨
*)0xF0000, 0x10000);

71 
	}
}

78 
mpc⁄f
*

79 
	$mp_c⁄fig
(
mp
 **
pmp
)

81 
mpc⁄f
 *
c⁄f
;

82 
mp
 *mp;

84 if((
mp
 = 
	`mp_£¨ch
()Ë=0 || mp->
phyßddr
 == 0)

86 
c⁄f
 = (
mpc⁄f
*)
mp
->
phyßddr
;

87 if(
	`memcmp
(
c⁄f
, "PCMP", 4) != 0)

89 if(
c⁄f
->
vîsi⁄
 != 1 && conf->version != 4)

91 if(
	`sum
((
uch¨
*)
c⁄f
, c⁄f->
Àngth
) != 0)

93 *
pmp
 = 
mp
;

94  
c⁄f
;

95 
	}
}

98 
	$mp_öô
()

100 
uch¨
 *
p
, *
e
;

101 
mp
 *mp;

102 
mpc⁄f
 *
c⁄f
;

103 
mµroc
 *
¥oc
;

104 
mpiﬂpic
 *
iﬂpic
;

106 
b˝u
 = &
˝us
[
n˝u
];

107 if((
c⁄f
 = 
	`mp_c⁄fig
(&
mp
)) == 0)

110 
ismp
 = 1;

111 
œpic
 = (
uöt
*)
c⁄f
->
œpiˇddr
;

113 
p
=(
uch¨
*)(
c⁄f
+1), 
e
=(uch¨*)c⁄f+c⁄f->
Àngth
;Ö<e; ){

114 *
p
){

115 
MPPROC
:

116 
¥oc
 = (
mµroc
*)
p
;

117 
˝us
[
n˝u
].
≠icid
 = 
¥oc
->apicid;

118 if(
¥oc
->
Êags
 & 
MPBOOT
)

119 
b˝u
 = &
˝us
[
n˝u
];

120 
n˝u
++;

121 
p
 +(
mµroc
);

123 
MPIOAPIC
:

124 
iﬂpic
 = (
mpiﬂpic
*)
p
;

125 
iﬂpic_id
 = 
iﬂpic
->
≠i˙o
;

126 
p
 +(
mpiﬂpic
);

128 
MPBUS
:

129 
MPIOINTR
:

130 
MPLINTR
:

131 
p
 += 8;

134 
	`˝rötf
("mp_öô: unknow¿c⁄figÅy≥ %x\n", *
p
);

135 
	`∑nic
("mp_init");

139 if(
mp
->
im¸p
){

142 
	`outb
(0x22, 0x70);

143 
	`outb
(0x23, 
	`öb
(0x23) | 1);

145 
	}
}

	@mp.h

3 
	smp
 {

4 
uch¨
 
	msig«tuª
[4];

5 *
	mphyßddr
;

6 
uch¨
 
	mÀngth
;

7 
uch¨
 
	m•e¸ev
;

8 
uch¨
 
	mchecksum
;

9 
uch¨
 
	mty≥
;

10 
uch¨
 
	mim¸p
;

11 
uch¨
 
	mª£rved
[3];

14 
	smpc⁄f
 {

15 
uch¨
 
	msig«tuª
[4];

16 
ush‹t
 
	mÀngth
;

17 
uch¨
 
	mvîsi⁄
;

18 
uch¨
 
	mchecksum
;

19 
uch¨
 
	m¥odu˘
[20];

20 
uöt
 *
	m€mèbÀ
;

21 
ush‹t
 
	m€mÀngth
;

22 
ush‹t
 
	míåy
;

23 
uöt
 *
	mœpiˇddr
;

24 
ush‹t
 
	mxÀngth
;

25 
uch¨
 
	mxchecksum
;

26 
uch¨
 
	mª£rved
;

29 
	smµroc
 {

30 
uch¨
 
	mty≥
;

31 
uch¨
 
	m≠icid
;

32 
uch¨
 
	mvîsi⁄
;

33 
uch¨
 
	mÊags
;

34 
	#MPBOOT
 0x02

35 
uch¨
 
sig«tuª
[4];

36 
uöt
 
„©uª
;

37 
uch¨
 
ª£rved
[8];

	)

40 
	smpiﬂpic
 {

41 
uch¨
 
	mty≥
;

42 
uch¨
 
	m≠i˙o
;

43 
uch¨
 
	mvîsi⁄
;

44 
uch¨
 
	mÊags
;

45 
uöt
 *
	maddr
;

49 
	#MPPROC
 0x00

50 
	#MPBUS
 0x01

51 
	#MPIOAPIC
 0x02

52 
	#MPIOINTR
 0x03

53 
	#MPLINTR
 0x04

54 

	)

	@param.h

1 
	#NPROC
 64

2 
	#PAGE
 4096

3 
	#KSTACKSIZE
 
PAGE


4 
	#NCPU
 8

5 
	#NOFILE
 16

6 
	#NFILE
 100

7 
	#NBUF
 10

8 
	#NINODE
 50

9 
	#NDEV
 10

10 
	#ROOTDEV
 1

	@picirq.c

3 
	~"ty≥s.h
"

4 
	~"x86.h
"

5 
	~"å≠s.h
"

8 
	#IO_PIC1
 0x20

9 
	#IO_PIC2
 0xA0

10 

	)

11 
	#IRQ_SLAVE
 2

12 

	)

15 
ush‹t
 
	gúqmask
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

18 
	$pic_£tmask
(
ush‹t
 
mask
)

20 
úqmask
 = 
mask
;

21 
	`outb
(
IO_PIC1
+1, 
mask
);

22 
	`outb
(
IO_PIC2
+1, 
mask
 >> 8);

23 
	}
}

26 
	$pic_íabÀ
(
úq
)

28 
	`pic_£tmask
(
úqmask
 & ~(1<<
úq
));

29 
	}
}

33 
	$pic_öô
()

36 
	`outb
(
IO_PIC1
+1, 0xFF);

37 
	`outb
(
IO_PIC2
+1, 0xFF);

45 
	`outb
(
IO_PIC1
, 0x11);

48 
	`outb
(
IO_PIC1
+1, 
IRQ_OFFSET
);

52 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

62 
	`outb
(
IO_PIC1
+1, 0x3);

65 
	`outb
(
IO_PIC2
, 0x11);

66 
	`outb
(
IO_PIC2
+1, 
IRQ_OFFSET
 + 8);

67 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

70 
	`outb
(
IO_PIC2
+1, 0x3);

76 
	`outb
(
IO_PIC1
, 0x68);

77 
	`outb
(
IO_PIC1
, 0x0a);

79 
	`outb
(
IO_PIC2
, 0x68);

80 
	`outb
(
IO_PIC2
, 0x0a);

82 if(
úqmask
 != 0xFFFF)

83 
	`pic_£tmask
(
úqmask
);

84 
	}
}

	@pipe.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"fûe.h
"

7 
	~"•ölock.h
"

9 
	#PIPESIZE
 512

	)

11 
	spùe
 {

12 
	mªad›í
;

13 
	mwrôe›í
;

14 
	mwrôï
;

15 
	mªadp
;

16 
•ölock
 
	mlock
;

17 
	md©a
[
PIPESIZE
];

21 
	$pùóŒoc
(
fûe
 **
f0
, fûê**
f1
)

23 
pùe
 *
p
;

25 
p
 = 0;

26 *
f0
 = *
f1
 = 0;

27 if((*
f0
 = 
	`fûóŒoc
()Ë=0 || (*
f1
 = filealloc()) == 0)

28 
bad
;

29 if((
p
 = (
pùe
*)
	`kÆloc
(
PAGE
)) == 0)

30 
bad
;

31 
p
->
ªad›í
 = 1;

32 
p
->
wrôe›í
 = 1;

33 
p
->
wrôï
 = 0;

34 
p
->
ªadp
 = 0;

35 
	`öôlock
(&
p
->
lock
, "pipe");

36 (*
f0
)->
ty≥
 = 
FD_PIPE
;

37 (*
f0
)->
ªadabÀ
 = 1;

38 (*
f0
)->
wrôabÀ
 = 0;

39 (*
f0
)->
pùe
 = 
p
;

40 (*
f1
)->
ty≥
 = 
FD_PIPE
;

41 (*
f1
)->
ªadabÀ
 = 0;

42 (*
f1
)->
wrôabÀ
 = 1;

43 (*
f1
)->
pùe
 = 
p
;

46 
bad
:

47 if(
p
)

48 
	`k‰ì
((*)
p
, 
PAGE
);

49 if(*
f0
){

50 (*
f0
)->
ty≥
 = 
FD_NONE
;

51 
	`fûe˛o£
(*
f0
);

53 if(*
f1
){

54 (*
f1
)->
ty≥
 = 
FD_NONE
;

55 
	`fûe˛o£
(*
f1
);

58 
	}
}

61 
	$pùe˛o£
(
pùe
 *
p
, 
wrôabÀ
)

63 
	`acquúe
(&
p
->
lock
);

64 if(
wrôabÀ
){

65 
p
->
wrôe›í
 = 0;

66 
	`wakeup
(&
p
->
ªadp
);

68 
p
->
ªad›í
 = 0;

69 
	`wakeup
(&
p
->
wrôï
);

71 
	`ªÀa£
(&
p
->
lock
);

73 if(
p
->
ªad›í
 =0 &&Ö->
wrôe›í
 == 0)

74 
	`k‰ì
((*)
p
, 
PAGE
);

75 
	}
}

78 
	$pùewrôe
(
pùe
 *
p
, *
addr
, 
n
)

80 
i
;

82 
	`acquúe
(&
p
->
lock
);

83 
i
 = 0; i < 
n
; i++){

84 ((
p
->
wrôï
 + 1Ë% 
PIPESIZE
Ë=p->
ªadp
){

85 if(
p
->
ªad›í
 =0 || 
˝
->
kûÀd
){

86 
	`ªÀa£
(&
p
->
lock
);

89 
	`wakeup
(&
p
->
ªadp
);

90 
	`¶ìp
(&
p
->
wrôï
, &p->
lock
);

92 
p
->
d©a
[p->
wrôï
] = 
addr
[
i
];

93 
p
->
wrôï
 = (p->wrôï + 1Ë% 
PIPESIZE
;

95 
	`wakeup
(&
p
->
ªadp
);

96 
	`ªÀa£
(&
p
->
lock
);

97  
i
;

98 
	}
}

101 
	$pùîód
(
pùe
 *
p
, *
addr
, 
n
)

103 
i
;

105 
	`acquúe
(&
p
->
lock
);

106 
p
->
ªadp
 =p->
wrôï
 &&Ö->
wrôe›í
){

107 if(
˝
->
kûÀd
){

108 
	`ªÀa£
(&
p
->
lock
);

111 
	`¶ìp
(&
p
->
ªadp
, &p->
lock
);

113 
i
 = 0; i < 
n
; i++){

114 if(
p
->
ªadp
 =p->
wrôï
)

116 
addr
[
i
] = 
p
->
d©a
[p->
ªadp
];

117 
p
->
ªadp
 = (p->ªad∞+ 1Ë% 
PIPESIZE
;

119 
	`wakeup
(&
p
->
wrôï
);

120 
	`ªÀa£
(&
p
->
lock
);

121  
i
;

122 
	}
}

	@printf.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$putc
(
fd
, 
c
)

8 
	`wrôe
(
fd
, &
c
, 1);

9 
	}
}

12 
	$¥ötöt
(
fd
, 
xx
, 
ba£
, 
sgn
)

14 
digôs
[] = "0123456789ABCDEF";

15 
buf
[16];

16 
i
, 
√g
;

17 
uöt
 
x
;

19 
√g
 = 0;

20 if(
sgn
 && 
xx
 < 0){

21 
√g
 = 1;

22 
x
 = -
xx
;

24 
x
 = 
xx
;

27 
i
 = 0;

29 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

30 }(
x
 /
ba£
) != 0);

31 if(
√g
)

32 
buf
[
i
++] = '-';

34 --
i
 >= 0)

35 
	`putc
(
fd
, 
buf
[
i
]);

36 
	}
}

40 
	$¥ötf
(
fd
, *
fmt
, ...)

42 *
s
;

43 
c
, 
i
, 
°©e
;

44 
uöt
 *
≠
;

46 
°©e
 = 0;

47 
≠
 = (
uöt
*)(*)&
fmt
 + 1;

48 
i
 = 0; 
fmt
[i]; i++){

49 
c
 = 
fmt
[
i
] & 0xff;

50 if(
°©e
 == 0){

51 if(
c
 == '%'){

52 
°©e
 = '%';

54 
	`putc
(
fd
, 
c
);

56 } if(
°©e
 == '%'){

57 if(
c
 == 'd'){

58 
	`¥ötöt
(
fd
, *
≠
, 10, 1);

59 
≠
++;

60 } if(
c
 == 'x' || c == 'p'){

61 
	`¥ötöt
(
fd
, *
≠
, 16, 0);

62 
≠
++;

63 } if(
c
 == 's'){

64 
s
 = (*)*
≠
;

65 
≠
++;

66 if(
s
 == 0)

67 
s
 = "(null)";

68 *
s
 != 0){

69 
	`putc
(
fd
, *
s
);

70 
s
++;

72 } if(
c
 == 'c'){

73 
	`putc
(
fd
, *
≠
);

74 
≠
++;

75 } if(
c
 == '%'){

76 
	`putc
(
fd
, 
c
);

79 
	`putc
(
fd
, '%');

80 
	`putc
(
fd
, 
c
);

82 
°©e
 = 0;

85 
	}
}

	@proc.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"x86.h
"

6 
	~"¥oc.h
"

7 
	~"•ölock.h
"

9 
•ölock
 
	g¥oc_èbÀ_lock
;

11 
¥oc
 
	g¥oc
[
NPROC
];

12 
¥oc
 *
	göô¥oc
;

14 
	g√xçid
 = 1;

15 
f‹kªt
();

16 
f‹kªt1
(
å≠‰ame
*);

19 
	$pöô
()

21 
	`öôlock
(&
¥oc_èbÀ_lock
, "proc_table");

22 
	}
}

27 
¥oc
*

28 
	$Ælo˝roc
()

30 
i
;

31 
¥oc
 *
p
;

33 
	`acquúe
(&
¥oc_èbÀ_lock
);

34 
i
 = 0; i < 
NPROC
; i++){

35 
p
 = &
¥oc
[
i
];

36 if(
p
->
°©e
 =
UNUSED
){

37 
p
->
°©e
 = 
EMBRYO
;

38 
p
->
pid
 = 
√xçid
++;

39 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

40  
p
;

43 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

45 
	}
}

50 
	$grow¥oc
(
n
)

52 *
√wmem
, *
ﬁdmem
;

54 
√wmem
 = 
	`kÆloc
(
˝
->
sz
 + 
n
);

55 if(
√wmem
 == 0)

57 
	`memmove
(
√wmem
, 
˝
->
mem
, cp->
sz
);

58 
	`mem£t
(
√wmem
 + 
˝
->
sz
, 0, 
n
);

59 
ﬁdmem
 = 
˝
->
mem
;

60 
˝
->
mem
 = 
√wmem
;

61 
	`k‰ì
(
ﬁdmem
, 
˝
->
sz
);

62 
˝
->
sz
 +
n
;

63 
	`£tup£gs
(
˝
);

64  
˝
->
sz
 - 
n
;

65 
	}
}

70 
	$£tup£gs
(
¥oc
 *
p
)

72 
˝u
 *
c
;

74 
	`push˛i
();

75 
c
 = &
˝us
[
	`˝u
()];

76 
c
->
ts
.
ss0
 = 
SEG_KDATA
 << 3;

77 if(
p
)

78 
c
->
ts
.
e•0
 = (
uöt
)(
p
->
k°ack
 + 
KSTACKSIZE
);

80 
c
->
ts
.
e•0
 = 0xffffffff;

82 
c
->
gdt
[0] = 
SEG_NULL
;

83 
c
->
gdt
[
SEG_KCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0x100000 + 64*1024-1, 0);

84 
c
->
gdt
[
SEG_KDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 0);

85 
c
->
gdt
[
SEG_TSS
] = 
	`SEG16
(
STS_T32A
, (
uöt
)&c->
ts
, (c->ts)-1, 0);

86 
c
->
gdt
[
SEG_TSS
].
s
 = 0;

87 if(
p
){

88 
c
->
gdt
[
SEG_UCODE
] = 
	`SEG
(
STA_X
|
STA_R
, (
uöt
)
p
->
mem
,Ö->
sz
-1, 
DPL_USER
);

89 
c
->
gdt
[
SEG_UDATA
] = 
	`SEG
(
STA_W
, (
uöt
)
p
->
mem
,Ö->
sz
-1, 
DPL_USER
);

91 
c
->
gdt
[
SEG_UCODE
] = 
SEG_NULL
;

92 
c
->
gdt
[
SEG_UDATA
] = 
SEG_NULL
;

95 
	`lgdt
(
c
->
gdt
, (c->gdt));

96 
	`…r
(
SEG_TSS
 << 3);

97 
	`p›˛i
();

98 
	}
}

103 
¥oc
*

104 
	$c›y¥oc
(
¥oc
 *
p
)

106 
i
;

107 
¥oc
 *
≈
;

110 if((
≈
 = 
	`Ælo˝roc
()) == 0)

114 if((
≈
->
k°ack
 = 
	`kÆloc
(
KSTACKSIZE
)) == 0){

115 
≈
->
°©e
 = 
UNUSED
;

118 
≈
->
tf
 = (
å≠‰ame
*)“p->
k°ack
 + 
KSTACKSIZE
) - 1;

120 if(
p
){

121 
≈
->
∑ª¡
 = 
p
;

122 
	`memmove
(
≈
->
tf
, 
p
->tf, (*np->tf));

124 
≈
->
sz
 = 
p
->sz;

125 if((
≈
->
mem
 = 
	`kÆloc
“p->
sz
)) == 0){

126 
	`k‰ì
(
≈
->
k°ack
, 
KSTACKSIZE
);

127 
≈
->
k°ack
 = 0;

128 
≈
->
°©e
 = 
UNUSED
;

131 
	`memmove
(
≈
->
mem
, 
p
->mem,Çp->
sz
);

133 
i
 = 0; i < 
NOFILE
; i++)

134 if(
p
->
ofûe
[
i
])

135 
≈
->
ofûe
[
i
] = 
	`fûedup
(
p
->ofile[i]);

136 
≈
->
cwd
 = 
	`idup
(
p
->cwd);

140 
	`mem£t
(&
≈
->
c⁄ãxt
, 0, (np->context));

141 
≈
->
c⁄ãxt
.
eù
 = (
uöt
)
f‹kªt
;

142 
≈
->
c⁄ãxt
.
e•
 = (
uöt
Íp->
tf
;

145 
≈
->
tf
->
óx
 = 0;

146  
≈
;

147 
	}
}

151 
	$u£röô
()

153 
¥oc
 *
p
;

154 
uch¨
 
_bö¨y_öôcode_°¨t
[], 
_bö¨y_öôcode_size
[];

156 
p
 = 
	`c›y¥oc
(0);

157 
p
->
sz
 = 
PAGE
;

158 
p
->
mem
 = 
	`kÆloc
’->
sz
);

159 
p
->
cwd
 = 
	`«mei
("/");

160 
	`mem£t
(
p
->
tf
, 0, (*p->tf));

161 
p
->
tf
->
cs
 = (
SEG_UCODE
 << 3Ë| 
DPL_USER
;

162 
p
->
tf
->
ds
 = (
SEG_UDATA
 << 3Ë| 
DPL_USER
;

163 
p
->
tf
->
es
 =Ö->tf->
ds
;

164 
p
->
tf
->
ss
 =Ö->tf->
ds
;

165 
p
->
tf
->
eÊags
 = 
FL_IF
;

166 
p
->
tf
->
e•
 =Ö->
sz
;

169 
p
->
tf
->
e•
 -= 4;

170 *(
uöt
*)(
p
->
mem
 +Ö->
tf
->
e•
) = 0xefefefef;

173 
p
->
tf
->
eù
 = 0;

174 
	`memmove
(
p
->
mem
, 
_bö¨y_öôcode_°¨t
, ()
_bö¨y_öôcode_size
);

175 
	`ß„°r˝y
(
p
->
«me
, "initcode", (p->name));

176 
p
->
°©e
 = 
RUNNABLE
;

178 
öô¥oc
 = 
p
;

179 
	}
}

182 
¥oc
*

183 
	$cuΩroc
()

185 
¥oc
 *
p
;

187 
	`push˛i
();

188 
p
 = 
˝us
[
	`˝u
()].
cuΩroc
;

189 
	`p›˛i
();

190  
p
;

191 
	}
}

201 
	$scheduÀr
()

203 
¥oc
 *
p
;

204 
˝u
 *
c
;

205 
i
;

207 
c
 = &
˝us
[
	`˝u
()];

210 
	`°i
();

213 
	`acquúe
(&
¥oc_èbÀ_lock
);

214 
i
 = 0; i < 
NPROC
; i++){

215 
p
 = &
¥oc
[
i
];

216 if(
p
->
°©e
 !
RUNNABLE
)

222 
c
->
cuΩroc
 = 
p
;

223 
	`£tup£gs
(
p
);

224 
p
->
°©e
 = 
RUNNING
;

225 
	`swtch
(&
c
->
c⁄ãxt
, &
p
->context);

229 
c
->
cuΩroc
 = 0;

230 
	`£tup£gs
(0);

232 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

235 
	}
}

240 
	$sched
()

242 if(
	`ªad_eÊags
()&
FL_IF
)

243 
	`∑nic
("sched interruptible");

244 if(
˝
->
°©e
 =
RUNNING
)

245 
	`∑nic
("schedÑunning");

246 if(!
	`hﬁdög
(&
¥oc_èbÀ_lock
))

247 
	`∑nic
("schedÖroc_table_lock");

248 if(
˝us
[
	`˝u
()].
n˛i
 != 1)

249 
	`∑nic
("schedÜocks");

251 
	`swtch
(&
˝
->
c⁄ãxt
, &
˝us
[
	`˝u
()].context);

252 
	}
}

256 
	$yõld
()

258 
	`acquúe
(&
¥oc_èbÀ_lock
);

259 
˝
->
°©e
 = 
RUNNABLE
;

260 
	`sched
();

261 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

262 
	}
}

267 
	$f‹kªt
()

270 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

273 
	`f‹kªt1
(
˝
->
tf
);

274 
	}
}

279 
	$¶ìp
(*
ch™
, 
•ölock
 *
lk
)

281 if(
˝
 == 0)

282 
	`∑nic
("sleep");

284 if(
lk
 == 0)

285 
	`∑nic
("sleep withoutÜk");

293 if(
lk
 !&
¥oc_èbÀ_lock
){

294 
	`acquúe
(&
¥oc_èbÀ_lock
);

295 
	`ªÀa£
(
lk
);

299 
˝
->
ch™
 = chan;

300 
˝
->
°©e
 = 
SLEEPING
;

301 
	`sched
();

304 
˝
->
ch™
 = 0;

307 if(
lk
 !&
¥oc_èbÀ_lock
){

308 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

309 
	`acquúe
(
lk
);

311 
	}
}

316 
	$wakeup1
(*
ch™
)

318 
¥oc
 *
p
;

320 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++)

321 if(
p
->
°©e
 =
SLEEPING
 &&Ö->
ch™
 == chan)

322 
p
->
°©e
 = 
RUNNABLE
;

323 
	}
}

328 
	$wakeup
(*
ch™
)

330 
	`acquúe
(&
¥oc_èbÀ_lock
);

331 
	`wakeup1
(
ch™
);

332 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

333 
	}
}

339 
	$kûl
(
pid
)

341 
¥oc
 *
p
;

343 
	`acquúe
(&
¥oc_èbÀ_lock
);

344 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++){

345 if(
p
->
pid
 ==Öid){

346 
p
->
kûÀd
 = 1;

348 if(
p
->
°©e
 =
SLEEPING
)

349 
p
->
°©e
 = 
RUNNABLE
;

350 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

354 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

356 
	}
}

362 
	$exô
()

364 
¥oc
 *
p
;

365 
fd
;

367 if(
˝
 =
öô¥oc
)

368 
	`∑nic
("initÉxiting");

371 
fd
 = 0; fd < 
NOFILE
; fd++){

372 if(
˝
->
ofûe
[
fd
]){

373 
	`fûe˛o£
(
˝
->
ofûe
[
fd
]);

374 
˝
->
ofûe
[
fd
] = 0;

378 
	`ùut
(
˝
->
cwd
);

379 
˝
->
cwd
 = 0;

381 
	`acquúe
(&
¥oc_èbÀ_lock
);

384 
	`wakeup1
(
˝
->
∑ª¡
);

387 
p
 = 
¥oc
;Ö < &¥oc[
NPROC
];Ö++){

388 if(
p
->
∑ª¡
 =
˝
){

389 
p
->
∑ª¡
 = 
öô¥oc
;

390 if(
p
->
°©e
 =
ZOMBIE
)

391 
	`wakeup1
(
öô¥oc
);

396 
˝
->
kûÀd
 = 0;

397 
˝
->
°©e
 = 
ZOMBIE
;

398 
	`sched
();

399 
	`∑nic
("zombieÉxit");

400 
	}
}

405 
	$waô
()

407 
¥oc
 *
p
;

408 
i
, 
havekids
, 
pid
;

410 
	`acquúe
(&
¥oc_èbÀ_lock
);

413 
havekids
 = 0;

414 
i
 = 0; i < 
NPROC
; i++){

415 
p
 = &
¥oc
[
i
];

416 if(
p
->
°©e
 =
UNUSED
)

418 if(
p
->
∑ª¡
 =
˝
){

419 if(
p
->
°©e
 =
ZOMBIE
){

421 
	`k‰ì
(
p
->
mem
,Ö->
sz
);

422 
	`k‰ì
(
p
->
k°ack
, 
KSTACKSIZE
);

423 
pid
 = 
p
->pid;

424 
p
->
°©e
 = 
UNUSED
;

425 
p
->
pid
 = 0;

426 
p
->
∑ª¡
 = 0;

427 
p
->
«me
[0] = 0;

428 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

429  
pid
;

431 
havekids
 = 1;

436 if(!
havekids
 || 
˝
->
kûÀd
){

437 
	`ªÀa£
(&
¥oc_èbÀ_lock
);

442 
	`¶ìp
(
˝
, &
¥oc_èbÀ_lock
);

444 
	}
}

450 
	$¥ocdump
()

452 *
°©es
[] = {

453 [
UNUSED
] "unused",

454 [
EMBRYO
] "embryo",

455 [
SLEEPING
] "sleep ",

456 [
RUNNABLE
] "runble",

457 [
RUNNING
] "run ",

458 [
ZOMBIE
] "zombie"

460 
i
, 
j
;

461 
¥oc
 *
p
;

462 *
°©e
;

463 
uöt
 
pc
[10];

465 
i
 = 0; i < 
NPROC
; i++){

466 
p
 = &
¥oc
[
i
];

467 if(
p
->
°©e
 =
UNUSED
)

469 if(
p
->
°©e
 >0 &&Ö->°©ê< 
	`NELEM
(
°©es
) && states[p->state])

470 
°©e
 = 
°©es
[
p
->state];

472 
°©e
 = "???";

473 
	`˝rötf
("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

474 if(
p
->
°©e
 =
SLEEPING
){

475 
	`gëˇŒîpcs
((
uöt
*)
p
->
c⁄ãxt
.
ebp
+2, 
pc
);

476 
j
=0; j<10 && 
pc
[j] != 0; j++)

477 
	`˝rötf
(" %p", 
pc
[
j
]);

479 
	`˝rötf
("\n");

481 
	}
}

	@proc.h

2 
	#SEG_KCODE
 1

3 
	#SEG_KDATA
 2

4 
	#SEG_UCODE
 3

	)

5 
	#SEG_UDATA
 4

	)

6 
	#SEG_TSS
 5

7 
	#NSEGS
 6

	)

16 
	sc⁄ãxt
 {

17 
	meù
;

18 
	me•
;

19 
	mebx
;

20 
	mecx
;

21 
	medx
;

22 
	mesi
;

23 
	medi
;

24 
	mebp
;

27 
	e¥oc_°©e
 { 
	mUNUSED
, 
	mEMBRYO
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

30 
	s¥oc
 {

31 *
	mmem
;

32 
uöt
 
	msz
;

33 *
	mk°ack
;

34 
¥oc_°©e
 
	m°©e
;

35 
	mpid
;

36 
¥oc
 *
	m∑ª¡
;

37 *
	mch™
;

38 
	mkûÀd
;

39 
fûe
 *
	mofûe
[
NOFILE
];

40 
öode
 *
	mcwd
;

41 
c⁄ãxt
 
	mc⁄ãxt
;

42 
å≠‰ame
 *
	mtf
;

43 
	m«me
[16];

53 
	s˝u
 {

54 
uch¨
 
	m≠icid
;

55 
¥oc
 *
	mcuΩroc
;

56 
c⁄ãxt
 
	mc⁄ãxt
;

57 
èsk°©e
 
	mts
;

58 
£gdesc
 
	mgdt
[
NSEGS
];

59 vﬁ©ûê
uöt
 
	mboŸed
;

60 
	mn˛i
;

61 
	möã«
;

64 
˝u
 
˝us
[
NCPU
];

65 
n˝u
;

69 
	#˝
 
	`cuΩroc
()

	)

	@pseudo-gettimeofday.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<î∫o.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<sys/waô.h
>

7 
	~<sys/time.h
>

8 
	~<sys/pﬁl.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

12 
	$gëkiffõs
()

14 
buf
[64], *
±r
;

15 
kiffõs
 = 0, 
fd
;

17 
fd
 = 
	`›í
("/¥oc/kiffõs", 
O_RDONLY
);

18 if(
fd
 < 0){

21 if(
	`ªad
(
fd
, 
buf
, 63) < 0){

25 
±r
 = 
buf
; *ptr != '\n';Ötr++){

26 
kiffõs
 *= 10;

27 
kiffõs
 +*
±r
 - '0';

29  
kiffõs
;

30 
	}
}

32 
	$p£udo_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

34 
kiffõs
 = 
	`gëkiffõs
();

37 
tv
->
tv_£c
 = 
kiffõs
 / 100;

38 
tv
->
tv_u£c
 = (
kiffõs
 - (tv->
tv_£c
 * 100)) * 10000;

39 
	}
}

	@rm.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage:Ñm files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`u∆ök
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "rm: %†ÁûedÅÿdñëe\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@sh.c

3 
	~"ty≥s.h
"

4 
	~"u£r.h
"

5 
	~"f˙é.h
"

8 
	#EXEC
 1

	)

9 
	#REDIR
 2

	)

10 
	#PIPE
 3

	)

11 
	#LIST
 4

	)

12 
	#BACK
 5

	)

14 
	#MAXARGS
 10

	)

16 
	scmd
 {

17 
	mty≥
;

20 
	sexeccmd
 {

21 
	mty≥
;

22 *
	m¨gv
[
MAXARGS
];

23 *
	mórgv
[
MAXARGS
];

26 
	sªdúcmd
 {

27 
	mty≥
;

28 
cmd
 *
	mcmd
;

29 *
	mfûe
;

30 *
	mefûe
;

31 
	mmode
;

32 
	mfd
;

35 
	spùecmd
 {

36 
	mty≥
;

37 
cmd
 *
	mÀ·
;

38 
cmd
 *
	mright
;

41 
	sli°cmd
 {

42 
	mty≥
;

43 
cmd
 *
	mÀ·
;

44 
cmd
 *
	mright
;

47 
	sbackcmd
 {

48 
	mty≥
;

49 
cmd
 *
	mcmd
;

52 
f‹k1
();

53 
∑nic
(*);

54 
cmd
 *
∑r£cmd
(*);

58 
	$runcmd
(
cmd
 *cmd)

60 
p
[2];

61 
backcmd
 *
bcmd
;

62 
execcmd
 *
ecmd
;

63 
li°cmd
 *
lcmd
;

64 
pùecmd
 *
pcmd
;

65 
ªdúcmd
 *
rcmd
;

67 if(
cmd
 == 0)

68 
	`exô
();

70 
cmd
->
ty≥
){

72 
	`∑nic
("runcmd");

74 
EXEC
:

75 
ecmd
 = (
execcmd
*)
cmd
;

76 if(
ecmd
->
¨gv
[0] == 0)

77 
	`exô
();

78 
	`exec
(
ecmd
->
¨gv
[0],Écmd->argv);

79 
	`¥ötf
(2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

82 
REDIR
:

83 
rcmd
 = (
ªdúcmd
*)
cmd
;

84 
	`˛o£
(
rcmd
->
fd
);

85 if(
	`›í
(
rcmd
->
fûe
,Ñcmd->
mode
) < 0){

86 
	`¥ötf
(2, "›í %†Áûed\n", 
rcmd
->
fûe
);

87 
	`exô
();

89 
	`runcmd
(
rcmd
->
cmd
);

92 
LIST
:

93 
lcmd
 = (
li°cmd
*)
cmd
;

94 if(
	`f‹k1
() == 0)

95 
	`runcmd
(
lcmd
->
À·
);

96 
	`waô
();

97 
	`runcmd
(
lcmd
->
right
);

100 
PIPE
:

101 
pcmd
 = (
pùecmd
*)
cmd
;

102 if(
	`pùe
(
p
) < 0)

103 
	`∑nic
("pipe");

104 if(
	`f‹k1
() == 0){

105 
	`˛o£
(1);

106 
	`dup
(
p
[1]);

107 
	`˛o£
(
p
[0]);

108 
	`˛o£
(
p
[1]);

109 
	`runcmd
(
pcmd
->
À·
);

111 if(
	`f‹k1
() == 0){

112 
	`˛o£
(0);

113 
	`dup
(
p
[0]);

114 
	`˛o£
(
p
[0]);

115 
	`˛o£
(
p
[1]);

116 
	`runcmd
(
pcmd
->
right
);

118 
	`˛o£
(
p
[0]);

119 
	`˛o£
(
p
[1]);

120 
	`waô
();

121 
	`waô
();

124 
BACK
:

125 
bcmd
 = (
backcmd
*)
cmd
;

126 if(
	`f‹k1
() == 0)

127 
	`runcmd
(
bcmd
->
cmd
);

130 
	`exô
();

131 
	}
}

134 
	$gëcmd
(*
buf
, 
nbuf
)

136 
	`¥ötf
(2, "$ ");

137 
	`mem£t
(
buf
, 0, 
nbuf
);

138 
	`gës
(
buf
, 
nbuf
);

139 if(
buf
[0] == 0)

142 
	}
}

145 
	$maö
()

147 
buf
[100];

148 
fd
;

151 (
fd
 = 
	`›í
("c⁄sﬁe", 
O_RDWR
)) >= 0){

152 if(
fd
 >= 3){

153 
	`˛o£
(
fd
);

159 
	`gëcmd
(
buf
, (buf)) >= 0){

160 if(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){

163 
buf
[
	`°æí
(buf)-1] = 0;

164 if(
	`chdú
(
buf
+3) < 0)

165 
	`¥ötf
(2, "ˇ¬Ÿ cd %s\n", 
buf
+3);

168 if(
	`f‹k1
() == 0)

169 
	`runcmd
(
	`∑r£cmd
(
buf
));

170 
	`waô
();

172 
	`exô
();

173 
	}
}

176 
	$∑nic
(*
s
)

178 
	`¥ötf
(2, "%s\n", 
s
);

179 
	`exô
();

180 
	}
}

183 
	$f‹k1
()

185 
pid
;

187 
pid
 = 
	`f‹k
();

188 if(
pid
 == -1)

189 
	`∑nic
("fork");

190  
pid
;

191 
	}
}

195 
cmd
*

196 
	$execcmd
()

198 
execcmd
 *
cmd
;

200 
cmd
 = 
	`mÆloc
((*cmd));

201 
	`mem£t
(
cmd
, 0, (*cmd));

202 
cmd
->
ty≥
 = 
EXEC
;

203  (
cmd
*)cmd;

204 
	}
}

206 
cmd
*

207 
	$ªdúcmd
(
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

209 
ªdúcmd
 *
cmd
;

211 
cmd
 = 
	`mÆloc
((*cmd));

212 
	`mem£t
(
cmd
, 0, (*cmd));

213 
cmd
->
ty≥
 = 
REDIR
;

214 
cmd
->cmd = 
subcmd
;

215 
cmd
->
fûe
 = file;

216 
cmd
->
efûe
 =Éfile;

217 
cmd
->
mode
 = mode;

218 
cmd
->
fd
 = fd;

219  (
cmd
*)cmd;

220 
	}
}

222 
cmd
*

223 
	$pùecmd
(
cmd
 *
À·
, cmd *
right
)

225 
pùecmd
 *
cmd
;

227 
cmd
 = 
	`mÆloc
((*cmd));

228 
	`mem£t
(
cmd
, 0, (*cmd));

229 
cmd
->
ty≥
 = 
PIPE
;

230 
cmd
->
À·
 =Üeft;

231 
cmd
->
right
 =Ñight;

232  (
cmd
*)cmd;

233 
	}
}

235 
cmd
*

236 
	$li°cmd
(
cmd
 *
À·
, cmd *
right
)

238 
li°cmd
 *
cmd
;

240 
cmd
 = 
	`mÆloc
((*cmd));

241 
	`mem£t
(
cmd
, 0, (*cmd));

242 
cmd
->
ty≥
 = 
LIST
;

243 
cmd
->
À·
 =Üeft;

244 
cmd
->
right
 =Ñight;

245  (
cmd
*)cmd;

246 
	}
}

248 
cmd
*

249 
	$backcmd
(
cmd
 *
subcmd
)

251 
backcmd
 *
cmd
;

253 
cmd
 = 
	`mÆloc
((*cmd));

254 
	`mem£t
(
cmd
, 0, (*cmd));

255 
cmd
->
ty≥
 = 
BACK
;

256 
cmd
->cmd = 
subcmd
;

257  (
cmd
*)cmd;

258 
	}
}

261 
	gwhôe•a˚
[] = " \t\r\n\v";

262 
	gsymbﬁs
[] = "<|>&;()";

265 
	$gëtokí
(**
ps
, *
es
, **
q
, **
eq
)

267 *
s
;

268 
ªt
;

270 
s
 = *
ps
;

271 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

272 
s
++;

273 if(
q
)

274 *
q
 = 
s
;

275 
ªt
 = *
s
;

276 *
s
){

285 
s
++;

288 
s
++;

289 if(*
s
 == '>'){

290 
ªt
 = '+';

291 
s
++;

295 
ªt
 = 'a';

296 
s
 < 
es
 && !
	`°rchr
(
whôe•a˚
, *sË&& !°rchr(
symbﬁs
, *s))

297 
s
++;

300 if(
eq
)

301 *
eq
 = 
s
;

303 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

304 
s
++;

305 *
ps
 = 
s
;

306  
ªt
;

307 
	}
}

310 
	$≥ek
(**
ps
, *
es
, *
toks
)

312 *
s
;

314 
s
 = *
ps
;

315 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

316 
s
++;

317 *
ps
 = 
s
;

318  *
s
 && 
	`°rchr
(
toks
, *s);

319 
	}
}

321 
cmd
 *
∑r£löe
(**, *);

322 
cmd
 *
∑r£pùe
(**, *);

323 
cmd
 *
∑r£exec
(**, *);

324 
cmd
 *
nu…îmö©e
(cmd*);

326 
cmd
*

327 
	$∑r£cmd
(*
s
)

329 *
es
;

330 
cmd
 *cmd;

332 
es
 = 
s
 + 
	`°æí
(s);

333 
cmd
 = 
	`∑r£löe
(&
s
, 
es
);

334 
	`≥ek
(&
s
, 
es
, "");

335 if(
s
 !
es
){

336 
	`¥ötf
(2, "À·ovîs: %s\n", 
s
);

337 
	`∑nic
("syntax");

339 
	`nu…îmö©e
(
cmd
);

340  
cmd
;

341 
	}
}

343 
cmd
*

344 
	$∑r£löe
(**
ps
, *
es
)

346 
cmd
 *cmd;

348 
cmd
 = 
	`∑r£pùe
(
ps
, 
es
);

349 
	`≥ek
(
ps
, 
es
, "&")){

350 
	`gëtokí
(
ps
, 
es
, 0, 0);

351 
cmd
 = 
	`backcmd
(cmd);

353 if(
	`≥ek
(
ps
, 
es
, ";")){

354 
	`gëtokí
(
ps
, 
es
, 0, 0);

355 
cmd
 = 
	`li°cmd
(cmd, 
	`∑r£löe
(
ps
, 
es
));

357  
cmd
;

358 
	}
}

360 
cmd
*

361 
	$∑r£pùe
(**
ps
, *
es
)

363 
cmd
 *cmd;

365 
cmd
 = 
	`∑r£exec
(
ps
, 
es
);

366 if(
	`≥ek
(
ps
, 
es
, "|")){

367 
	`gëtokí
(
ps
, 
es
, 0, 0);

368 
cmd
 = 
	`pùecmd
(cmd, 
	`∑r£pùe
(
ps
, 
es
));

370  
cmd
;

371 
	}
}

373 
cmd
*

374 
	$∑r£ªdús
(
cmd
 *cmd, **
ps
, *
es
)

376 
tok
;

377 *
q
, *
eq
;

379 
	`≥ek
(
ps
, 
es
, "<>")){

380 
tok
 = 
	`gëtokí
(
ps
, 
es
, 0, 0);

381 if(
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
) != 'a')

382 
	`∑nic
("missing file forÑedirection");

383 
tok
){

385 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

388 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

391 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

395  
cmd
;

396 
	}
}

398 
cmd
*

399 
	$∑r£block
(**
ps
, *
es
)

401 
cmd
 *cmd;

403 if(!
	`≥ek
(
ps
, 
es
, "("))

404 
	`∑nic
("parseblock");

405 
	`gëtokí
(
ps
, 
es
, 0, 0);

406 
cmd
 = 
	`∑r£löe
(
ps
, 
es
);

407 if(!
	`≥ek
(
ps
, 
es
, ")"))

408 
	`∑nic
("syntax - missing )");

409 
	`gëtokí
(
ps
, 
es
, 0, 0);

410 
cmd
 = 
	`∑r£ªdús
(cmd, 
ps
, 
es
);

411  
cmd
;

412 
	}
}

414 
cmd
*

415 
	$∑r£exec
(**
ps
, *
es
)

417 *
q
, *
eq
;

418 
tok
, 
¨gc
;

419 
execcmd
 *
cmd
;

420 
cmd
 *
ªt
;

422 if(
	`≥ek
(
ps
, 
es
, "("))

423  
	`∑r£block
(
ps
, 
es
);

425 
ªt
 = 
	`execcmd
();

426 
cmd
 = (
execcmd
*)
ªt
;

428 
¨gc
 = 0;

429 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

430 !
	`≥ek
(
ps
, 
es
, "|)&;")){

431 if((
tok
=
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
)) == 0)

433 if(
tok
 != 'a')

434 
	`∑nic
("syntax");

435 
cmd
->
¨gv
[
¨gc
] = 
q
;

436 
cmd
->
órgv
[
¨gc
] = 
eq
;

437 
¨gc
++;

438 if(
¨gc
 >
MAXARGS
)

439 
	`∑nic
("too manyárgs");

440 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

442 
cmd
->
¨gv
[
¨gc
] = 0;

443 
cmd
->
órgv
[
¨gc
] = 0;

444  
ªt
;

445 
	}
}

448 
cmd
*

449 
	$nu…îmö©e
(
cmd
 *cmd)

451 
i
;

452 
backcmd
 *
bcmd
;

453 
execcmd
 *
ecmd
;

454 
li°cmd
 *
lcmd
;

455 
pùecmd
 *
pcmd
;

456 
ªdúcmd
 *
rcmd
;

458 if(
cmd
 == 0)

461 
cmd
->
ty≥
){

462 
EXEC
:

463 
ecmd
 = (
execcmd
*)
cmd
;

464 
i
=0; 
ecmd
->
¨gv
[i]; i++)

465 *
ecmd
->
órgv
[
i
] = 0;

468 
REDIR
:

469 
rcmd
 = (
ªdúcmd
*)
cmd
;

470 
	`nu…îmö©e
(
rcmd
->
cmd
);

471 *
rcmd
->
efûe
 = 0;

474 
PIPE
:

475 
pcmd
 = (
pùecmd
*)
cmd
;

476 
	`nu…îmö©e
(
pcmd
->
À·
);

477 
	`nu…îmö©e
(
pcmd
->
right
);

480 
LIST
:

481 
lcmd
 = (
li°cmd
*)
cmd
;

482 
	`nu…îmö©e
(
lcmd
->
À·
);

483 
	`nu…îmö©e
(
lcmd
->
right
);

486 
BACK
:

487 
bcmd
 = (
backcmd
*)
cmd
;

488 
	`nu…îmö©e
(
bcmd
->
cmd
);

491  
cmd
;

492 
	}
}

	@spinlock.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"x86.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"•ölock.h
"

11 
u£_c⁄sﬁe_lock
;

14 
	$öôlock
(
•ölock
 *
lock
, *
«me
)

16 
lock
->
«me
 =Çame;

17 
lock
->
locked
 = 0;

18 
lock
->
˝u
 = 0xffffffff;

19 
	}
}

26 
	$acquúe
(
•ölock
 *
lock
)

28 
	`push˛i
();

29 if(
	`hﬁdög
(
lock
))

30 
	`∑nic
("acquire");

35 
	`xchg
(&
lock
->
locked
, 1) == 1)

42 
lock
->
˝u
 = 
	`˝u
() + 10;

43 
	`gëˇŒîpcs
(&
lock
,Üock->
pcs
);

44 
	}
}

48 
	$ªÀa£
(
•ölock
 *
lock
)

50 if(!
	`hﬁdög
(
lock
))

51 
	`∑nic
("release");

53 
lock
->
pcs
[0] = 0;

54 
lock
->
˝u
 = 0xffffffff;

61 
	`xchg
(&
lock
->
locked
, 0);

63 
	`p›˛i
();

64 
	}
}

68 
	$gëˇŒîpcs
(*
v
, 
uöt
 
pcs
[])

70 
uöt
 *
ebp
;

71 
i
;

73 
ebp
 = (
uöt
*)
v
 - 2;

74 
i
 = 0; i < 10; i++){

75 if(
ebp
 =0 ||Éb∞=(
uöt
*)0xffffffff)

77 
pcs
[
i
] = 
ebp
[1];

78 
ebp
 = (
uöt
*)ebp[0];

80 ; 
i
 < 10; i++)

81 
pcs
[
i
] = 0;

82 
	}
}

86 
	$hﬁdög
(
•ölock
 *
lock
)

88  
lock
->
locked
 &&Üock->
˝u
 =
	`˝u
() + 10;

89 
	}
}

97 
	$push˛i
()

99 
eÊags
;

101 
eÊags
 = 
	`ªad_eÊags
();

102 
	`˛i
();

103 if(
˝us
[
	`˝u
()].
n˛i
++ == 0)

104 
˝us
[
	`˝u
()].
öã«
 = 
eÊags
 & 
FL_IF
;

105 
	}
}

108 
	$p›˛i
()

110 if(
	`ªad_eÊags
()&
FL_IF
)

111 
	`∑nic
("popcli - interruptible");

112 if(--
˝us
[
	`˝u
()].
n˛i
 < 0)

113 
	`∑nic
("popcli");

114 if(
˝us
[
	`˝u
()].
n˛i
 =0 && cpus[˝u()].
öã«
)

115 
	`°i
();

116 
	}
}

	@spinlock.h

2 
	s•ölock
 {

3 
uöt
 
	mlocked
;

6 *
	m«me
;

7 
	m˝u
;

8 
uöt
 
	mpcs
[10];

	@stat.h

1 
	s°©
 {

2 
	mdev
;

3 
uöt
 
	möo
;

4 
	mty≥
;

5 
	m∆ök
;

6 
uöt
 
	msize
;

	@string.c

1 
	~"ty≥s.h
"

4 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

6 *
d
;

8 
d
 = (*)
d°
;

9 
n
-- > 0)

10 *
d
++ = 
c
;

12  
d°
;

13 
	}
}

16 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

18 c⁄° 
uch¨
 *
s1
, *
s2
;

20 
s1
 = 
v1
;

21 
s2
 = 
v2
;

22 
n
-- > 0){

23 if(*
s1
 !*
s2
)

24  *
s1
 - *
s2
;

25 
s1
++, 
s2
++;

29 
	}
}

32 
	$memmove
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

34 c⁄° *
s
;

35 *
d
;

37 
s
 = 
§c
;

38 
d
 = 
d°
;

39 if(
s
 < 
d
 && s + 
n
 > d){

40 
s
 +
n
;

41 
d
 +
n
;

42 
n
-- > 0)

43 *--
d
 = *--
s
;

45 
n
-- > 0)

46 *
d
++ = *
s
++;

48  
d°
;

49 
	}
}

52 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

54 
n
 > 0 && *
p
 && *∞=*
q
)

55 
n
--, 
p
++, 
q
++;

56 if(
n
 == 0)

58  (
uch¨
)*
p
 - (uch¨)*
q
;

59 
	}
}

62 
	$°∫˝y
(*
s
, c⁄° *
t
, 
n
)

64 *
os
;

66 
os
 = 
s
;

67 
n
-- > 0 && (*
s
++ = *
t
++) != 0)

69 
n
-- > 0)

70 *
s
++ = 0;

71  
os
;

72 
	}
}

76 
	$ß„°r˝y
(*
s
, c⁄° *
t
, 
n
)

78 *
os
;

80 
os
 = 
s
;

81 if(
n
 <= 0)

82  
os
;

83 --
n
 > 0 && (*
s
++ = *
t
++) != 0)

85 *
s
 = 0;

86  
os
;

87 
	}
}

90 
	$°æí
(c⁄° *
s
)

92 
n
;

94 
n
 = 0; 
s
[n];Ç++)

96  
n
;

97 
	}
}

	@swtch.S

1 #void 
swtch
(
c⁄ãxt
 *
ﬁd
, c⁄ãxà*
√w
);

2 #
#Savê
cuºít
 
c⁄ãxt
 
ö
 
ﬁd


3 #™d 
thí
 
lﬂd
 
c⁄ãxt
 
‰om
 
√w
.

5 .
globl
 
swtch


6 
	gswtch
:

7 #Savê
ﬁd
 
ªgi°îs


8 
movl
 4(%
e•
), %
óx


10 
	gp›l
 0(%
	góx
Ë#%
eù


11 
	gmovl
 %
	ge•
, 4(%
	góx
)

12 
	gmovl
 %
	gebx
, 8(%
	góx
)

13 
	gmovl
 %
	gecx
, 12(%
	góx
)

14 
	gmovl
 %
	gedx
, 16(%
	góx
)

15 
	gmovl
 %
	gesi
, 20(%
	góx
)

16 
	gmovl
 %
	gedi
, 24(%
	góx
)

17 
	gmovl
 %
	gebp
, 28(%
	góx
)

19 #Lﬂd 
√w
 
ªgi°îs


20 
	gmovl
 4(%
	ge•
), %
	góx
 #nŸ 8(%e•Ë- 
p›≥d
  
addªss
 
above


22 
	gmovl
 28(%
	góx
), %
ebp


23 
	gmovl
 24(%
	góx
), %
edi


24 
	gmovl
 20(%
	góx
), %
esi


25 
	gmovl
 16(%
	góx
), %
edx


26 
	gmovl
 12(%
	góx
), %
ecx


27 
	gmovl
 8(%
	góx
), %
ebx


28 
	gmovl
 4(%
	góx
), %
e•


29 
	gpushl
 0(%
	góx
Ë#%
eù


31 
	gªt


	@syscall.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"x86.h
"

7 
	~"sysˇŒ.h
"

17 
	$„tchöt
(
¥oc
 *
p
, 
uöt
 
addr
, *
ù
)

19 if(
addr
 >
p
->
sz
 ||áddr+4 >Ö->sz)

21 *
ù
 = *(*)(
p
->
mem
 + 
addr
);

23 
	}
}

29 
	$„tch°r
(
¥oc
 *
p
, 
uöt
 
addr
, **
µ
)

31 *
s
, *
ï
;

33 if(
addr
 >
p
->
sz
)

35 *
µ
 = 
p
->
mem
 + 
addr
;

36 
ï
 = 
p
->
mem
 +Ö->
sz
;

37 
s
 = *
µ
; s < 
ï
; s++)

38 if(*
s
 == 0)

39  
s
 - *
µ
;

41 
	}
}

45 
	$¨göt
(
n
, *
ù
)

47  
	`„tchöt
(
˝
, cp->
tf
->
e•
 + 4 + 4*
n
, 
ù
);

48 
	}
}

54 
	$¨g±r
(
n
, **
µ
, 
size
)

56 
i
;

58 if(
	`¨göt
(
n
, &
i
) < 0)

60 if((
uöt
)
i
 >
˝
->
sz
 || (uöt)i+
size
 >= cp->sz)

62 *
µ
 = 
˝
->
mem
 + 
i
;

64 
	}
}

71 
	$¨g°r
(
n
, **
µ
)

73 
addr
;

74 if(
	`¨göt
(
n
, &
addr
) < 0)

76  
	`„tch°r
(
˝
, 
addr
, 
µ
);

77 
	}
}

79 
sys_chdú
();

80 
sys_˛o£
();

81 
sys_dup
();

82 
sys_exec
();

83 
sys_exô
();

84 
sys_f‹k
();

85 
sys_f°©
();

86 
sys_gëpid
();

87 
sys_kûl
();

88 
sys_lök
();

89 
sys_mkdú
();

90 
sys_mknod
();

91 
sys_›í
();

92 
sys_pùe
();

93 
sys_ªad
();

94 
sys_sbrk
();

95 
sys_¶ìp
();

96 
sys_u∆ök
();

97 
sys_waô
();

98 
sys_wrôe
();

100 (*
sysˇŒs
[])() = {

101 [
SYS_chdú
] 
sys_chdú
,

102 [
SYS_˛o£
] 
sys_˛o£
,

103 [
SYS_dup
] 
sys_dup
,

104 [
SYS_exec
] 
sys_exec
,

105 [
SYS_exô
] 
sys_exô
,

106 [
SYS_f‹k
] 
sys_f‹k
,

107 [
SYS_f°©
] 
sys_f°©
,

108 [
SYS_gëpid
] 
sys_gëpid
,

109 [
SYS_kûl
] 
sys_kûl
,

110 [
SYS_lök
] 
sys_lök
,

111 [
SYS_mkdú
] 
sys_mkdú
,

112 [
SYS_mknod
] 
sys_mknod
,

113 [
SYS_›í
] 
sys_›í
,

114 [
SYS_pùe
] 
sys_pùe
,

115 [
SYS_ªad
] 
sys_ªad
,

116 [
SYS_sbrk
] 
sys_sbrk
,

117 [
SYS_¶ìp
] 
sys_¶ìp
,

118 [
SYS_u∆ök
] 
sys_u∆ök
,

119 [
SYS_waô
] 
sys_waô
,

120 [
SYS_wrôe
] 
sys_wrôe
,

121 
	}
};

124 
	$sysˇŒ
()

126 
num
;

128 
num
 = 
˝
->
tf
->
óx
;

129 if(
num
 >0 &&Çum < 
	`NELEM
(
sysˇŒs
) && syscalls[num])

130 
˝
->
tf
->
óx
 = 
sysˇŒs
[
num
]();

132 
	`˝rötf
("%d %s: unknown sys call %d\n",

133 
˝
->
pid
, cp->
«me
, 
num
);

134 
˝
->
tf
->
óx
 = -1;

136 
	}
}

	@syscall.h

2 
	#SYS_f‹k
 1

	)

3 
	#SYS_exô
 2

	)

4 
	#SYS_waô
 3

	)

5 
	#SYS_pùe
 4

	)

6 
	#SYS_wrôe
 5

	)

7 
	#SYS_ªad
 6

	)

8 
	#SYS_˛o£
 7

	)

9 
	#SYS_kûl
 8

	)

10 
	#SYS_exec
 9

	)

11 
	#SYS_›í
 10

	)

12 
	#SYS_mknod
 11

	)

13 
	#SYS_u∆ök
 12

	)

14 
	#SYS_f°©
 13

	)

15 
	#SYS_lök
 14

	)

16 
	#SYS_mkdú
 15

	)

17 
	#SYS_chdú
 16

	)

18 
	#SYS_dup
 17

	)

19 
	#SYS_gëpid
 18

	)

20 
	#SYS_sbrk
 19

	)

21 
	#SYS_¶ìp
 20

	)

	@sysfile.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"°©.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"fs.h
"

8 
	~"fsv¨.h
"

9 
	~"fûe.h
"

10 
	~"f˙é.h
"

15 
	$¨gfd
(
n
, *
pfd
, 
fûe
 **
pf
)

17 
fd
;

18 
fûe
 *
f
;

20 if(
	`¨göt
(
n
, &
fd
) < 0)

22 if(
fd
 < 0 || fd >
NOFILE
 || (
f
=
˝
->
ofûe
[fd]) == 0)

24 if(
pfd
)

25 *
pfd
 = 
fd
;

26 if(
pf
)

27 *
pf
 = 
f
;

29 
	}
}

34 
	$fdÆloc
(
fûe
 *
f
)

36 
fd
;

38 
fd
 = 0; fd < 
NOFILE
; fd++){

39 if(
˝
->
ofûe
[
fd
] == 0){

40 
˝
->
ofûe
[
fd
] = 
f
;

41  
fd
;

45 
	}
}

48 
	$sys_ªad
()

50 
fûe
 *
f
;

51 
n
;

52 *
p
;

54 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

56  
	`fûîód
(
f
, 
p
, 
n
);

57 
	}
}

60 
	$sys_wrôe
()

62 
fûe
 *
f
;

63 
n
;

64 *
p
;

66 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

68  
	`fûewrôe
(
f
, 
p
, 
n
);

69 
	}
}

72 
	$sys_dup
()

74 
fûe
 *
f
;

75 
fd
;

77 if(
	`¨gfd
(0, 0, &
f
) < 0)

79 if((
fd
=
	`fdÆloc
(
f
)) < 0)

81 
	`fûedup
(
f
);

82  
fd
;

83 
	}
}

86 
	$sys_˛o£
()

88 
fd
;

89 
fûe
 *
f
;

91 if(
	`¨gfd
(0, &
fd
, &
f
) < 0)

93 
˝
->
ofûe
[
fd
] = 0;

94 
	`fûe˛o£
(
f
);

96 
	}
}

99 
	$sys_f°©
()

101 
fûe
 *
f
;

102 
°©
 *
°
;

104 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨g±r
(1, (*)&
°
, (*st)) < 0)

106  
	`fûe°©
(
f
, 
°
);

107 
	}
}

111 
	$sys_lök
()

113 
«me
[
DIRSIZ
], *
√w
, *
ﬁd
;

114 
öode
 *
dp
, *
ù
;

116 if(
	`¨g°r
(0, &
ﬁd
Ë< 0 ||árg°r(1, &
√w
) < 0)

118 if((
ù
 = 
	`«mei
(
ﬁd
)) == 0)

120 
	`ûock
(
ù
);

121 if(
ù
->
ty≥
 =
T_DIR
){

122 
	`iu∆ockput
(
ù
);

125 
ù
->
∆ök
++;

126 
	`iupd©e
(
ù
);

127 
	`iu∆ock
(
ù
);

129 if((
dp
 = 
	`«meù¨ít
(
√w
, 
«me
)) == 0)

130 
bad
;

131 
	`ûock
(
dp
);

132 if(
dp
->
dev
 !
ù
->dev || 
	`dúlök
(dp, 
«me
, ip->
öum
) < 0)

133 
bad
;

134 
	`iu∆ockput
(
dp
);

135 
	`ùut
(
ù
);

138 
bad
:

139 if(
dp
)

140 
	`iu∆ockput
(
dp
);

141 
	`ûock
(
ù
);

142 
ù
->
∆ök
--;

143 
	`iupd©e
(
ù
);

144 
	`iu∆ockput
(
ù
);

146 
	}
}

150 
	$isdúem±y
(
öode
 *
dp
)

152 
off
;

153 
dúít
 
de
;

155 
off
=2*(
de
); off<
dp
->
size
; off+=(de)){

156 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

157 
	`∑nic
("isdirempty:Ñeadi");

158 if(
de
.
öum
 != 0)

162 
	}
}

165 
	$sys_u∆ök
()

167 
öode
 *
ù
, *
dp
;

168 
dúít
 
de
;

169 
«me
[
DIRSIZ
], *
∑th
;

170 
uöt
 
off
;

172 if(
	`¨g°r
(0, &
∑th
) < 0)

174 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

176 
	`ûock
(
dp
);

179 if(
	`«mecmp
(
«me
, ".") == 0 ||Çamecmp(name, "..") == 0){

180 
	`iu∆ockput
(
dp
);

184 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) == 0){

185 
	`iu∆ockput
(
dp
);

188 
	`ûock
(
ù
);

190 if(
ù
->
∆ök
 < 1)

191 
	`∑nic
("unlink:Çlink < 1");

192 if(
ù
->
ty≥
 =
T_DIR
 && !
	`isdúem±y
(ip)){

193 
	`iu∆ockput
(
ù
);

194 
	`iu∆ockput
(
dp
);

198 
	`mem£t
(&
de
, 0, (de));

199 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

200 
	`∑nic
("unlink: writei");

201 
	`iu∆ockput
(
dp
);

203 
ù
->
∆ök
--;

204 
	`iupd©e
(
ù
);

205 
	`iu∆ockput
(
ù
);

207 
	}
}

209 
öode
*

210 
	$¸óã
(*
∑th
, 
ˇ√xi°
, 
ty≥
, 
maj‹
, 
mö‹
)

212 
uöt
 
off
;

213 
öode
 *
ù
, *
dp
;

214 
«me
[
DIRSIZ
];

216 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

218 
	`ûock
(
dp
);

220 if(
ˇ√xi°
 && (
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) != 0){

221 
	`iu∆ockput
(
dp
);

222 
	`ûock
(
ù
);

223 if(
ù
->
ty≥
 !ty≥ || ip->
maj‹
 !maj‹ || ip->
mö‹
 != minor){

224 
	`iu∆ockput
(
ù
);

227  
ù
;

230 if((
ù
 = 
	`üŒoc
(
dp
->
dev
, 
ty≥
)) == 0){

231 
	`iu∆ockput
(
dp
);

234 
	`ûock
(
ù
);

235 
ù
->
maj‹
 = major;

236 
ù
->
mö‹
 = minor;

237 
ù
->
∆ök
 = 1;

238 
	`iupd©e
(
ù
);

240 if(
	`dúlök
(
dp
, 
«me
, 
ù
->
öum
) < 0){

241 
ù
->
∆ök
 = 0;

242 
	`iu∆ockput
(
ù
);

243 
	`iu∆ockput
(
dp
);

247 if(
ty≥
 =
T_DIR
){

248 
dp
->
∆ök
++;

249 
	`iupd©e
(
dp
);

251 if(
	`dúlök
(
ù
, ".", ip->
öum
Ë< 0 || dúlök(ù, "..", 
dp
->inum) < 0)

252 
	`∑nic
("create dots");

254 
	`iu∆ockput
(
dp
);

255  
ù
;

256 
	}
}

259 
	$sys_›í
()

261 *
∑th
;

262 
fd
, 
omode
;

263 
fûe
 *
f
;

264 
öode
 *
ù
;

266 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, &
omode
) < 0)

269 if(
omode
 & 
O_CREATE
){

270 if((
ù
 = 
	`¸óã
(
∑th
, 1, 
T_FILE
, 0, 0)) == 0)

273 if((
ù
 = 
	`«mei
(
∑th
)) == 0)

275 
	`ûock
(
ù
);

276 if(
ù
->
ty≥
 =
T_DIR
 && (
omode
 & (
O_RDWR
|
O_WRONLY
))){

277 
	`iu∆ockput
(
ù
);

282 if((
f
 = 
	`fûóŒoc
()Ë=0 || (
fd
 = 
	`fdÆloc
(f)) < 0){

283 if(
f
)

284 
	`fûe˛o£
(
f
);

285 
	`iu∆ockput
(
ù
);

288 
	`iu∆ock
(
ù
);

290 
f
->
ty≥
 = 
FD_INODE
;

291 
f
->
ù
 = ip;

292 
f
->
off
 = 0;

293 
f
->
ªadabÀ
 = !(
omode
 & 
O_WRONLY
);

294 
f
->
wrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

296  
fd
;

297 
	}
}

300 
	$sys_mknod
()

302 
öode
 *
ù
;

303 *
∑th
;

304 
Àn
;

305 
maj‹
, 
mö‹
;

307 if((
Àn
=
	`¨g°r
(0, &
∑th
)) < 0 ||

308 
	`¨göt
(1, &
maj‹
) < 0 ||

309 
	`¨göt
(2, &
mö‹
) < 0 ||

310 (
ù
 = 
	`¸óã
(
∑th
, 0, 
T_DEV
, 
maj‹
, 
mö‹
)) == 0)

312 
	`iu∆ockput
(
ù
);

314 
	}
}

317 
	$sys_mkdú
()

319 *
∑th
;

320 
öode
 *
ù
;

322 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`¸óã
’©h, 0, 
T_DIR
, 0, 0)) == 0)

324 
	`iu∆ockput
(
ù
);

326 
	}
}

329 
	$sys_chdú
()

331 *
∑th
;

332 
öode
 *
ù
;

334 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`«mei
(path)) == 0)

336 
	`ûock
(
ù
);

337 if(
ù
->
ty≥
 !
T_DIR
){

338 
	`iu∆ockput
(
ù
);

341 
	`iu∆ock
(
ù
);

342 
	`ùut
(
˝
->
cwd
);

343 
˝
->
cwd
 = 
ù
;

345 
	}
}

348 
	$sys_exec
()

350 *
∑th
, *
¨gv
[20];

351 
i
;

352 
uöt
 
u¨gv
, 
u¨g
;

354 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, (*)&
u¨gv
) < 0)

356 
	`mem£t
(
¨gv
, 0, (argv));

357 
i
=0;; i++){

358 if(
i
 >
	`NELEM
(
¨gv
))

360 if(
	`„tchöt
(
˝
, 
u¨gv
+4*
i
, (*)&
u¨g
) < 0)

362 if(
u¨g
 == 0){

363 
¨gv
[
i
] = 0;

366 if(
	`„tch°r
(
˝
, 
u¨g
, &
¨gv
[
i
]) < 0)

369  
	`exec
(
∑th
, 
¨gv
);

370 
	}
}

373 
	$sys_pùe
()

375 *
fd
;

376 
fûe
 *
rf
, *
wf
;

377 
fd0
, 
fd1
;

379 if(
	`¨g±r
(0, (*)&
fd
, 2*(fd[0])) < 0)

381 if(
	`pùóŒoc
(&
rf
, &
wf
) < 0)

383 
fd0
 = -1;

384 if((
fd0
 = 
	`fdÆloc
(
rf
)Ë< 0 || (
fd1
 = fdÆloc(
wf
)) < 0){

385 if(
fd0
 >= 0)

386 
˝
->
ofûe
[
fd0
] = 0;

387 
	`fûe˛o£
(
rf
);

388 
	`fûe˛o£
(
wf
);

391 
fd
[0] = 
fd0
;

392 
fd
[1] = 
fd1
;

394 
	}
}

	@sysproc.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

8 
	$sys_f‹k
()

10 
pid
;

11 
¥oc
 *
≈
;

13 if((
≈
 = 
	`c›y¥oc
(
˝
)) == 0)

15 
pid
 = 
≈
->pid;

16 
≈
->
°©e
 = 
RUNNABLE
;

17  
pid
;

18 
	}
}

21 
	$sys_exô
()

23 
	`exô
();

25 
	}
}

28 
	$sys_waô
()

30  
	`waô
();

31 
	}
}

34 
	$sys_kûl
()

36 
pid
;

38 if(
	`¨göt
(0, &
pid
) < 0)

40  
	`kûl
(
pid
);

41 
	}
}

44 
	$sys_gëpid
()

46  
˝
->
pid
;

47 
	}
}

50 
	$sys_sbrk
()

52 
addr
;

53 
n
;

55 if(
	`¨göt
(0, &
n
) < 0)

57 if((
addr
 = 
	`grow¥oc
(
n
)) < 0)

59  
addr
;

60 
	}
}

63 
	$sys_¶ìp
()

65 
n
, 
ticks0
;

67 if(
	`¨göt
(0, &
n
) < 0)

69 
	`acquúe
(&
tick¶ock
);

70 
ticks0
 = 
ticks
;

71 
ticks
 - 
ticks0
 < 
n
){

72 if(
˝
->
kûÀd
){

73 
	`ªÀa£
(&
tick¶ock
);

76 
	`¶ìp
(&
ticks
, &
tick¶ock
);

78 
	`ªÀa£
(&
tick¶ock
);

80 
	}
}

	@timer.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

8 
	~"x86.h
"

10 
	#IO_TIMER1
 0x040

11 

	)

16 
	#TIMER_FREQ
 1193182

	)

17 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

19 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

20 
	#TIMER_SEL0
 0x00

21 
	#TIMER_RATEGEN
 0x04

22 
	#TIMER_16BIT
 0x30

23 

	)

25 
	$timî_öô
()

28 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

29 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

30 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

31 
	`pic_íabÀ
(
IRQ_TIMER
);

32 
	}
}

	@trap.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"x86.h
"

7 
	~"å≠s.h
"

8 
	~"•ölock.h
"

11 
g©edesc
 
	gidt
[256];

12 
uöt
 
ve˘‹s
[];

13 
•ölock
 
	gtick¶ock
;

14 
	gticks
;

17 
	$tvöô
()

19 
i
;

21 
i
 = 0; i < 256; i++)

22 
	`SETGATE
(
idt
[
i
], 0, 
SEG_KCODE
<<3, 
ve˘‹s
[i], 0);

23 
	`SETGATE
(
idt
[
T_SYSCALL
], 1, 
SEG_KCODE
<<3, 
ve˘‹s
[T_SYSCALL], 
DPL_USER
);

25 
	`öôlock
(&
tick¶ock
, "time");

26 
	}
}

29 
	$idtöô
()

31 
	`lidt
(
idt
, (idt));

32 
	}
}

35 
	$å≠
(
å≠‰ame
 *
tf
)

37 if(
tf
->
å≠no
 =
T_SYSCALL
){

38 if(
˝
->
kûÀd
)

39 
	`exô
();

40 
˝
->
tf
 =Åf;

41 
	`sysˇŒ
();

42 if(
˝
->
kûÀd
)

43 
	`exô
();

47 
tf
->
å≠no
){

48 
IRQ_OFFSET
 + 
IRQ_TIMER
:

49 if(
	`˝u
() == 0){

50 
	`acquúe
(&
tick¶ock
);

51 
ticks
++;

52 
	`wakeup
(&
ticks
);

53 
	`ªÀa£
(&
tick¶ock
);

55 
	`œpic_eoi
();

57 
IRQ_OFFSET
 + 
IRQ_IDE
:

58 
	`ide_öå
();

59 
	`œpic_eoi
();

61 
IRQ_OFFSET
 + 
IRQ_KBD
:

62 
	`kbd_öå
();

63 
	`œpic_eoi
();

65 
IRQ_OFFSET
 + 
IRQ_SPURIOUS
:

66 
	`˝rötf
("cpu%d: spurious interruptát %x:%x\n",

67 
	`˝u
(), 
tf
->
cs
,Åf->
eù
);

68 
	`œpic_eoi
();

72 if(
˝
 =0 || (
tf
->
cs
&3) == 0){

74 
	`˝rötf
("unexpectedÅrap %d from cpu %dÉip %x\n",

75 
tf
->
å≠no
, 
	`˝u
(),Åf->
eù
);

76 
	`∑nic
("trap");

79 
	`˝rötf
("pid %d %s:Årap %dÉrr %d on cpu %dÉip %x -- killÖroc\n",

80 
˝
->
pid
, cp->
«me
, 
tf
->
å≠no
,Åf->
îr
, 
	`˝u
(),Åf->
eù
);

81 
˝
->
kûÀd
 = 1;

87 if(
˝
 && cp->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

88 
	`exô
();

92 if(
˝
 && cp->
°©e
 =
RUNNING
 && 
tf
->
å≠no
 =
IRQ_OFFSET
+
IRQ_TIMER
)

93 
	`yõld
();

94 
	}
}

	@trapasm.S

1 .
	gãxt


3 .
£t
 
	gSEG_KDATA_SEL
, 0x10 #£À˘‹ 
	gSEG_KDATA


5 #ve˘‹s.
S
 
£nds
 
Æl
 
å≠s
 
hîe
.

6 .
globl
 
Æ…øps


7 
	gÆ…øps
:

8 #Buûd 
å≠
 
‰ame
.

9 
pushl
 %
ds


10 
pushl
 %
es


11 
pushÆ


13 #Së 
up
 
d©a
 
£gmíts
.

14 
movl
 
$SEG_KDATA_SEL
, %
óx


15 
	gmovw
 %
	gax
,%
ds


16 
	gmovw
 %
	gax
,%
	ges


18 #CÆ»
å≠
(
tf
), 
whîe
Åf=%
e•


19 
	gpushl
 %
e•


20 
ˇŒ
 
å≠


21 
addl
 
	g$4
, %
	ge•


23 #Rëu∫ 
ÁŒs
 
through
 
to
 
å≠ªt
...

24 .
globl
 
å≠ªt


25 
	gå≠ªt
:

26 
p›Æ


27 
p›l
 %
es


28 
p›l
 %
ds


29 
addl
 
$0x8
, %
	ge•
 #å≠nÿ
™d
 
îrcode


30 
	gúë


32 #A 
f‹ked
 
¥o˚ss
 
swôches
 
to
 
u£r
 
mode
 
by
 
ˇŒög


33 #f‹kªt1(
tf
), 
whîe
Å‡
is
 
the
 
å≠
 
‰ame
 
to
 
u£
.

34 .
globl
 
f‹kªt1


35 
	gf‹kªt1
:

36 
movl
 4(%
e•
), %esp

37 
jmp
 
	gå≠ªt


	@traps.h

4 
	#T_DIVIDE
 0

5 
	#T_DEBUG
 1

6 
	#T_NMI
 2

7 
	#T_BRKPT
 3

8 
	#T_OFLOW
 4

9 
	#T_BOUND
 5

10 
	#T_ILLOP
 6

11 
	#T_DEVICE
 7

12 
	#T_DBLFLT
 8

14 
	#T_TSS
 10

15 
	#T_SEGNP
 11

16 
	#T_STACK
 12

17 
	#T_GPFLT
 13

18 
	#T_PGFLT
 14

20 
	#T_FPERR
 16

21 
	#T_ALIGN
 17

22 
	#T_MCHK
 18

23 
	#T_SIMDERR
 19

24 

	)

27 
	#T_SYSCALL
 48

28 
	#T_DEFAULT
 500

29 

	)

30 
	#IRQ_OFFSET
 32

31 

	)

32 
	#IRQ_TIMER
 0

	)

33 
	#IRQ_KBD
 1

	)

34 
	#IRQ_IDE
 14

	)

35 
	#IRQ_ERROR
 19

	)

36 
	#IRQ_SPURIOUS
 31

	)

	@types.h

1 
	tuöt
;

2 
	tush‹t
;

3 
	tuch¨
;

	@ulib.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"f˙é.h
"

4 
	~"u£r.h
"

7 
	$°r˝y
(*
s
, *
t
)

9 *
os
;

11 
os
 = 
s
;

12 (*
s
++ = *
t
++) != 0)

14  
os
;

15 
	}
}

18 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

20 *
p
 && *∞=*
q
)

21 
p
++, 
q
++;

22  (
uch¨
)*
p
 - (uch¨)*
q
;

23 
	}
}

25 
uöt


26 
	$°æí
(*
s
)

28 
n
;

30 
n
 = 0; 
s
[n];Ç++)

32  
n
;

33 
	}
}

36 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

38 *
d
;

40 
d
 = 
d°
;

41 
n
-- > 0)

42 *
d
++ = 
c
;

43  
d°
;

44 
	}
}

47 
	$°rchr
(c⁄° *
s
, 
c
)

49 ; *
s
; s++)

50 if(*
s
 =
c
)

51  (*Ë
s
;

53 
	}
}

56 
	$gës
(*
buf
, 
max
)

58 
i
, 
cc
;

59 
c
;

61 
i
=0; i+1 < 
max
; ){

62 
cc
 = 
	`ªad
(0, &
c
, 1);

63 if(
cc
 < 1)

65 
buf
[
i
++] = 
c
;

66 if(
c
 == '\n' || c == '\r')

69 
buf
[
i
] = '\0';

70  
buf
;

71 
	}
}

74 
	$°©
(*
n
, 
°©
 *
°
)

76 
fd
;

77 
r
;

79 
fd
 = 
	`›í
(
n
, 
O_RDONLY
);

80 if(
fd
 < 0)

82 
r
 = 
	`f°©
(
fd
, 
°
);

83 
	`˛o£
(
fd
);

84  
r
;

85 
	}
}

88 
	$©oi
(c⁄° *
s
)

90 
n
;

92 
n
 = 0;

93 '0' <*
s
 && *s <= '9')

94 
n
 =Ç*10 + *
s
++ - '0';

95  
n
;

96 
	}
}

99 
	$memmove
(*
vd°
, *
v§c
, 
n
)

101 *
d°
, *
§c
;

103 
d°
 = 
vd°
;

104 
§c
 = 
v§c
;

105 
n
-- > 0)

106 *
d°
++ = *
§c
++;

107  
vd°
;

108 
	}
}

	@umalloc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"∑øm.h
"

9 
	tAlign
;

11 
	uhódî
 {

13 
hódî
 *
	m±r
;

14 
uöt
 
	msize
;

15 } 
	ms
;

16 
Align
 
	mx
;

19 
hódî
 
	tHódî
;

21 
Hódî
 
	gba£
;

22 
Hódî
 *
	g‰ìp
;

25 
	$‰ì
(*
≠
)

27 
Hódî
 *
bp
, *
p
;

29 
bp
 = (
Hódî
*Ë
≠
 - 1;

30 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr)

31 if(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr))

33 if(
bp
 + bp->
s
.
size
 =
p
->s.
±r
){

34 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

35 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

37 
bp
->
s
.
±r
 = 
p
->s.ptr;

38 if(
p
 +Ö->
s
.
size
 =
bp
){

39 
p
->
s
.
size
 +
bp
->s.size;

40 
p
->
s
.
±r
 = 
bp
->s.ptr;

42 
p
->
s
.
±r
 = 
bp
;

43 
‰ìp
 = 
p
;

44 
	}
}

46 
Hódî
*

47 
	$m‹ec‹e
(
uöt
 
nu
)

49 *
p
;

50 
Hódî
 *
hp
;

52 if(
nu
 < 
PAGE
)

53 
nu
 = 
PAGE
;

54 
p
 = 
	`sbrk
(
nu
 * (
Hódî
));

55 if(
p
 == (*) -1)

57 
hp
 = (
Hódî
*)
p
;

58 
hp
->
s
.
size
 = 
nu
;

59 
	`‰ì
((*)(
hp
 + 1));

60  
‰ìp
;

61 
	}
}

64 
	$mÆloc
(
uöt
 
nbyãs
)

66 
Hódî
 *
p
, *
¥evp
;

67 
uöt
 
nunôs
;

69 
nunôs
 = (
nbyãs
 + (
Hódî
) - 1)/(Header) + 1;

70 if((
¥evp
 = 
‰ìp
) == 0){

71 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

72 
ba£
.
s
.
size
 = 0;

74 
p
 = 
¥evp
->
s
.
±r
; ;Örevp =Ö,Ö =Ö->s.ptr){

75 if(
p
->
s
.
size
 >
nunôs
){

76 if(
p
->
s
.
size
 =
nunôs
)

77 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

79 
p
->
s
.
size
 -
nunôs
;

80 
p
 +p->
s
.
size
;

81 
p
->
s
.
size
 = 
nunôs
;

83 
‰ìp
 = 
¥evp
;

84  (*Ë(
p
 + 1);

86 if(
p
 =
‰ìp
)

87 if((
p
 = 
	`m‹ec‹e
(
nunôs
)) == 0)

90 
	}
}

	@user.h

1 
	g°©
;

4 
f‹k
();

5 
	$exô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

6 
	`waô
();

7 
	`pùe
(*);

8 
	`wrôe
(, *, );

9 
	`ªad
(, *, );

10 
	`˛o£
();

11 
	`kûl
();

12 
	`exec
(*, **);

13 
	`›í
(*, );

14 
	`mknod
(*, , );

15 
	`u∆ök
(*);

16 
	`f°©
(
fd
, 
°©
*);

17 
	`lök
(*, *);

18 
	`mkdú
(*);

19 
	`chdú
(*);

20 
	`dup
();

21 
	`gëpid
();

22 * 
	`sbrk
();

23 
	`¶ìp
();

26 
	`°©
(*, 
°©
*);

27 * 
	`°r˝y
(*, *);

28 *
	`memmove
(*, *, );

29 * 
	`°rchr
(c⁄° *, 
c
);

30 
	`°rcmp
(const *, const *);

31 
	`¥ötf
(, *, ...);

32 * 
	`gës
(*, 
max
);

33 
uöt
 
	`°æí
(*);

34 * 
	`mem£t
(*, , 
uöt
);

35 * 
	`mÆloc
(
uöt
);

36 
	`‰ì
(*);

37 
	`©oi
(const *);

	@usertests.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"fs.h
"

5 
	~"f˙é.h
"

7 
	gbuf
[2048];

8 
	g«me
[3];

9 *
	gecho_¨gs
[] = { "echo", "ALL", "TESTS", "PASSED", 0 };

10 *
	gˇt_¨gs
[] = { "cat", "README", 0 };

11 
	g°dout
 = 1;

16 
	$›íã°
()

18 
fd
;

20 
	`¥ötf
(
°dout
, "openÅest\n");

21 
fd
 = 
	`›í
("echo", 0);

22 if(
fd
 < 0){

23 
	`¥ötf
(
°dout
, "openÉcho failed!\n");

24 
	`exô
();

26 
	`˛o£
(
fd
);

27 
fd
 = 
	`›í
("doesnotexist", 0);

28 if(
fd
 >= 0){

29 
	`¥ötf
(
°dout
, "open doesnotexist succeeded!\n");

30 
	`exô
();

32 
	`¥ötf
(
°dout
, "openÅest ok\n");

33 
	}
}

36 
	$wrôëe°
()

38 
fd
;

39 
i
;

41 
	`¥ötf
(
°dout
, "small fileÅest\n");

42 
fd
 = 
	`›í
("smÆl", 
O_CREATE
|
O_RDWR
);

43 if(
fd
 >= 0){

44 
	`¥ötf
(
°dout
, "creat small succeeded; ok\n");

46 
	`¥ötf
(
°dout
, "error: creat small failed!\n");

47 
	`exô
();

49 
i
 = 0; i < 100; i++) {

50 if(
	`wrôe
(
fd
, "aaaaaaaaaa", 10) != 10) {

51 
	`¥ötf
(
°dout
, "îr‹: wrôêØ %dÇew fûêÁûed\n", 
i
);

52 
	`exô
();

54 if(
	`wrôe
(
fd
, "bbbbbbbbbb", 10) != 10) {

55 
	`¥ötf
(
°dout
, "îr‹: wrôêbb %dÇew fûêÁûed\n", 
i
);

56 
	`exô
();

59 
	`¥ötf
(
°dout
, "writes ok\n");

60 
	`˛o£
(
fd
);

61 
fd
 = 
	`›í
("smÆl", 
O_RDONLY
);

62 if(
fd
 >= 0){

63 
	`¥ötf
(
°dout
, "open small succeeded ok\n");

65 
	`¥ötf
(
°dout
, "error: open small failed!\n");

66 
	`exô
();

68 
i
 = 
	`ªad
(
fd
, 
buf
, 2000);

69 if(
i
 == 2000) {

70 
	`¥ötf
(
°dout
, "read succeeded ok\n");

72 
	`¥ötf
(
°dout
, "read failed\n");

73 
	`exô
();

75 
	`˛o£
(
fd
);

77 if(
	`u∆ök
("small") < 0) {

78 
	`¥ötf
(
°dout
, "unlink small failed\n");

79 
	`exô
();

81 
	`¥ötf
(
°dout
, "small fileÅest ok\n");

82 
	}
}

85 
	$wrôëe°1
()

87 
i
, 
fd
, 
n
;

89 
	`¥ötf
(
°dout
, "big filesÅest\n");

91 
fd
 = 
	`›í
("big", 
O_CREATE
|
O_RDWR
);

92 if(
fd
 < 0){

93 
	`¥ötf
(
°dout
, "error: creat big failed!\n");

94 
	`exô
();

97 
i
 = 0; i < 
MAXFILE
; i++) {

98 ((*Ë
buf
)[0] = 
i
;

99 if(
	`wrôe
(
fd
, 
buf
, 512) != 512) {

100 
	`¥ötf
(
°dout
, "îr‹: wrôêbig fûêÁûed\n", 
i
);

101 
	`exô
();

105 
	`˛o£
(
fd
);

107 
fd
 = 
	`›í
("big", 
O_RDONLY
);

108 if(
fd
 < 0){

109 
	`¥ötf
(
°dout
, "error: open big failed!\n");

110 
	`exô
();

113 
n
 = 0;

115 
i
 = 
	`ªad
(
fd
, 
buf
, 512);

116 if(
i
 == 0) {

117 if(
n
 =
MAXFILE
 - 1) {

118 
	`¥ötf
(
°dout
, "ªad o∆y %d block†‰om big", 
n
);

119 
	`exô
();

122 } if(
i
 != 512) {

123 
	`¥ötf
(
°dout
, "ªad faûed %d\n", 
i
);

124 
	`exô
();

126 if(((*)
buf
)[0] !
n
) {

127 
	`¥ötf
(
°dout
, "read content of block %d is %d\n",

128 
n
, ((*)
buf
)[0]);

129 
	`exô
();

131 
n
++;

133 
	`˛o£
(
fd
);

134 if(
	`u∆ök
("big") < 0) {

135 
	`¥ötf
(
°dout
, "unlink big failed\n");

136 
	`exô
();

138 
	`¥ötf
(
°dout
, "big files ok\n");

139 
	}
}

142 
	$¸óãã°
()

144 
i
, 
fd
;

146 
	`¥ötf
(
°dout
, "many creates, followed by unlinkÅest\n");

148 
«me
[0] = 'a';

149 
«me
[2] = '\0';

150 
i
 = 0; i < 52; i++) {

151 
«me
[1] = '0' + 
i
;

152 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

153 
	`˛o£
(
fd
);

155 
«me
[0] = 'a';

156 
«me
[2] = '\0';

157 
i
 = 0; i < 52; i++) {

158 
«me
[1] = '0' + 
i
;

159 
	`u∆ök
(
«me
);

161 
	`¥ötf
(
°dout
, "many creates, followed by unlink; ok\n");

162 
	}
}

164 
	$dúã°
()

166 
	`¥ötf
(
°dout
, "mkdirÅest\n");

168 if(
	`mkdú
("dir0") < 0) {

169 
	`¥ötf
(
°dout
, "mkdir failed\n");

170 
	`exô
();

173 if(
	`chdú
("dir0") < 0) {

174 
	`¥ötf
(
°dout
, "chdir dir0 failed\n");

175 
	`exô
();

178 if(
	`chdú
("..") < 0) {

179 
	`¥ötf
(
°dout
, "chdir .. failed\n");

180 
	`exô
();

183 if(
	`u∆ök
("dir0") < 0) {

184 
	`¥ötf
(
°dout
, "unlink dir0 failed\n");

185 
	`exô
();

187 
	`¥ötf
(
°dout
, "mkdirÅest\n");

188 
	}
}

191 
	$exe˘e°
()

193 
	`¥ötf
(
°dout
, "execÅest\n");

194 if(
	`exec
("echo", 
echo_¨gs
) < 0) {

195 
	`¥ötf
(
°dout
, "execÉcho failed\n");

196 
	`exô
();

198 
	}
}

203 
	$pùe1
()

205 
fds
[2], 
pid
;

206 
£q
, 
i
, 
n
, 
cc
, 
tŸÆ
;

208 if(
	`pùe
(
fds
) != 0){

209 
	`¥ötf
(1, "pipe() failed\n");

210 
	`exô
();

212 
pid
 = 
	`f‹k
();

213 
£q
 = 0;

214 if(
pid
 == 0){

215 
	`˛o£
(
fds
[0]);

216 
n
 = 0;Ç < 5;Ç++){

217 
i
 = 0; i < 1033; i++)

218 
buf
[
i
] = 
£q
++;

219 if(
	`wrôe
(
fds
[1], 
buf
, 1033) != 1033){

220 
	`¥ötf
(1, "pipe1 oops 1\n");

221 
	`exô
();

224 
	`exô
();

225 } if(
pid
 > 0){

226 
	`˛o£
(
fds
[1]);

227 
tŸÆ
 = 0;

228 
cc
 = 1;

229 (
n
 = 
	`ªad
(
fds
[0], 
buf
, 
cc
)) > 0){

230 
i
 = 0; i < 
n
; i++){

231 if((
buf
[
i
] & 0xffË!(
£q
++ & 0xff)){

232 
	`¥ötf
(1, "pipe1 oops 2\n");

236 
tŸÆ
 +
n
;

237 
cc
 = cc * 2;

238 if(
cc
 > (
buf
))

239 
cc
 = (
buf
);

241 if(
tŸÆ
 != 5 * 1033)

242 
	`¥ötf
(1, "pùe1 o›†3ÅŸÆ %d\n", 
tŸÆ
);

243 
	`˛o£
(
fds
[0]);

244 
	`waô
();

246 
	`¥ötf
(1, "fork() failed\n");

247 
	`exô
();

249 
	`¥ötf
(1, "pipe1 ok\n");

250 
	}
}

254 
	$¥ìm±
()

256 
pid1
, 
pid2
, 
pid3
;

257 
pfds
[2];

259 
	`¥ötf
(1, "preempt: ");

260 
pid1
 = 
	`f‹k
();

261 if(
pid1
 == 0)

265 
pid2
 = 
	`f‹k
();

266 if(
pid2
 == 0)

270 
	`pùe
(
pfds
);

271 
pid3
 = 
	`f‹k
();

272 if(
pid3
 == 0){

273 
	`˛o£
(
pfds
[0]);

274 if(
	`wrôe
(
pfds
[1], "x", 1) != 1)

275 
	`¥ötf
(1, "preempt writeÉrror");

276 
	`˛o£
(
pfds
[1]);

281 
	`˛o£
(
pfds
[1]);

282 if(
	`ªad
(
pfds
[0], 
buf
, (buf)) != 1){

283 
	`¥ötf
(1, "preemptÑeadÉrror");

286 
	`˛o£
(
pfds
[0]);

287 
	`¥ötf
(1, "kill... ");

288 
	`kûl
(
pid1
);

289 
	`kûl
(
pid2
);

290 
	`kûl
(
pid3
);

291 
	`¥ötf
(1, "wait... ");

292 
	`waô
();

293 
	`waô
();

294 
	`waô
();

295 
	`¥ötf
(1, "preempt ok\n");

296 
	}
}

300 
	$exôwaô
()

302 
i
, 
pid
;

304 
i
 = 0; i < 100; i++){

305 
pid
 = 
	`f‹k
();

306 if(
pid
 < 0){

307 
	`¥ötf
(1, "fork failed\n");

310 if(
pid
){

311 if(
	`waô
(Ë!
pid
){

312 
	`¥ötf
(1, "wait wrongÖid\n");

316 
	`exô
();

319 
	`¥ötf
(1, "exitwait ok\n");

320 
	}
}

323 
	$mem
()

325 *
m1
, *
m2
;

326 
pid
;

328 if((
pid
 = 
	`f‹k
()) == 0){

329 
m1
 = 0;

330 (
m2
 = 
	`mÆloc
(10001)) != 0) {

331 *(**Ë
m2
 = 
m1
;

332 
m1
 = 
m2
;

334 
m1
) {

335 
m2
 = *(**)
m1
;

336 
	`‰ì
(
m1
);

337 
m1
 = 
m2
;

339 
m1
 = 
	`mÆloc
(1024*20);

340 if(
m1
 == 0) {

341 
	`¥ötf
(1, "couldn'tállocate mem?!!\n");

342 
	`exô
();

344 
	`‰ì
(
m1
);

345 
	`¥ötf
(1, "mem ok\n");

346 
	`exô
();

348 
	`waô
();

350 
	}
}

357 
	$sh¨edfd
()

359 
fd
, 
pid
, 
i
, 
n
, 
nc
, 
≈
;

360 
buf
[10];

362 
	`u∆ök
("sharedfd");

363 
fd
 = 
	`›í
("sh¨edfd", 
O_CREATE
|
O_RDWR
);

364 if(
fd
 < 0){

365 
	`¥ötf
(1, "fstests: cannot open sharedfd for writing");

368 
pid
 = 
	`f‹k
();

369 
	`mem£t
(
buf
, 
pid
==0?'c':'p', (buf));

370 
i
 = 0; i < 1000; i++){

371 if(
	`wrôe
(
fd
, 
buf
, (buf)) != (buf)){

372 
	`¥ötf
(1, "fstests: write sharedfd failed\n");

376 if(
pid
 == 0)

377 
	`exô
();

379 
	`waô
();

380 
	`˛o£
(
fd
);

381 
fd
 = 
	`›í
("sharedfd", 0);

382 if(
fd
 < 0){

383 
	`¥ötf
(1, "fstests: cannot open sharedfd forÑeading\n");

386 
nc
 = 
≈
 = 0;

387 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

388 
i
 = 0; i < (
buf
); i++){

389 if(
buf
[
i
] == 'c')

390 
nc
++;

391 if(
buf
[
i
] == 'p')

392 
≈
++;

395 
	`˛o£
(
fd
);

396 
	`u∆ök
("sharedfd");

397 if(
nc
 =10000 && 
≈
 == 10000)

398 
	`¥ötf
(1, "sharedfd ok\n");

400 
	`¥ötf
(1, "sh¨edfd o›†%d %d\n", 
nc
, 
≈
);

401 
	}
}

406 
	$twofûes
()

408 
fd
, 
pid
, 
i
, 
j
, 
n
, 
tŸÆ
;

409 *
‚ame
;

411 
	`¥ötf
(1, "twofilesÅest\n");

413 
	`u∆ök
("f1");

414 
	`u∆ök
("f2");

416 
pid
 = 
	`f‹k
();

417 if(
pid
 < 0){

418 
	`¥ötf
(1, "fork failed\n");

422 
‚ame
 = 
pid
 ? "f1" : "f2";

423 
fd
 = 
	`›í
(
‚ame
, 
O_CREATE
 | 
O_RDWR
);

424 if(
fd
 < 0){

425 
	`¥ötf
(1, "create failed\n");

426 
	`exô
();

429 
	`mem£t
(
buf
, 
pid
?'p':'c', 512);

430 
i
 = 0; i < 12; i++){

431 if((
n
 = 
	`wrôe
(
fd
, 
buf
, 500)) != 500){

432 
	`¥ötf
(1, "wrôêÁûed %d\n", 
n
);

433 
	`exô
();

436 
	`˛o£
(
fd
);

437 if(
pid
)

438 
	`waô
();

440 
	`exô
();

442 
i
 = 0; i < 2; i++){

443 
fd
 = 
	`›í
(
i
?"f1":"f2", 0);

444 
tŸÆ
 = 0;

445 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

446 
j
 = 0; j < 
n
; j++){

447 if(
buf
[
j
] !(
i
?'p':'c')){

448 
	`¥ötf
(1, "wrong char\n");

449 
	`exô
();

452 
tŸÆ
 +
n
;

454 
	`˛o£
(
fd
);

455 if(
tŸÆ
 != 12*500){

456 
	`¥ötf
(1, "wr⁄gÜígth %d\n", 
tŸÆ
);

457 
	`exô
();

461 
	`u∆ök
("f1");

462 
	`u∆ök
("f2");

464 
	`¥ötf
(1, "twofiles ok\n");

465 
	}
}

469 
	$¸óãdñëe
()

471 íum { 
N
 = 20 };

472 
pid
, 
i
, 
fd
;

473 
«me
[32];

475 
	`¥ötf
(1, "createdeleteÅest\n");

476 
pid
 = 
	`f‹k
();

477 if(
pid
 < 0){

478 
	`¥ötf
(1, "fork failed\n");

479 
	`exô
();

482 
«me
[0] = 
pid
 ? 'p' : 'c';

483 
«me
[2] = '\0';

484 
i
 = 0; i < 
N
; i++){

485 
«me
[1] = '0' + 
i
;

486 
fd
 = 
	`›í
(
«me
, 
O_CREATE
 | 
O_RDWR
);

487 if(
fd
 < 0){

488 
	`¥ötf
(1, "create failed\n");

489 
	`exô
();

491 
	`˛o£
(
fd
);

492 if(
i
 > 0 && (i % 2 ) == 0){

493 
«me
[1] = '0' + (
i
 / 2);

494 if(
	`u∆ök
(
«me
) < 0){

495 
	`¥ötf
(1, "unlink failed\n");

496 
	`exô
();

501 if(
pid
==0)

502 
	`exô
();

504 
	`waô
();

506 
i
 = 0; i < 
N
; i++){

507 
«me
[0] = 'p';

508 
«me
[1] = '0' + 
i
;

509 
fd
 = 
	`›í
(
«me
, 0);

510 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

511 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

512 
	`exô
();

513 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

514 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

515 
	`exô
();

517 if(
fd
 >= 0)

518 
	`˛o£
(
fd
);

520 
«me
[0] = 'c';

521 
«me
[1] = '0' + 
i
;

522 
fd
 = 
	`›í
(
«me
, 0);

523 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

524 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

525 
	`exô
();

526 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

527 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

528 
	`exô
();

530 if(
fd
 >= 0)

531 
	`˛o£
(
fd
);

534 
i
 = 0; i < 
N
; i++){

535 
«me
[0] = 'p';

536 
«me
[1] = '0' + 
i
;

537 
	`u∆ök
(
«me
);

538 
«me
[0] = 'c';

539 
	`u∆ök
(
«me
);

542 
	`¥ötf
(1, "createdelete ok\n");

543 
	}
}

547 
	$u∆ökªad
()

549 
fd
, 
fd1
;

551 
	`¥ötf
(1, "unlinkreadÅest\n");

552 
fd
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

553 if(
fd
 < 0){

554 
	`¥ötf
(1, "create unlinkread failed\n");

555 
	`exô
();

557 
	`wrôe
(
fd
, "hello", 5);

558 
	`˛o£
(
fd
);

560 
fd
 = 
	`›í
("u∆ökªad", 
O_RDWR
);

561 if(
fd
 < 0){

562 
	`¥ötf
(1, "open unlinkread failed\n");

563 
	`exô
();

565 if(
	`u∆ök
("unlinkread") != 0){

566 
	`¥ötf
(1, "unlink unlinkread failed\n");

567 
	`exô
();

570 
fd1
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

571 
	`wrôe
(
fd1
, "yyy", 3);

572 
	`˛o£
(
fd1
);

574 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

575 
	`¥ötf
(1, "unlinkreadÑead failed");

576 
	`exô
();

578 if(
buf
[0] != 'h'){

579 
	`¥ötf
(1, "unlinkread wrong data\n");

580 
	`exô
();

582 if(
	`wrôe
(
fd
, 
buf
, 10) != 10){

583 
	`¥ötf
(1, "unlinkread write failed\n");

584 
	`exô
();

586 
	`˛o£
(
fd
);

587 
	`u∆ök
("unlinkread");

588 
	`¥ötf
(1, "unlinkread ok\n");

589 
	}
}

592 
	$lökã°
()

594 
fd
;

596 
	`¥ötf
(1, "linktest\n");

598 
	`u∆ök
("lf1");

599 
	`u∆ök
("lf2");

601 
fd
 = 
	`›í
("lf1", 
O_CREATE
|
O_RDWR
);

602 if(
fd
 < 0){

603 
	`¥ötf
(1, "createÜf1 failed\n");

604 
	`exô
();

606 if(
	`wrôe
(
fd
, "hello", 5) != 5){

607 
	`¥ötf
(1, "writeÜf1 failed\n");

608 
	`exô
();

610 
	`˛o£
(
fd
);

612 if(
	`lök
("lf1", "lf2") < 0){

613 
	`¥ötf
(1, "linkÜf1Üf2 failed\n");

614 
	`exô
();

616 
	`u∆ök
("lf1");

618 if(
	`›í
("lf1", 0) >= 0){

619 
	`¥ötf
(1, "unlinkedÜf1 but it is stillÅhere!\n");

620 
	`exô
();

623 
fd
 = 
	`›í
("lf2", 0);

624 if(
fd
 < 0){

625 
	`¥ötf
(1, "openÜf2 failed\n");

626 
	`exô
();

628 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

629 
	`¥ötf
(1, "readÜf2 failed\n");

630 
	`exô
();

632 
	`˛o£
(
fd
);

634 if(
	`lök
("lf2", "lf2") >= 0){

635 
	`¥ötf
(1, "linkÜf2Üf2 succeeded! oops\n");

636 
	`exô
();

639 
	`u∆ök
("lf2");

640 if(
	`lök
("lf2", "lf1") >= 0){

641 
	`¥ötf
(1, "linkÇon-existant succeeded! oops\n");

642 
	`exô
();

645 if(
	`lök
(".", "lf1") >= 0){

646 
	`¥ötf
(1, "link .Üf1 succeeded! oops\n");

647 
	`exô
();

650 
	`¥ötf
(1, "linktest ok\n");

651 
	}
}

655 
	$c⁄¸óã
()

657 
fûe
[3];

658 
i
, 
pid
, 
n
, 
fd
;

659 
Á
[40];

661 
ush‹t
 
öum
;

662 
«me
[14];

663 } 
de
;

665 
	`¥ötf
(1, "concreateÅest\n");

666 
fûe
[0] = 'C';

667 
fûe
[2] = '\0';

668 
i
 = 0; i < 40; i++){

669 
fûe
[1] = '0' + 
i
;

670 
	`u∆ök
(
fûe
);

671 
pid
 = 
	`f‹k
();

672 if(
pid
 && (
i
 % 3) == 1){

673 
	`lök
("C0", 
fûe
);

674 } if(
pid
 =0 && (
i
 % 5) == 1){

675 
	`lök
("C0", 
fûe
);

677 
fd
 = 
	`›í
(
fûe
, 
O_CREATE
 | 
O_RDWR
);

678 if(
fd
 < 0){

679 
	`¥ötf
(1, "c⁄¸óã cª©ê%†Áûed\n", 
fûe
);

680 
	`exô
();

682 
	`˛o£
(
fd
);

684 if(
pid
 == 0)

685 
	`exô
();

687 
	`waô
();

690 
	`mem£t
(
Á
, 0, (fa));

691 
fd
 = 
	`›í
(".", 0);

692 
n
 = 0;

693 
	`ªad
(
fd
, &
de
, (de)) > 0){

694 if(
de
.
öum
 == 0)

696 if(
de
.
«me
[0] == 'C' && de.name[2] == '\0'){

697 
i
 = 
de
.
«me
[1] - '0';

698 if(
i
 < 0 || i >(
Á
)){

699 
	`¥ötf
(1, "c⁄¸óã weúd fûê%s\n", 
de
.
«me
);

700 
	`exô
();

702 if(
Á
[
i
]){

703 
	`¥ötf
(1, "c⁄¸óã du∂iˇã fûê%s\n", 
de
.
«me
);

704 
	`exô
();

706 
Á
[
i
] = 1;

707 
n
++;

710 
	`˛o£
(
fd
);

712 if(
n
 != 40){

713 
	`¥ötf
(1, "concreateÇotÉnough files in directoryÜisting\n");

714 
	`exô
();

717 
i
 = 0; i < 40; i++){

718 
fûe
[1] = '0' + 
i
;

719 
pid
 = 
	`f‹k
();

720 if(
pid
 < 0){

721 
	`¥ötf
(1, "fork failed\n");

722 
	`exô
();

724 if(((
i
 % 3Ë=0 && 
pid
 == 0) ||

725 ((
i
 % 3Ë=1 && 
pid
 != 0)){

726 
fd
 = 
	`›í
(
fûe
, 0);

727 
	`˛o£
(
fd
);

729 
	`u∆ök
(
fûe
);

731 if(
pid
 == 0)

732 
	`exô
();

734 
	`waô
();

737 
	`¥ötf
(1, "concreate ok\n");

738 
	}
}

742 
	$bigdú
()

744 
i
, 
fd
;

745 
«me
[10];

747 
	`¥ötf
(1, "bigdirÅest\n");

748 
	`u∆ök
("bd");

750 
fd
 = 
	`›í
("bd", 
O_CREATE
);

751 if(
fd
 < 0){

752 
	`¥ötf
(1, "bigdir create failed\n");

753 
	`exô
();

755 
	`˛o£
(
fd
);

757 
i
 = 0; i < 500; i++){

758 
«me
[0] = 'x';

759 
«me
[1] = '0' + (
i
 / 64);

760 
«me
[2] = '0' + (
i
 % 64);

761 
«me
[3] = '\0';

762 if(
	`lök
("bd", 
«me
) != 0){

763 
	`¥ötf
(1, "bigdirÜink failed\n");

764 
	`exô
();

768 
	`u∆ök
("bd");

769 
i
 = 0; i < 500; i++){

770 
«me
[0] = 'x';

771 
«me
[1] = '0' + (
i
 / 64);

772 
«me
[2] = '0' + (
i
 % 64);

773 
«me
[3] = '\0';

774 if(
	`u∆ök
(
«me
) != 0){

775 
	`¥ötf
(1, "bigdir unlink failed");

776 
	`exô
();

780 
	`¥ötf
(1, "bigdir ok\n");

781 
	}
}

784 
	$subdú
()

786 
fd
, 
cc
;

788 
	`¥ötf
(1, "subdirÅest\n");

790 
	`u∆ök
("ff");

791 if(
	`mkdú
("dd") != 0){

792 
	`¥ötf
(1, "subdir mkdir dd failed\n");

793 
	`exô
();

796 
fd
 = 
	`›í
("dd/ff", 
O_CREATE
 | 
O_RDWR
);

797 if(
fd
 < 0){

798 
	`¥ötf
(1, "create dd/ff failed\n");

799 
	`exô
();

801 
	`wrôe
(
fd
, "ff", 2);

802 
	`˛o£
(
fd
);

804 if(
	`u∆ök
("dd") >= 0){

805 
	`¥ötf
(1, "unlink dd (non-empty dir) succeeded!\n");

806 
	`exô
();

809 if(
	`mkdú
("/dd/dd") != 0){

810 
	`¥ötf
(1, "subdir mkdir dd/dd failed\n");

811 
	`exô
();

814 
fd
 = 
	`›í
("dd/dd/ff", 
O_CREATE
 | 
O_RDWR
);

815 if(
fd
 < 0){

816 
	`¥ötf
(1, "create dd/dd/ff failed\n");

817 
	`exô
();

819 
	`wrôe
(
fd
, "FF", 2);

820 
	`˛o£
(
fd
);

822 
fd
 = 
	`›í
("dd/dd/../ff", 0);

823 if(
fd
 < 0){

824 
	`¥ötf
(1, "open dd/dd/../ff failed\n");

825 
	`exô
();

827 
cc
 = 
	`ªad
(
fd
, 
buf
, (buf));

828 if(
cc
 !2 || 
buf
[0] != 'f'){

829 
	`¥ötf
(1, "dd/dd/../ff wrong content\n");

830 
	`exô
();

832 
	`˛o£
(
fd
);

834 if(
	`lök
("dd/dd/ff", "dd/dd/ffff") != 0){

835 
	`¥ötf
(1, "link dd/dd/ff dd/dd/ffff failed\n");

836 
	`exô
();

839 if(
	`u∆ök
("dd/dd/ff") != 0){

840 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

841 
	`exô
();

843 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

844 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded\n");

845 
	`exô
();

848 if(
	`chdú
("dd") != 0){

849 
	`¥ötf
(1, "chdir dd failed\n");

850 
	`exô
();

852 if(
	`chdú
("dd/../../dd") != 0){

853 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

854 
	`exô
();

856 if(
	`chdú
("dd/../../../dd") != 0){

857 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

858 
	`exô
();

860 if(
	`chdú
("./..") != 0){

861 
	`¥ötf
(1, "chdir ./.. failed\n");

862 
	`exô
();

865 
fd
 = 
	`›í
("dd/dd/ffff", 0);

866 if(
fd
 < 0){

867 
	`¥ötf
(1, "open dd/dd/ffff failed\n");

868 
	`exô
();

870 if(
	`ªad
(
fd
, 
buf
, (buf)) != 2){

871 
	`¥ötf
(1, "read dd/dd/ffff wrongÜen\n");

872 
	`exô
();

874 
	`˛o£
(
fd
);

876 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

877 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded!\n");

878 
	`exô
();

881 if(
	`›í
("dd/ff/ff", 
O_CREATE
|
O_RDWR
) >= 0){

882 
	`¥ötf
(1, "create dd/ff/ff succeeded!\n");

883 
	`exô
();

885 if(
	`›í
("dd/xx/ff", 
O_CREATE
|
O_RDWR
) >= 0){

886 
	`¥ötf
(1, "create dd/xx/ff succeeded!\n");

887 
	`exô
();

889 if(
	`›í
("dd", 
O_CREATE
) >= 0){

890 
	`¥ötf
(1, "create dd succeeded!\n");

891 
	`exô
();

893 if(
	`›í
("dd", 
O_RDWR
) >= 0){

894 
	`¥ötf
(1, "open ddÑdwr succeeded!\n");

895 
	`exô
();

897 if(
	`›í
("dd", 
O_WRONLY
) >= 0){

898 
	`¥ötf
(1, "open dd wronly succeeded!\n");

899 
	`exô
();

901 if(
	`lök
("dd/ff/ff", "dd/dd/xx") == 0){

902 
	`¥ötf
(1, "link dd/ff/ff dd/dd/xx succeeded!\n");

903 
	`exô
();

905 if(
	`lök
("dd/xx/ff", "dd/dd/xx") == 0){

906 
	`¥ötf
(1, "link dd/xx/ff dd/dd/xx succeeded!\n");

907 
	`exô
();

909 if(
	`lök
("dd/ff", "dd/dd/ffff") == 0){

910 
	`¥ötf
(1, "link dd/ff dd/dd/ffff succeeded!\n");

911 
	`exô
();

913 if(
	`mkdú
("dd/ff/ff") == 0){

914 
	`¥ötf
(1, "mkdir dd/ff/ff succeeded!\n");

915 
	`exô
();

917 if(
	`mkdú
("dd/xx/ff") == 0){

918 
	`¥ötf
(1, "mkdir dd/xx/ff succeeded!\n");

919 
	`exô
();

921 if(
	`mkdú
("dd/dd/ffff") == 0){

922 
	`¥ötf
(1, "mkdir dd/dd/ffff succeeded!\n");

923 
	`exô
();

925 if(
	`u∆ök
("dd/xx/ff") == 0){

926 
	`¥ötf
(1, "unlink dd/xx/ff succeeded!\n");

927 
	`exô
();

929 if(
	`u∆ök
("dd/ff/ff") == 0){

930 
	`¥ötf
(1, "unlink dd/ff/ff succeeded!\n");

931 
	`exô
();

933 if(
	`chdú
("dd/ff") == 0){

934 
	`¥ötf
(1, "chdir dd/ff succeeded!\n");

935 
	`exô
();

937 if(
	`chdú
("dd/xx") == 0){

938 
	`¥ötf
(1, "chdir dd/xx succeeded!\n");

939 
	`exô
();

942 if(
	`u∆ök
("dd/dd/ffff") != 0){

943 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

944 
	`exô
();

946 if(
	`u∆ök
("dd/ff") != 0){

947 
	`¥ötf
(1, "unlink dd/ff failed\n");

948 
	`exô
();

950 if(
	`u∆ök
("dd") == 0){

951 
	`¥ötf
(1, "unlinkÇon-empty dd succeeded!\n");

952 
	`exô
();

954 if(
	`u∆ök
("dd/dd") < 0){

955 
	`¥ötf
(1, "unlink dd/dd failed\n");

956 
	`exô
();

958 if(
	`u∆ök
("dd") < 0){

959 
	`¥ötf
(1, "unlink dd failed\n");

960 
	`exô
();

963 
	`¥ötf
(1, "subdir ok\n");

964 
	}
}

967 
	$bigfûe
()

969 
fd
, 
i
, 
tŸÆ
, 
cc
;

971 
	`¥ötf
(1, "bigfileÅest\n");

973 
	`u∆ök
("bigfile");

974 
fd
 = 
	`›í
("bigfûe", 
O_CREATE
 | 
O_RDWR
);

975 if(
fd
 < 0){

976 
	`¥ötf
(1, "cannot create bigfile");

977 
	`exô
();

979 
i
 = 0; i < 20; i++){

980 
	`mem£t
(
buf
, 
i
, 600);

981 if(
	`wrôe
(
fd
, 
buf
, 600) != 600){

982 
	`¥ötf
(1, "write bigfile failed\n");

983 
	`exô
();

986 
	`˛o£
(
fd
);

988 
fd
 = 
	`›í
("bigfile", 0);

989 if(
fd
 < 0){

990 
	`¥ötf
(1, "cannot open bigfile\n");

991 
	`exô
();

993 
tŸÆ
 = 0;

994 
i
 = 0; ; i++){

995 
cc
 = 
	`ªad
(
fd
, 
buf
, 300);

996 if(
cc
 < 0){

997 
	`¥ötf
(1, "read bigfile failed\n");

998 
	`exô
();

1000 if(
cc
 == 0)

1002 if(
cc
 != 300){

1003 
	`¥ötf
(1, "shortÑead bigfile\n");

1004 
	`exô
();

1006 if(
buf
[0] !
i
/2 || buf[299] != i/2){

1007 
	`¥ötf
(1, "read bigfile wrong data\n");

1008 
	`exô
();

1010 
tŸÆ
 +
cc
;

1012 
	`˛o£
(
fd
);

1013 if(
tŸÆ
 != 20*600){

1014 
	`¥ötf
(1, "read bigfile wrongÅotal\n");

1015 
	`exô
();

1017 
	`u∆ök
("bigfile");

1019 
	`¥ötf
(1, "bigfileÅest ok\n");

1020 
	}
}

1023 
	$fouπìn
()

1025 
fd
;

1028 
	`¥ötf
(1, "fourteenÅest\n");

1030 if(
	`mkdú
("12345678901234") != 0){

1031 
	`¥ötf
(1, "mkdir 12345678901234 failed\n");

1032 
	`exô
();

1034 if(
	`mkdú
("12345678901234/123456789012345") != 0){

1035 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 failed\n");

1036 
	`exô
();

1038 
fd
 = 
	`›í
("123456789012345/123456789012345/123456789012345", 
O_CREATE
);

1039 if(
fd
 < 0){

1040 
	`¥ötf
(1, "create 123456789012345/123456789012345/123456789012345 failed\n");

1041 
	`exô
();

1043 
	`˛o£
(
fd
);

1044 
fd
 = 
	`›í
("12345678901234/12345678901234/12345678901234", 0);

1045 if(
fd
 < 0){

1046 
	`¥ötf
(1, "open 12345678901234/12345678901234/12345678901234 failed\n");

1047 
	`exô
();

1049 
	`˛o£
(
fd
);

1051 if(
	`mkdú
("12345678901234/12345678901234") == 0){

1052 
	`¥ötf
(1, "mkdir 12345678901234/12345678901234 succeeded!\n");

1053 
	`exô
();

1055 if(
	`mkdú
("123456789012345/12345678901234") == 0){

1056 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 succeeded!\n");

1057 
	`exô
();

1060 
	`¥ötf
(1, "fourteen ok\n");

1061 
	}
}

1064 
	$rmdŸ
()

1066 
	`¥ötf
(1, "rmdotÅest\n");

1067 if(
	`mkdú
("dots") != 0){

1068 
	`¥ötf
(1, "mkdir dots failed\n");

1069 
	`exô
();

1071 if(
	`chdú
("dots") != 0){

1072 
	`¥ötf
(1, "chdir dots failed\n");

1073 
	`exô
();

1075 if(
	`u∆ök
(".") == 0){

1076 
	`¥ötf
(1, "rm . worked!\n");

1077 
	`exô
();

1079 if(
	`u∆ök
("..") == 0){

1080 
	`¥ötf
(1, "rm .. worked!\n");

1081 
	`exô
();

1083 if(
	`chdú
("/") != 0){

1084 
	`¥ötf
(1, "chdir / failed\n");

1085 
	`exô
();

1087 if(
	`u∆ök
("dots/.") == 0){

1088 
	`¥ötf
(1, "unlink dots/. worked!\n");

1089 
	`exô
();

1091 if(
	`u∆ök
("dots/..") == 0){

1092 
	`¥ötf
(1, "unlink dots/.. worked!\n");

1093 
	`exô
();

1095 if(
	`u∆ök
("dots") != 0){

1096 
	`¥ötf
(1, "unlink dots failed!\n");

1097 
	`exô
();

1099 
	`¥ötf
(1, "rmdot ok\n");

1100 
	}
}

1103 
	$dúfûe
()

1105 
fd
;

1107 
	`¥ötf
(1, "dir vs file\n");

1109 
fd
 = 
	`›í
("dúfûe", 
O_CREATE
);

1110 if(
fd
 < 0){

1111 
	`¥ötf
(1, "create dirfile failed\n");

1112 
	`exô
();

1114 
	`˛o£
(
fd
);

1115 if(
	`chdú
("dirfile") == 0){

1116 
	`¥ötf
(1, "chdir dirfile succeeded!\n");

1117 
	`exô
();

1119 
fd
 = 
	`›í
("dirfile/xx", 0);

1120 if(
fd
 >= 0){

1121 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1122 
	`exô
();

1124 
fd
 = 
	`›í
("dúfûe/xx", 
O_CREATE
);

1125 if(
fd
 >= 0){

1126 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1127 
	`exô
();

1129 if(
	`mkdú
("dirfile/xx") == 0){

1130 
	`¥ötf
(1, "mkdir dirfile/xx succeeded!\n");

1131 
	`exô
();

1133 if(
	`u∆ök
("dirfile/xx") == 0){

1134 
	`¥ötf
(1, "unlink dirfile/xx succeeded!\n");

1135 
	`exô
();

1137 if(
	`lök
("README", "dirfile/xx") == 0){

1138 
	`¥ötf
(1, "linkÅo dirfile/xx succeeded!\n");

1139 
	`exô
();

1141 if(
	`u∆ök
("dirfile") != 0){

1142 
	`¥ötf
(1, "unlink dirfile failed!\n");

1143 
	`exô
();

1146 
fd
 = 
	`›í
(".", 
O_RDWR
);

1147 if(
fd
 >= 0){

1148 
	`¥ötf
(1, "open . for writing succeeded!\n");

1149 
	`exô
();

1151 
fd
 = 
	`›í
(".", 0);

1152 if(
	`wrôe
(
fd
, "x", 1) > 0){

1153 
	`¥ötf
(1, "write . succeeded!\n");

1154 
	`exô
();

1156 
	`˛o£
(
fd
);

1158 
	`¥ötf
(1, "dir vs file OK\n");

1159 
	}
}

1163 
	$úef
()

1165 
i
, 
fd
;

1167 
	`¥ötf
(1, "empty fileÇame\n");

1170 
i
 = 0; i < 50 + 1; i++){

1171 if(
	`mkdú
("irefd") != 0){

1172 
	`¥ötf
(1, "mkdir irefd failed\n");

1173 
	`exô
();

1175 if(
	`chdú
("irefd") != 0){

1176 
	`¥ötf
(1, "chdir irefd failed\n");

1177 
	`exô
();

1180 
	`mkdú
("");

1181 
	`lök
("README", "");

1182 
fd
 = 
	`›í
("", 
O_CREATE
);

1183 if(
fd
 >= 0)

1184 
	`˛o£
(
fd
);

1185 
fd
 = 
	`›í
("xx", 
O_CREATE
);

1186 if(
fd
 >= 0)

1187 
	`˛o£
(
fd
);

1188 
	`u∆ök
("xx");

1191 
	`chdú
("/");

1192 
	`¥ötf
(1, "empty fileÇame OK\n");

1193 
	}
}

1199 
	$f‹kã°
()

1201 
n
, 
pid
;

1203 
	`¥ötf
(1, "forkÅest\n");

1205 
n
=0;Ç<1000;Ç++){

1206 
pid
 = 
	`f‹k
();

1207 if(
pid
 < 0)

1209 if(
pid
 == 0)

1210 
	`exô
();

1213 if(
n
 == 1000){

1214 
	`¥ötf
(1, "fork claimedÅo work 1000Åimes!\n");

1215 
	`exô
();

1218 ; 
n
 > 0;Ç--){

1219 if(
	`waô
() < 0){

1220 
	`¥ötf
(1, "wait stoppedÉarly\n");

1221 
	`exô
();

1225 if(
	`waô
() != -1){

1226 
	`¥ötf
(1, "wait gotÅoo many\n");

1227 
	`exô
();

1230 
	`¥ötf
(1, "forkÅest OK\n");

1231 
	}
}

1234 
	$maö
(
¨gc
, *
¨gv
[])

1236 
	`¥ötf
(1, "usertests starting\n");

1238 if(
	`›í
("usertests.ran", 0) >= 0){

1239 
	`¥ötf
(1, "alreadyÑan userÅests --Ñebuild fs.img\n");

1240 
	`exô
();

1242 
	`˛o£
(
	`›í
("u£πe°s.øn", 
O_CREATE
));

1244 
	`›íã°
();

1245 
	`wrôëe°
();

1246 
	`wrôëe°1
();

1247 
	`¸óãã°
();

1249 
	`mem
();

1250 
	`pùe1
();

1251 
	`¥ìm±
();

1252 
	`exôwaô
();

1254 
	`rmdŸ
();

1255 
	`fouπìn
();

1256 
	`bigfûe
();

1257 
	`subdú
();

1258 
	`c⁄¸óã
();

1259 
	`lökã°
();

1260 
	`u∆ökªad
();

1261 
	`¸óãdñëe
();

1262 
	`twofûes
();

1263 
	`sh¨edfd
();

1264 
	`dúfûe
();

1265 
	`úef
();

1266 
	`f‹kã°
();

1267 
	`bigdú
();

1269 
	`exe˘e°
();

1271 
	`exô
();

1272 
	}
}

	@usys.S

1 
	~"sysˇŒ.h
"

2 
	~"å≠s.h
"

4 
	#STUB
(
«me
) \

5 .
globl
 
«me
; \

6 
«me
: \

7 
movl
 
$SYS_
 ## 
«me
, %
óx
; \

8 
$T_SYSCALL
; \

9 
ªt


	)

11 
	$STUB
(
f‹k
)

12 
	$STUB
(
exô
)

13 
	$STUB
(
waô
)

14 
	$STUB
(
pùe
)

15 
	$STUB
(
ªad
)

16 
	$STUB
(
wrôe
)

17 
	$STUB
(
˛o£
)

18 
	$STUB
(
kûl
)

19 
	$STUB
(
exec
)

20 
	$STUB
(
›í
)

21 
	$STUB
(
mknod
)

22 
	$STUB
(
u∆ök
)

23 
	$STUB
(
f°©
)

24 
	$STUB
(
lök
)

25 
	$STUB
(
mkdú
)

26 
	$STUB
(
chdú
)

27 
	$STUB
(
dup
)

28 
	$STUB
(
gëpid
)

29 
	$STUB
(
sbrk
)

30 
	`STUB
(
¶ìp
)

	@vectors.S

1 #gíî©ed 
by
 
ve˘‹s
.
∂
 - dÿ
nŸ
 
edô


3 .
	gãxt


4 .
globl
 
	gÆ…øps


5 .
globl
 
ve˘‹0


6 
	gve˘‹0
:

7 
pushl
 
$0


8 
pushl
 
$0


9 
jmp
 
Æ…øps


10 .
globl
 
ve˘‹1


11 
ve˘‹1
:

12 
pushl
 
$0


13 
pushl
 
$1


14 
jmp
 
Æ…øps


15 .
globl
 
ve˘‹2


16 
ve˘‹2
:

17 
pushl
 
$0


18 
pushl
 
$2


19 
jmp
 
Æ…øps


20 .
globl
 
ve˘‹3


21 
ve˘‹3
:

22 
pushl
 
$0


23 
pushl
 
$3


24 
jmp
 
Æ…øps


25 .
globl
 
ve˘‹4


26 
ve˘‹4
:

27 
pushl
 
$0


28 
pushl
 
$4


29 
jmp
 
Æ…øps


30 .
globl
 
ve˘‹5


31 
ve˘‹5
:

32 
pushl
 
$0


33 
pushl
 
$5


34 
jmp
 
Æ…øps


35 .
globl
 
ve˘‹6


36 
ve˘‹6
:

37 
pushl
 
$0


38 
pushl
 
$6


39 
jmp
 
Æ…øps


40 .
globl
 
ve˘‹7


41 
ve˘‹7
:

42 
pushl
 
$0


43 
pushl
 
$7


44 
jmp
 
Æ…øps


45 .
globl
 
ve˘‹8


46 
ve˘‹8
:

47 
pushl
 
$8


48 
jmp
 
Æ…øps


49 .
globl
 
ve˘‹9


50 
ve˘‹9
:

51 
pushl
 
$9


52 
jmp
 
Æ…øps


53 .
globl
 
ve˘‹10


54 
ve˘‹10
:

55 
pushl
 
$10


56 
jmp
 
Æ…øps


57 .
globl
 
ve˘‹11


58 
ve˘‹11
:

59 
pushl
 
$11


60 
jmp
 
Æ…øps


61 .
globl
 
ve˘‹12


62 
ve˘‹12
:

63 
pushl
 
$12


64 
jmp
 
Æ…øps


65 .
globl
 
ve˘‹13


66 
ve˘‹13
:

67 
pushl
 
$13


68 
jmp
 
Æ…øps


69 .
globl
 
ve˘‹14


70 
ve˘‹14
:

71 
pushl
 
$14


72 
jmp
 
Æ…øps


73 .
globl
 
ve˘‹15


74 
ve˘‹15
:

75 
pushl
 
$0


76 
pushl
 
$15


77 
jmp
 
Æ…øps


78 .
globl
 
ve˘‹16


79 
ve˘‹16
:

80 
pushl
 
$0


81 
pushl
 
$16


82 
jmp
 
Æ…øps


83 .
globl
 
ve˘‹17


84 
ve˘‹17
:

85 
pushl
 
$17


86 
jmp
 
Æ…øps


87 .
globl
 
ve˘‹18


88 
ve˘‹18
:

89 
pushl
 
$0


90 
pushl
 
$18


91 
jmp
 
Æ…øps


92 .
globl
 
ve˘‹19


93 
ve˘‹19
:

94 
pushl
 
$0


95 
pushl
 
$19


96 
jmp
 
Æ…øps


97 .
globl
 
ve˘‹20


98 
ve˘‹20
:

99 
pushl
 
$0


100 
pushl
 
$20


101 
jmp
 
Æ…øps


102 .
globl
 
ve˘‹21


103 
ve˘‹21
:

104 
pushl
 
$0


105 
pushl
 
$21


106 
jmp
 
Æ…øps


107 .
globl
 
ve˘‹22


108 
ve˘‹22
:

109 
pushl
 
$0


110 
pushl
 
$22


111 
jmp
 
Æ…øps


112 .
globl
 
ve˘‹23


113 
ve˘‹23
:

114 
pushl
 
$0


115 
pushl
 
$23


116 
jmp
 
Æ…øps


117 .
globl
 
ve˘‹24


118 
ve˘‹24
:

119 
pushl
 
$0


120 
pushl
 
$24


121 
jmp
 
Æ…øps


122 .
globl
 
ve˘‹25


123 
ve˘‹25
:

124 
pushl
 
$0


125 
pushl
 
$25


126 
jmp
 
Æ…øps


127 .
globl
 
ve˘‹26


128 
ve˘‹26
:

129 
pushl
 
$0


130 
pushl
 
$26


131 
jmp
 
Æ…øps


132 .
globl
 
ve˘‹27


133 
ve˘‹27
:

134 
pushl
 
$0


135 
pushl
 
$27


136 
jmp
 
Æ…øps


137 .
globl
 
ve˘‹28


138 
ve˘‹28
:

139 
pushl
 
$0


140 
pushl
 
$28


141 
jmp
 
Æ…øps


142 .
globl
 
ve˘‹29


143 
ve˘‹29
:

144 
pushl
 
$0


145 
pushl
 
$29


146 
jmp
 
Æ…øps


147 .
globl
 
ve˘‹30


148 
ve˘‹30
:

149 
pushl
 
$0


150 
pushl
 
$30


151 
jmp
 
Æ…øps


152 .
globl
 
ve˘‹31


153 
ve˘‹31
:

154 
pushl
 
$0


155 
pushl
 
$31


156 
jmp
 
Æ…øps


157 .
globl
 
ve˘‹32


158 
ve˘‹32
:

159 
pushl
 
$0


160 
pushl
 
$32


161 
jmp
 
Æ…øps


162 .
globl
 
ve˘‹33


163 
ve˘‹33
:

164 
pushl
 
$0


165 
pushl
 
$33


166 
jmp
 
Æ…øps


167 .
globl
 
ve˘‹34


168 
ve˘‹34
:

169 
pushl
 
$0


170 
pushl
 
$34


171 
jmp
 
Æ…øps


172 .
globl
 
ve˘‹35


173 
ve˘‹35
:

174 
pushl
 
$0


175 
pushl
 
$35


176 
jmp
 
Æ…øps


177 .
globl
 
ve˘‹36


178 
ve˘‹36
:

179 
pushl
 
$0


180 
pushl
 
$36


181 
jmp
 
Æ…øps


182 .
globl
 
ve˘‹37


183 
ve˘‹37
:

184 
pushl
 
$0


185 
pushl
 
$37


186 
jmp
 
Æ…øps


187 .
globl
 
ve˘‹38


188 
ve˘‹38
:

189 
pushl
 
$0


190 
pushl
 
$38


191 
jmp
 
Æ…øps


192 .
globl
 
ve˘‹39


193 
ve˘‹39
:

194 
pushl
 
$0


195 
pushl
 
$39


196 
jmp
 
Æ…øps


197 .
globl
 
ve˘‹40


198 
ve˘‹40
:

199 
pushl
 
$0


200 
pushl
 
$40


201 
jmp
 
Æ…øps


202 .
globl
 
ve˘‹41


203 
ve˘‹41
:

204 
pushl
 
$0


205 
pushl
 
$41


206 
jmp
 
Æ…øps


207 .
globl
 
ve˘‹42


208 
ve˘‹42
:

209 
pushl
 
$0


210 
pushl
 
$42


211 
jmp
 
Æ…øps


212 .
globl
 
ve˘‹43


213 
ve˘‹43
:

214 
pushl
 
$0


215 
pushl
 
$43


216 
jmp
 
Æ…øps


217 .
globl
 
ve˘‹44


218 
ve˘‹44
:

219 
pushl
 
$0


220 
pushl
 
$44


221 
jmp
 
Æ…øps


222 .
globl
 
ve˘‹45


223 
ve˘‹45
:

224 
pushl
 
$0


225 
pushl
 
$45


226 
jmp
 
Æ…øps


227 .
globl
 
ve˘‹46


228 
ve˘‹46
:

229 
pushl
 
$0


230 
pushl
 
$46


231 
jmp
 
Æ…øps


232 .
globl
 
ve˘‹47


233 
ve˘‹47
:

234 
pushl
 
$0


235 
pushl
 
$47


236 
jmp
 
Æ…øps


237 .
globl
 
ve˘‹48


238 
ve˘‹48
:

239 
pushl
 
$0


240 
pushl
 
$48


241 
jmp
 
Æ…øps


242 .
globl
 
ve˘‹49


243 
ve˘‹49
:

244 
pushl
 
$0


245 
pushl
 
$49


246 
jmp
 
Æ…øps


247 .
globl
 
ve˘‹50


248 
ve˘‹50
:

249 
pushl
 
$0


250 
pushl
 
$50


251 
jmp
 
Æ…øps


252 .
globl
 
ve˘‹51


253 
ve˘‹51
:

254 
pushl
 
$0


255 
pushl
 
$51


256 
jmp
 
Æ…øps


257 .
globl
 
ve˘‹52


258 
ve˘‹52
:

259 
pushl
 
$0


260 
pushl
 
$52


261 
jmp
 
Æ…øps


262 .
globl
 
ve˘‹53


263 
ve˘‹53
:

264 
pushl
 
$0


265 
pushl
 
$53


266 
jmp
 
Æ…øps


267 .
globl
 
ve˘‹54


268 
ve˘‹54
:

269 
pushl
 
$0


270 
pushl
 
$54


271 
jmp
 
Æ…øps


272 .
globl
 
ve˘‹55


273 
ve˘‹55
:

274 
pushl
 
$0


275 
pushl
 
$55


276 
jmp
 
Æ…øps


277 .
globl
 
ve˘‹56


278 
ve˘‹56
:

279 
pushl
 
$0


280 
pushl
 
$56


281 
jmp
 
Æ…øps


282 .
globl
 
ve˘‹57


283 
ve˘‹57
:

284 
pushl
 
$0


285 
pushl
 
$57


286 
jmp
 
Æ…øps


287 .
globl
 
ve˘‹58


288 
ve˘‹58
:

289 
pushl
 
$0


290 
pushl
 
$58


291 
jmp
 
Æ…øps


292 .
globl
 
ve˘‹59


293 
ve˘‹59
:

294 
pushl
 
$0


295 
pushl
 
$59


296 
jmp
 
Æ…øps


297 .
globl
 
ve˘‹60


298 
ve˘‹60
:

299 
pushl
 
$0


300 
pushl
 
$60


301 
jmp
 
Æ…øps


302 .
globl
 
ve˘‹61


303 
ve˘‹61
:

304 
pushl
 
$0


305 
pushl
 
$61


306 
jmp
 
Æ…øps


307 .
globl
 
ve˘‹62


308 
ve˘‹62
:

309 
pushl
 
$0


310 
pushl
 
$62


311 
jmp
 
Æ…øps


312 .
globl
 
ve˘‹63


313 
ve˘‹63
:

314 
pushl
 
$0


315 
pushl
 
$63


316 
jmp
 
Æ…øps


317 .
globl
 
ve˘‹64


318 
ve˘‹64
:

319 
pushl
 
$0


320 
pushl
 
$64


321 
jmp
 
Æ…øps


322 .
globl
 
ve˘‹65


323 
ve˘‹65
:

324 
pushl
 
$0


325 
pushl
 
$65


326 
jmp
 
Æ…øps


327 .
globl
 
ve˘‹66


328 
ve˘‹66
:

329 
pushl
 
$0


330 
pushl
 
$66


331 
jmp
 
Æ…øps


332 .
globl
 
ve˘‹67


333 
ve˘‹67
:

334 
pushl
 
$0


335 
pushl
 
$67


336 
jmp
 
Æ…øps


337 .
globl
 
ve˘‹68


338 
ve˘‹68
:

339 
pushl
 
$0


340 
pushl
 
$68


341 
jmp
 
Æ…øps


342 .
globl
 
ve˘‹69


343 
ve˘‹69
:

344 
pushl
 
$0


345 
pushl
 
$69


346 
jmp
 
Æ…øps


347 .
globl
 
ve˘‹70


348 
ve˘‹70
:

349 
pushl
 
$0


350 
pushl
 
$70


351 
jmp
 
Æ…øps


352 .
globl
 
ve˘‹71


353 
ve˘‹71
:

354 
pushl
 
$0


355 
pushl
 
$71


356 
jmp
 
Æ…øps


357 .
globl
 
ve˘‹72


358 
ve˘‹72
:

359 
pushl
 
$0


360 
pushl
 
$72


361 
jmp
 
Æ…øps


362 .
globl
 
ve˘‹73


363 
ve˘‹73
:

364 
pushl
 
$0


365 
pushl
 
$73


366 
jmp
 
Æ…øps


367 .
globl
 
ve˘‹74


368 
ve˘‹74
:

369 
pushl
 
$0


370 
pushl
 
$74


371 
jmp
 
Æ…øps


372 .
globl
 
ve˘‹75


373 
ve˘‹75
:

374 
pushl
 
$0


375 
pushl
 
$75


376 
jmp
 
Æ…øps


377 .
globl
 
ve˘‹76


378 
ve˘‹76
:

379 
pushl
 
$0


380 
pushl
 
$76


381 
jmp
 
Æ…øps


382 .
globl
 
ve˘‹77


383 
ve˘‹77
:

384 
pushl
 
$0


385 
pushl
 
$77


386 
jmp
 
Æ…øps


387 .
globl
 
ve˘‹78


388 
ve˘‹78
:

389 
pushl
 
$0


390 
pushl
 
$78


391 
jmp
 
Æ…øps


392 .
globl
 
ve˘‹79


393 
ve˘‹79
:

394 
pushl
 
$0


395 
pushl
 
$79


396 
jmp
 
Æ…øps


397 .
globl
 
ve˘‹80


398 
ve˘‹80
:

399 
pushl
 
$0


400 
pushl
 
$80


401 
jmp
 
Æ…øps


402 .
globl
 
ve˘‹81


403 
ve˘‹81
:

404 
pushl
 
$0


405 
pushl
 
$81


406 
jmp
 
Æ…øps


407 .
globl
 
ve˘‹82


408 
ve˘‹82
:

409 
pushl
 
$0


410 
pushl
 
$82


411 
jmp
 
Æ…øps


412 .
globl
 
ve˘‹83


413 
ve˘‹83
:

414 
pushl
 
$0


415 
pushl
 
$83


416 
jmp
 
Æ…øps


417 .
globl
 
ve˘‹84


418 
ve˘‹84
:

419 
pushl
 
$0


420 
pushl
 
$84


421 
jmp
 
Æ…øps


422 .
globl
 
ve˘‹85


423 
ve˘‹85
:

424 
pushl
 
$0


425 
pushl
 
$85


426 
jmp
 
Æ…øps


427 .
globl
 
ve˘‹86


428 
ve˘‹86
:

429 
pushl
 
$0


430 
pushl
 
$86


431 
jmp
 
Æ…øps


432 .
globl
 
ve˘‹87


433 
ve˘‹87
:

434 
pushl
 
$0


435 
pushl
 
$87


436 
jmp
 
Æ…øps


437 .
globl
 
ve˘‹88


438 
ve˘‹88
:

439 
pushl
 
$0


440 
pushl
 
$88


441 
jmp
 
Æ…øps


442 .
globl
 
ve˘‹89


443 
ve˘‹89
:

444 
pushl
 
$0


445 
pushl
 
$89


446 
jmp
 
Æ…øps


447 .
globl
 
ve˘‹90


448 
ve˘‹90
:

449 
pushl
 
$0


450 
pushl
 
$90


451 
jmp
 
Æ…øps


452 .
globl
 
ve˘‹91


453 
ve˘‹91
:

454 
pushl
 
$0


455 
pushl
 
$91


456 
jmp
 
Æ…øps


457 .
globl
 
ve˘‹92


458 
ve˘‹92
:

459 
pushl
 
$0


460 
pushl
 
$92


461 
jmp
 
Æ…øps


462 .
globl
 
ve˘‹93


463 
ve˘‹93
:

464 
pushl
 
$0


465 
pushl
 
$93


466 
jmp
 
Æ…øps


467 .
globl
 
ve˘‹94


468 
ve˘‹94
:

469 
pushl
 
$0


470 
pushl
 
$94


471 
jmp
 
Æ…øps


472 .
globl
 
ve˘‹95


473 
ve˘‹95
:

474 
pushl
 
$0


475 
pushl
 
$95


476 
jmp
 
Æ…øps


477 .
globl
 
ve˘‹96


478 
ve˘‹96
:

479 
pushl
 
$0


480 
pushl
 
$96


481 
jmp
 
Æ…øps


482 .
globl
 
ve˘‹97


483 
ve˘‹97
:

484 
pushl
 
$0


485 
pushl
 
$97


486 
jmp
 
Æ…øps


487 .
globl
 
ve˘‹98


488 
ve˘‹98
:

489 
pushl
 
$0


490 
pushl
 
$98


491 
jmp
 
Æ…øps


492 .
globl
 
ve˘‹99


493 
ve˘‹99
:

494 
pushl
 
$0


495 
pushl
 
$99


496 
jmp
 
Æ…øps


497 .
globl
 
ve˘‹100


498 
ve˘‹100
:

499 
pushl
 
$0


500 
pushl
 
$100


501 
jmp
 
Æ…øps


502 .
globl
 
ve˘‹101


503 
ve˘‹101
:

504 
pushl
 
$0


505 
pushl
 
$101


506 
jmp
 
Æ…øps


507 .
globl
 
ve˘‹102


508 
ve˘‹102
:

509 
pushl
 
$0


510 
pushl
 
$102


511 
jmp
 
Æ…øps


512 .
globl
 
ve˘‹103


513 
ve˘‹103
:

514 
pushl
 
$0


515 
pushl
 
$103


516 
jmp
 
Æ…øps


517 .
globl
 
ve˘‹104


518 
ve˘‹104
:

519 
pushl
 
$0


520 
pushl
 
$104


521 
jmp
 
Æ…øps


522 .
globl
 
ve˘‹105


523 
ve˘‹105
:

524 
pushl
 
$0


525 
pushl
 
$105


526 
jmp
 
Æ…øps


527 .
globl
 
ve˘‹106


528 
ve˘‹106
:

529 
pushl
 
$0


530 
pushl
 
$106


531 
jmp
 
Æ…øps


532 .
globl
 
ve˘‹107


533 
ve˘‹107
:

534 
pushl
 
$0


535 
pushl
 
$107


536 
jmp
 
Æ…øps


537 .
globl
 
ve˘‹108


538 
ve˘‹108
:

539 
pushl
 
$0


540 
pushl
 
$108


541 
jmp
 
Æ…øps


542 .
globl
 
ve˘‹109


543 
ve˘‹109
:

544 
pushl
 
$0


545 
pushl
 
$109


546 
jmp
 
Æ…øps


547 .
globl
 
ve˘‹110


548 
ve˘‹110
:

549 
pushl
 
$0


550 
pushl
 
$110


551 
jmp
 
Æ…øps


552 .
globl
 
ve˘‹111


553 
ve˘‹111
:

554 
pushl
 
$0


555 
pushl
 
$111


556 
jmp
 
Æ…øps


557 .
globl
 
ve˘‹112


558 
ve˘‹112
:

559 
pushl
 
$0


560 
pushl
 
$112


561 
jmp
 
Æ…øps


562 .
globl
 
ve˘‹113


563 
ve˘‹113
:

564 
pushl
 
$0


565 
pushl
 
$113


566 
jmp
 
Æ…øps


567 .
globl
 
ve˘‹114


568 
ve˘‹114
:

569 
pushl
 
$0


570 
pushl
 
$114


571 
jmp
 
Æ…øps


572 .
globl
 
ve˘‹115


573 
ve˘‹115
:

574 
pushl
 
$0


575 
pushl
 
$115


576 
jmp
 
Æ…øps


577 .
globl
 
ve˘‹116


578 
ve˘‹116
:

579 
pushl
 
$0


580 
pushl
 
$116


581 
jmp
 
Æ…øps


582 .
globl
 
ve˘‹117


583 
ve˘‹117
:

584 
pushl
 
$0


585 
pushl
 
$117


586 
jmp
 
Æ…øps


587 .
globl
 
ve˘‹118


588 
ve˘‹118
:

589 
pushl
 
$0


590 
pushl
 
$118


591 
jmp
 
Æ…øps


592 .
globl
 
ve˘‹119


593 
ve˘‹119
:

594 
pushl
 
$0


595 
pushl
 
$119


596 
jmp
 
Æ…øps


597 .
globl
 
ve˘‹120


598 
ve˘‹120
:

599 
pushl
 
$0


600 
pushl
 
$120


601 
jmp
 
Æ…øps


602 .
globl
 
ve˘‹121


603 
ve˘‹121
:

604 
pushl
 
$0


605 
pushl
 
$121


606 
jmp
 
Æ…øps


607 .
globl
 
ve˘‹122


608 
ve˘‹122
:

609 
pushl
 
$0


610 
pushl
 
$122


611 
jmp
 
Æ…øps


612 .
globl
 
ve˘‹123


613 
ve˘‹123
:

614 
pushl
 
$0


615 
pushl
 
$123


616 
jmp
 
Æ…øps


617 .
globl
 
ve˘‹124


618 
ve˘‹124
:

619 
pushl
 
$0


620 
pushl
 
$124


621 
jmp
 
Æ…øps


622 .
globl
 
ve˘‹125


623 
ve˘‹125
:

624 
pushl
 
$0


625 
pushl
 
$125


626 
jmp
 
Æ…øps


627 .
globl
 
ve˘‹126


628 
ve˘‹126
:

629 
pushl
 
$0


630 
pushl
 
$126


631 
jmp
 
Æ…øps


632 .
globl
 
ve˘‹127


633 
ve˘‹127
:

634 
pushl
 
$0


635 
pushl
 
$127


636 
jmp
 
Æ…øps


637 .
globl
 
ve˘‹128


638 
ve˘‹128
:

639 
pushl
 
$0


640 
pushl
 
$128


641 
jmp
 
Æ…øps


642 .
globl
 
ve˘‹129


643 
ve˘‹129
:

644 
pushl
 
$0


645 
pushl
 
$129


646 
jmp
 
Æ…øps


647 .
globl
 
ve˘‹130


648 
ve˘‹130
:

649 
pushl
 
$0


650 
pushl
 
$130


651 
jmp
 
Æ…øps


652 .
globl
 
ve˘‹131


653 
ve˘‹131
:

654 
pushl
 
$0


655 
pushl
 
$131


656 
jmp
 
Æ…øps


657 .
globl
 
ve˘‹132


658 
ve˘‹132
:

659 
pushl
 
$0


660 
pushl
 
$132


661 
jmp
 
Æ…øps


662 .
globl
 
ve˘‹133


663 
ve˘‹133
:

664 
pushl
 
$0


665 
pushl
 
$133


666 
jmp
 
Æ…øps


667 .
globl
 
ve˘‹134


668 
ve˘‹134
:

669 
pushl
 
$0


670 
pushl
 
$134


671 
jmp
 
Æ…øps


672 .
globl
 
ve˘‹135


673 
ve˘‹135
:

674 
pushl
 
$0


675 
pushl
 
$135


676 
jmp
 
Æ…øps


677 .
globl
 
ve˘‹136


678 
ve˘‹136
:

679 
pushl
 
$0


680 
pushl
 
$136


681 
jmp
 
Æ…øps


682 .
globl
 
ve˘‹137


683 
ve˘‹137
:

684 
pushl
 
$0


685 
pushl
 
$137


686 
jmp
 
Æ…øps


687 .
globl
 
ve˘‹138


688 
ve˘‹138
:

689 
pushl
 
$0


690 
pushl
 
$138


691 
jmp
 
Æ…øps


692 .
globl
 
ve˘‹139


693 
ve˘‹139
:

694 
pushl
 
$0


695 
pushl
 
$139


696 
jmp
 
Æ…øps


697 .
globl
 
ve˘‹140


698 
ve˘‹140
:

699 
pushl
 
$0


700 
pushl
 
$140


701 
jmp
 
Æ…øps


702 .
globl
 
ve˘‹141


703 
ve˘‹141
:

704 
pushl
 
$0


705 
pushl
 
$141


706 
jmp
 
Æ…øps


707 .
globl
 
ve˘‹142


708 
ve˘‹142
:

709 
pushl
 
$0


710 
pushl
 
$142


711 
jmp
 
Æ…øps


712 .
globl
 
ve˘‹143


713 
ve˘‹143
:

714 
pushl
 
$0


715 
pushl
 
$143


716 
jmp
 
Æ…øps


717 .
globl
 
ve˘‹144


718 
ve˘‹144
:

719 
pushl
 
$0


720 
pushl
 
$144


721 
jmp
 
Æ…øps


722 .
globl
 
ve˘‹145


723 
ve˘‹145
:

724 
pushl
 
$0


725 
pushl
 
$145


726 
jmp
 
Æ…øps


727 .
globl
 
ve˘‹146


728 
ve˘‹146
:

729 
pushl
 
$0


730 
pushl
 
$146


731 
jmp
 
Æ…øps


732 .
globl
 
ve˘‹147


733 
ve˘‹147
:

734 
pushl
 
$0


735 
pushl
 
$147


736 
jmp
 
Æ…øps


737 .
globl
 
ve˘‹148


738 
ve˘‹148
:

739 
pushl
 
$0


740 
pushl
 
$148


741 
jmp
 
Æ…øps


742 .
globl
 
ve˘‹149


743 
ve˘‹149
:

744 
pushl
 
$0


745 
pushl
 
$149


746 
jmp
 
Æ…øps


747 .
globl
 
ve˘‹150


748 
ve˘‹150
:

749 
pushl
 
$0


750 
pushl
 
$150


751 
jmp
 
Æ…øps


752 .
globl
 
ve˘‹151


753 
ve˘‹151
:

754 
pushl
 
$0


755 
pushl
 
$151


756 
jmp
 
Æ…øps


757 .
globl
 
ve˘‹152


758 
ve˘‹152
:

759 
pushl
 
$0


760 
pushl
 
$152


761 
jmp
 
Æ…øps


762 .
globl
 
ve˘‹153


763 
ve˘‹153
:

764 
pushl
 
$0


765 
pushl
 
$153


766 
jmp
 
Æ…øps


767 .
globl
 
ve˘‹154


768 
ve˘‹154
:

769 
pushl
 
$0


770 
pushl
 
$154


771 
jmp
 
Æ…øps


772 .
globl
 
ve˘‹155


773 
ve˘‹155
:

774 
pushl
 
$0


775 
pushl
 
$155


776 
jmp
 
Æ…øps


777 .
globl
 
ve˘‹156


778 
ve˘‹156
:

779 
pushl
 
$0


780 
pushl
 
$156


781 
jmp
 
Æ…øps


782 .
globl
 
ve˘‹157


783 
ve˘‹157
:

784 
pushl
 
$0


785 
pushl
 
$157


786 
jmp
 
Æ…øps


787 .
globl
 
ve˘‹158


788 
ve˘‹158
:

789 
pushl
 
$0


790 
pushl
 
$158


791 
jmp
 
Æ…øps


792 .
globl
 
ve˘‹159


793 
ve˘‹159
:

794 
pushl
 
$0


795 
pushl
 
$159


796 
jmp
 
Æ…øps


797 .
globl
 
ve˘‹160


798 
ve˘‹160
:

799 
pushl
 
$0


800 
pushl
 
$160


801 
jmp
 
Æ…øps


802 .
globl
 
ve˘‹161


803 
ve˘‹161
:

804 
pushl
 
$0


805 
pushl
 
$161


806 
jmp
 
Æ…øps


807 .
globl
 
ve˘‹162


808 
ve˘‹162
:

809 
pushl
 
$0


810 
pushl
 
$162


811 
jmp
 
Æ…øps


812 .
globl
 
ve˘‹163


813 
ve˘‹163
:

814 
pushl
 
$0


815 
pushl
 
$163


816 
jmp
 
Æ…øps


817 .
globl
 
ve˘‹164


818 
ve˘‹164
:

819 
pushl
 
$0


820 
pushl
 
$164


821 
jmp
 
Æ…øps


822 .
globl
 
ve˘‹165


823 
ve˘‹165
:

824 
pushl
 
$0


825 
pushl
 
$165


826 
jmp
 
Æ…øps


827 .
globl
 
ve˘‹166


828 
ve˘‹166
:

829 
pushl
 
$0


830 
pushl
 
$166


831 
jmp
 
Æ…øps


832 .
globl
 
ve˘‹167


833 
ve˘‹167
:

834 
pushl
 
$0


835 
pushl
 
$167


836 
jmp
 
Æ…øps


837 .
globl
 
ve˘‹168


838 
ve˘‹168
:

839 
pushl
 
$0


840 
pushl
 
$168


841 
jmp
 
Æ…øps


842 .
globl
 
ve˘‹169


843 
ve˘‹169
:

844 
pushl
 
$0


845 
pushl
 
$169


846 
jmp
 
Æ…øps


847 .
globl
 
ve˘‹170


848 
ve˘‹170
:

849 
pushl
 
$0


850 
pushl
 
$170


851 
jmp
 
Æ…øps


852 .
globl
 
ve˘‹171


853 
ve˘‹171
:

854 
pushl
 
$0


855 
pushl
 
$171


856 
jmp
 
Æ…øps


857 .
globl
 
ve˘‹172


858 
ve˘‹172
:

859 
pushl
 
$0


860 
pushl
 
$172


861 
jmp
 
Æ…øps


862 .
globl
 
ve˘‹173


863 
ve˘‹173
:

864 
pushl
 
$0


865 
pushl
 
$173


866 
jmp
 
Æ…øps


867 .
globl
 
ve˘‹174


868 
ve˘‹174
:

869 
pushl
 
$0


870 
pushl
 
$174


871 
jmp
 
Æ…øps


872 .
globl
 
ve˘‹175


873 
ve˘‹175
:

874 
pushl
 
$0


875 
pushl
 
$175


876 
jmp
 
Æ…øps


877 .
globl
 
ve˘‹176


878 
ve˘‹176
:

879 
pushl
 
$0


880 
pushl
 
$176


881 
jmp
 
Æ…øps


882 .
globl
 
ve˘‹177


883 
ve˘‹177
:

884 
pushl
 
$0


885 
pushl
 
$177


886 
jmp
 
Æ…øps


887 .
globl
 
ve˘‹178


888 
ve˘‹178
:

889 
pushl
 
$0


890 
pushl
 
$178


891 
jmp
 
Æ…øps


892 .
globl
 
ve˘‹179


893 
ve˘‹179
:

894 
pushl
 
$0


895 
pushl
 
$179


896 
jmp
 
Æ…øps


897 .
globl
 
ve˘‹180


898 
ve˘‹180
:

899 
pushl
 
$0


900 
pushl
 
$180


901 
jmp
 
Æ…øps


902 .
globl
 
ve˘‹181


903 
ve˘‹181
:

904 
pushl
 
$0


905 
pushl
 
$181


906 
jmp
 
Æ…øps


907 .
globl
 
ve˘‹182


908 
ve˘‹182
:

909 
pushl
 
$0


910 
pushl
 
$182


911 
jmp
 
Æ…øps


912 .
globl
 
ve˘‹183


913 
ve˘‹183
:

914 
pushl
 
$0


915 
pushl
 
$183


916 
jmp
 
Æ…øps


917 .
globl
 
ve˘‹184


918 
ve˘‹184
:

919 
pushl
 
$0


920 
pushl
 
$184


921 
jmp
 
Æ…øps


922 .
globl
 
ve˘‹185


923 
ve˘‹185
:

924 
pushl
 
$0


925 
pushl
 
$185


926 
jmp
 
Æ…øps


927 .
globl
 
ve˘‹186


928 
ve˘‹186
:

929 
pushl
 
$0


930 
pushl
 
$186


931 
jmp
 
Æ…øps


932 .
globl
 
ve˘‹187


933 
ve˘‹187
:

934 
pushl
 
$0


935 
pushl
 
$187


936 
jmp
 
Æ…øps


937 .
globl
 
ve˘‹188


938 
ve˘‹188
:

939 
pushl
 
$0


940 
pushl
 
$188


941 
jmp
 
Æ…øps


942 .
globl
 
ve˘‹189


943 
ve˘‹189
:

944 
pushl
 
$0


945 
pushl
 
$189


946 
jmp
 
Æ…øps


947 .
globl
 
ve˘‹190


948 
ve˘‹190
:

949 
pushl
 
$0


950 
pushl
 
$190


951 
jmp
 
Æ…øps


952 .
globl
 
ve˘‹191


953 
ve˘‹191
:

954 
pushl
 
$0


955 
pushl
 
$191


956 
jmp
 
Æ…øps


957 .
globl
 
ve˘‹192


958 
ve˘‹192
:

959 
pushl
 
$0


960 
pushl
 
$192


961 
jmp
 
Æ…øps


962 .
globl
 
ve˘‹193


963 
ve˘‹193
:

964 
pushl
 
$0


965 
pushl
 
$193


966 
jmp
 
Æ…øps


967 .
globl
 
ve˘‹194


968 
ve˘‹194
:

969 
pushl
 
$0


970 
pushl
 
$194


971 
jmp
 
Æ…øps


972 .
globl
 
ve˘‹195


973 
ve˘‹195
:

974 
pushl
 
$0


975 
pushl
 
$195


976 
jmp
 
Æ…øps


977 .
globl
 
ve˘‹196


978 
ve˘‹196
:

979 
pushl
 
$0


980 
pushl
 
$196


981 
jmp
 
Æ…øps


982 .
globl
 
ve˘‹197


983 
ve˘‹197
:

984 
pushl
 
$0


985 
pushl
 
$197


986 
jmp
 
Æ…øps


987 .
globl
 
ve˘‹198


988 
ve˘‹198
:

989 
pushl
 
$0


990 
pushl
 
$198


991 
jmp
 
Æ…øps


992 .
globl
 
ve˘‹199


993 
ve˘‹199
:

994 
pushl
 
$0


995 
pushl
 
$199


996 
jmp
 
Æ…øps


997 .
globl
 
ve˘‹200


998 
ve˘‹200
:

999 
pushl
 
$0


1000 
pushl
 
$200


1001 
jmp
 
Æ…øps


1002 .
globl
 
ve˘‹201


1003 
ve˘‹201
:

1004 
pushl
 
$0


1005 
pushl
 
$201


1006 
jmp
 
Æ…øps


1007 .
globl
 
ve˘‹202


1008 
ve˘‹202
:

1009 
pushl
 
$0


1010 
pushl
 
$202


1011 
jmp
 
Æ…øps


1012 .
globl
 
ve˘‹203


1013 
ve˘‹203
:

1014 
pushl
 
$0


1015 
pushl
 
$203


1016 
jmp
 
Æ…øps


1017 .
globl
 
ve˘‹204


1018 
ve˘‹204
:

1019 
pushl
 
$0


1020 
pushl
 
$204


1021 
jmp
 
Æ…øps


1022 .
globl
 
ve˘‹205


1023 
ve˘‹205
:

1024 
pushl
 
$0


1025 
pushl
 
$205


1026 
jmp
 
Æ…øps


1027 .
globl
 
ve˘‹206


1028 
ve˘‹206
:

1029 
pushl
 
$0


1030 
pushl
 
$206


1031 
jmp
 
Æ…øps


1032 .
globl
 
ve˘‹207


1033 
ve˘‹207
:

1034 
pushl
 
$0


1035 
pushl
 
$207


1036 
jmp
 
Æ…øps


1037 .
globl
 
ve˘‹208


1038 
ve˘‹208
:

1039 
pushl
 
$0


1040 
pushl
 
$208


1041 
jmp
 
Æ…øps


1042 .
globl
 
ve˘‹209


1043 
ve˘‹209
:

1044 
pushl
 
$0


1045 
pushl
 
$209


1046 
jmp
 
Æ…øps


1047 .
globl
 
ve˘‹210


1048 
ve˘‹210
:

1049 
pushl
 
$0


1050 
pushl
 
$210


1051 
jmp
 
Æ…øps


1052 .
globl
 
ve˘‹211


1053 
ve˘‹211
:

1054 
pushl
 
$0


1055 
pushl
 
$211


1056 
jmp
 
Æ…øps


1057 .
globl
 
ve˘‹212


1058 
ve˘‹212
:

1059 
pushl
 
$0


1060 
pushl
 
$212


1061 
jmp
 
Æ…øps


1062 .
globl
 
ve˘‹213


1063 
ve˘‹213
:

1064 
pushl
 
$0


1065 
pushl
 
$213


1066 
jmp
 
Æ…øps


1067 .
globl
 
ve˘‹214


1068 
ve˘‹214
:

1069 
pushl
 
$0


1070 
pushl
 
$214


1071 
jmp
 
Æ…øps


1072 .
globl
 
ve˘‹215


1073 
ve˘‹215
:

1074 
pushl
 
$0


1075 
pushl
 
$215


1076 
jmp
 
Æ…øps


1077 .
globl
 
ve˘‹216


1078 
ve˘‹216
:

1079 
pushl
 
$0


1080 
pushl
 
$216


1081 
jmp
 
Æ…øps


1082 .
globl
 
ve˘‹217


1083 
ve˘‹217
:

1084 
pushl
 
$0


1085 
pushl
 
$217


1086 
jmp
 
Æ…øps


1087 .
globl
 
ve˘‹218


1088 
ve˘‹218
:

1089 
pushl
 
$0


1090 
pushl
 
$218


1091 
jmp
 
Æ…øps


1092 .
globl
 
ve˘‹219


1093 
ve˘‹219
:

1094 
pushl
 
$0


1095 
pushl
 
$219


1096 
jmp
 
Æ…øps


1097 .
globl
 
ve˘‹220


1098 
ve˘‹220
:

1099 
pushl
 
$0


1100 
pushl
 
$220


1101 
jmp
 
Æ…øps


1102 .
globl
 
ve˘‹221


1103 
ve˘‹221
:

1104 
pushl
 
$0


1105 
pushl
 
$221


1106 
jmp
 
Æ…øps


1107 .
globl
 
ve˘‹222


1108 
ve˘‹222
:

1109 
pushl
 
$0


1110 
pushl
 
$222


1111 
jmp
 
Æ…øps


1112 .
globl
 
ve˘‹223


1113 
ve˘‹223
:

1114 
pushl
 
$0


1115 
pushl
 
$223


1116 
jmp
 
Æ…øps


1117 .
globl
 
ve˘‹224


1118 
ve˘‹224
:

1119 
pushl
 
$0


1120 
pushl
 
$224


1121 
jmp
 
Æ…øps


1122 .
globl
 
ve˘‹225


1123 
ve˘‹225
:

1124 
pushl
 
$0


1125 
pushl
 
$225


1126 
jmp
 
Æ…øps


1127 .
globl
 
ve˘‹226


1128 
ve˘‹226
:

1129 
pushl
 
$0


1130 
pushl
 
$226


1131 
jmp
 
Æ…øps


1132 .
globl
 
ve˘‹227


1133 
ve˘‹227
:

1134 
pushl
 
$0


1135 
pushl
 
$227


1136 
jmp
 
Æ…øps


1137 .
globl
 
ve˘‹228


1138 
ve˘‹228
:

1139 
pushl
 
$0


1140 
pushl
 
$228


1141 
jmp
 
Æ…øps


1142 .
globl
 
ve˘‹229


1143 
ve˘‹229
:

1144 
pushl
 
$0


1145 
pushl
 
$229


1146 
jmp
 
Æ…øps


1147 .
globl
 
ve˘‹230


1148 
ve˘‹230
:

1149 
pushl
 
$0


1150 
pushl
 
$230


1151 
jmp
 
Æ…øps


1152 .
globl
 
ve˘‹231


1153 
ve˘‹231
:

1154 
pushl
 
$0


1155 
pushl
 
$231


1156 
jmp
 
Æ…øps


1157 .
globl
 
ve˘‹232


1158 
ve˘‹232
:

1159 
pushl
 
$0


1160 
pushl
 
$232


1161 
jmp
 
Æ…øps


1162 .
globl
 
ve˘‹233


1163 
ve˘‹233
:

1164 
pushl
 
$0


1165 
pushl
 
$233


1166 
jmp
 
Æ…øps


1167 .
globl
 
ve˘‹234


1168 
ve˘‹234
:

1169 
pushl
 
$0


1170 
pushl
 
$234


1171 
jmp
 
Æ…øps


1172 .
globl
 
ve˘‹235


1173 
ve˘‹235
:

1174 
pushl
 
$0


1175 
pushl
 
$235


1176 
jmp
 
Æ…øps


1177 .
globl
 
ve˘‹236


1178 
ve˘‹236
:

1179 
pushl
 
$0


1180 
pushl
 
$236


1181 
jmp
 
Æ…øps


1182 .
globl
 
ve˘‹237


1183 
ve˘‹237
:

1184 
pushl
 
$0


1185 
pushl
 
$237


1186 
jmp
 
Æ…øps


1187 .
globl
 
ve˘‹238


1188 
ve˘‹238
:

1189 
pushl
 
$0


1190 
pushl
 
$238


1191 
jmp
 
Æ…øps


1192 .
globl
 
ve˘‹239


1193 
ve˘‹239
:

1194 
pushl
 
$0


1195 
pushl
 
$239


1196 
jmp
 
Æ…øps


1197 .
globl
 
ve˘‹240


1198 
ve˘‹240
:

1199 
pushl
 
$0


1200 
pushl
 
$240


1201 
jmp
 
Æ…øps


1202 .
globl
 
ve˘‹241


1203 
ve˘‹241
:

1204 
pushl
 
$0


1205 
pushl
 
$241


1206 
jmp
 
Æ…øps


1207 .
globl
 
ve˘‹242


1208 
ve˘‹242
:

1209 
pushl
 
$0


1210 
pushl
 
$242


1211 
jmp
 
Æ…øps


1212 .
globl
 
ve˘‹243


1213 
ve˘‹243
:

1214 
pushl
 
$0


1215 
pushl
 
$243


1216 
jmp
 
Æ…øps


1217 .
globl
 
ve˘‹244


1218 
ve˘‹244
:

1219 
pushl
 
$0


1220 
pushl
 
$244


1221 
jmp
 
Æ…øps


1222 .
globl
 
ve˘‹245


1223 
ve˘‹245
:

1224 
pushl
 
$0


1225 
pushl
 
$245


1226 
jmp
 
Æ…øps


1227 .
globl
 
ve˘‹246


1228 
ve˘‹246
:

1229 
pushl
 
$0


1230 
pushl
 
$246


1231 
jmp
 
Æ…øps


1232 .
globl
 
ve˘‹247


1233 
ve˘‹247
:

1234 
pushl
 
$0


1235 
pushl
 
$247


1236 
jmp
 
Æ…øps


1237 .
globl
 
ve˘‹248


1238 
ve˘‹248
:

1239 
pushl
 
$0


1240 
pushl
 
$248


1241 
jmp
 
Æ…øps


1242 .
globl
 
ve˘‹249


1243 
ve˘‹249
:

1244 
pushl
 
$0


1245 
pushl
 
$249


1246 
jmp
 
Æ…øps


1247 .
globl
 
ve˘‹250


1248 
ve˘‹250
:

1249 
pushl
 
$0


1250 
pushl
 
$250


1251 
jmp
 
Æ…øps


1252 .
globl
 
ve˘‹251


1253 
ve˘‹251
:

1254 
pushl
 
$0


1255 
pushl
 
$251


1256 
jmp
 
Æ…øps


1257 .
globl
 
ve˘‹252


1258 
ve˘‹252
:

1259 
pushl
 
$0


1260 
pushl
 
$252


1261 
jmp
 
Æ…øps


1262 .
globl
 
ve˘‹253


1263 
ve˘‹253
:

1264 
pushl
 
$0


1265 
pushl
 
$253


1266 
jmp
 
Æ…øps


1267 .
globl
 
ve˘‹254


1268 
ve˘‹254
:

1269 
pushl
 
$0


1270 
pushl
 
$254


1271 
jmp
 
Æ…øps


1272 .
globl
 
ve˘‹255


1273 
ve˘‹255
:

1274 
pushl
 
$0


1275 
pushl
 
$255


1276 
jmp
 
Æ…øps


1278 #ve˘‹ 
èbÀ


1279 .
d©a


1280 .
globl
 
ve˘‹s


1281 
ve˘‹s
:

1282 .
ve˘‹0


1283 .
ve˘‹1


1284 .
ve˘‹2


1285 .
ve˘‹3


1286 .
ve˘‹4


1287 .
ve˘‹5


1288 .
ve˘‹6


1289 .
ve˘‹7


1290 .
ve˘‹8


1291 .
ve˘‹9


1292 .
ve˘‹10


1293 .
ve˘‹11


1294 .
ve˘‹12


1295 .
ve˘‹13


1296 .
ve˘‹14


1297 .
ve˘‹15


1298 .
ve˘‹16


1299 .
ve˘‹17


1300 .
ve˘‹18


1301 .
ve˘‹19


1302 .
ve˘‹20


1303 .
ve˘‹21


1304 .
ve˘‹22


1305 .
ve˘‹23


1306 .
ve˘‹24


1307 .
ve˘‹25


1308 .
ve˘‹26


1309 .
ve˘‹27


1310 .
ve˘‹28


1311 .
ve˘‹29


1312 .
ve˘‹30


1313 .
ve˘‹31


1314 .
ve˘‹32


1315 .
ve˘‹33


1316 .
ve˘‹34


1317 .
ve˘‹35


1318 .
ve˘‹36


1319 .
ve˘‹37


1320 .
ve˘‹38


1321 .
ve˘‹39


1322 .
ve˘‹40


1323 .
ve˘‹41


1324 .
ve˘‹42


1325 .
ve˘‹43


1326 .
ve˘‹44


1327 .
ve˘‹45


1328 .
ve˘‹46


1329 .
ve˘‹47


1330 .
ve˘‹48


1331 .
ve˘‹49


1332 .
ve˘‹50


1333 .
ve˘‹51


1334 .
ve˘‹52


1335 .
ve˘‹53


1336 .
ve˘‹54


1337 .
ve˘‹55


1338 .
ve˘‹56


1339 .
ve˘‹57


1340 .
ve˘‹58


1341 .
ve˘‹59


1342 .
ve˘‹60


1343 .
ve˘‹61


1344 .
ve˘‹62


1345 .
ve˘‹63


1346 .
ve˘‹64


1347 .
ve˘‹65


1348 .
ve˘‹66


1349 .
ve˘‹67


1350 .
ve˘‹68


1351 .
ve˘‹69


1352 .
ve˘‹70


1353 .
ve˘‹71


1354 .
ve˘‹72


1355 .
ve˘‹73


1356 .
ve˘‹74


1357 .
ve˘‹75


1358 .
ve˘‹76


1359 .
ve˘‹77


1360 .
ve˘‹78


1361 .
ve˘‹79


1362 .
ve˘‹80


1363 .
ve˘‹81


1364 .
ve˘‹82


1365 .
ve˘‹83


1366 .
ve˘‹84


1367 .
ve˘‹85


1368 .
ve˘‹86


1369 .
ve˘‹87


1370 .
ve˘‹88


1371 .
ve˘‹89


1372 .
ve˘‹90


1373 .
ve˘‹91


1374 .
ve˘‹92


1375 .
ve˘‹93


1376 .
ve˘‹94


1377 .
ve˘‹95


1378 .
ve˘‹96


1379 .
ve˘‹97


1380 .
ve˘‹98


1381 .
ve˘‹99


1382 .
ve˘‹100


1383 .
ve˘‹101


1384 .
ve˘‹102


1385 .
ve˘‹103


1386 .
ve˘‹104


1387 .
ve˘‹105


1388 .
ve˘‹106


1389 .
ve˘‹107


1390 .
ve˘‹108


1391 .
ve˘‹109


1392 .
ve˘‹110


1393 .
ve˘‹111


1394 .
ve˘‹112


1395 .
ve˘‹113


1396 .
ve˘‹114


1397 .
ve˘‹115


1398 .
ve˘‹116


1399 .
ve˘‹117


1400 .
ve˘‹118


1401 .
ve˘‹119


1402 .
ve˘‹120


1403 .
ve˘‹121


1404 .
ve˘‹122


1405 .
ve˘‹123


1406 .
ve˘‹124


1407 .
ve˘‹125


1408 .
ve˘‹126


1409 .
ve˘‹127


1410 .
ve˘‹128


1411 .
ve˘‹129


1412 .
ve˘‹130


1413 .
ve˘‹131


1414 .
ve˘‹132


1415 .
ve˘‹133


1416 .
ve˘‹134


1417 .
ve˘‹135


1418 .
ve˘‹136


1419 .
ve˘‹137


1420 .
ve˘‹138


1421 .
ve˘‹139


1422 .
ve˘‹140


1423 .
ve˘‹141


1424 .
ve˘‹142


1425 .
ve˘‹143


1426 .
ve˘‹144


1427 .
ve˘‹145


1428 .
ve˘‹146


1429 .
ve˘‹147


1430 .
ve˘‹148


1431 .
ve˘‹149


1432 .
ve˘‹150


1433 .
ve˘‹151


1434 .
ve˘‹152


1435 .
ve˘‹153


1436 .
ve˘‹154


1437 .
ve˘‹155


1438 .
ve˘‹156


1439 .
ve˘‹157


1440 .
ve˘‹158


1441 .
ve˘‹159


1442 .
ve˘‹160


1443 .
ve˘‹161


1444 .
ve˘‹162


1445 .
ve˘‹163


1446 .
ve˘‹164


1447 .
ve˘‹165


1448 .
ve˘‹166


1449 .
ve˘‹167


1450 .
ve˘‹168


1451 .
ve˘‹169


1452 .
ve˘‹170


1453 .
ve˘‹171


1454 .
ve˘‹172


1455 .
ve˘‹173


1456 .
ve˘‹174


1457 .
ve˘‹175


1458 .
ve˘‹176


1459 .
ve˘‹177


1460 .
ve˘‹178


1461 .
ve˘‹179


1462 .
ve˘‹180


1463 .
ve˘‹181


1464 .
ve˘‹182


1465 .
ve˘‹183


1466 .
ve˘‹184


1467 .
ve˘‹185


1468 .
ve˘‹186


1469 .
ve˘‹187


1470 .
ve˘‹188


1471 .
ve˘‹189


1472 .
ve˘‹190


1473 .
ve˘‹191


1474 .
ve˘‹192


1475 .
ve˘‹193


1476 .
ve˘‹194


1477 .
ve˘‹195


1478 .
ve˘‹196


1479 .
ve˘‹197


1480 .
ve˘‹198


1481 .
ve˘‹199


1482 .
ve˘‹200


1483 .
ve˘‹201


1484 .
ve˘‹202


1485 .
ve˘‹203


1486 .
ve˘‹204


1487 .
ve˘‹205


1488 .
ve˘‹206


1489 .
ve˘‹207


1490 .
ve˘‹208


1491 .
ve˘‹209


1492 .
ve˘‹210


1493 .
ve˘‹211


1494 .
ve˘‹212


1495 .
ve˘‹213


1496 .
ve˘‹214


1497 .
ve˘‹215


1498 .
ve˘‹216


1499 .
ve˘‹217


1500 .
ve˘‹218


1501 .
ve˘‹219


1502 .
ve˘‹220


1503 .
ve˘‹221


1504 .
ve˘‹222


1505 .
ve˘‹223


1506 .
ve˘‹224


1507 .
ve˘‹225


1508 .
ve˘‹226


1509 .
ve˘‹227


1510 .
ve˘‹228


1511 .
ve˘‹229


1512 .
ve˘‹230


1513 .
ve˘‹231


1514 .
ve˘‹232


1515 .
ve˘‹233


1516 .
ve˘‹234


1517 .
ve˘‹235


1518 .
ve˘‹236


1519 .
ve˘‹237


1520 .
ve˘‹238


1521 .
ve˘‹239


1522 .
ve˘‹240


1523 .
ve˘‹241


1524 .
ve˘‹242


1525 .
ve˘‹243


1526 .
ve˘‹244


1527 .
ve˘‹245


1528 .
ve˘‹246


1529 .
ve˘‹247


1530 .
ve˘‹248


1531 .
ve˘‹249


1532 .
ve˘‹250


1533 .
ve˘‹251


1534 .
ve˘‹252


1535 .
ve˘‹253


1536 .
ve˘‹254


1537 .
ve˘‹255


	@wc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$wc
(
fd
, *
«me
)

10 
i
, 
n
;

11 
l
, 
w
, 
c
, 
öw‹d
;

13 
l
 = 
w
 = 
c
 = 0;

14 
öw‹d
 = 0;

15 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

16 
i
=0; i<
n
; i++){

17 
c
++;

18 if(
buf
[
i
] == '\n')

19 
l
++;

20 if(
	`°rchr
(" \r\t\n\v", 
buf
[
i
]))

21 
öw‹d
 = 0;

22 if(!
öw‹d
){

23 
w
++;

24 
öw‹d
 = 1;

28 if(
n
 < 0){

29 
	`¥ötf
(1, "wc:ÑeadÉrror\n");

30 
	`exô
();

32 
	`¥ötf
(1, "%d %d %d %s\n", 
l
, 
w
, 
c
, 
«me
);

33 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
fd
, 
i
;

40 if(
¨gc
 <= 1){

41 
	`wc
(0, "");

42 
	`exô
();

45 
i
 = 1; i < 
¨gc
; i++){

46 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

47 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

48 
	`exô
();

50 
	`wc
(
fd
, 
¨gv
[
i
]);

51 
	`˛o£
(
fd
);

53 
	`exô
();

54 
	}
}

	@x86.h

3 
ölöe
 
uch¨


4 
	$öb
(
ush‹t
 
p‹t
)

6 
uch¨
 
d©a
;

8 
asm
 vﬁ©ûe("ö %1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

9  
d©a
;

10 
	}
}

12 
ölöe
 

13 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

15 
asm
 volatile("cld\n\trepne\n\tinsl" :

16 "=D" (
addr
), "=c" (
˙t
) :

17 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

19 
	}
}

21 
ölöe
 

22 
	$outb
(
ush‹t
 
p‹t
, 
uch¨
 
d©a
)

24 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

25 
	}
}

27 
ölöe
 

28 
	$outw
(
ush‹t
 
p‹t
, ush‹à
d©a
)

30 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

31 
	}
}

33 
ölöe
 

34 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

36 
asm
 volatile("cld\n\trepne\n\toutsl" :

37 "=S" (
addr
), "=c" (
˙t
) :

38 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

40 
	}
}

42 
ölöe
 
uöt


43 
	$ªad_ebp
()

45 
uöt
 
ebp
;

47 
asm
 vﬁ©ûe("mov»%%ebp, %0" : "˜" (
ebp
));

48  
ebp
;

49 
	}
}

51 
	g£gdesc
;

53 
ölöe
 

54 
	$lgdt
(
£gdesc
 *
p
, 
size
)

56 vﬁ©ûê
ush‹t
 
pd
[3];

58 
pd
[0] = 
size
-1;

59 
pd
[1] = (
uöt
)
p
;

60 
pd
[2] = (
uöt
)
p
 >> 16;

62 
asm
 vﬁ©ûe("lgdà(%0)" : : "r" (
pd
));

63 
	}
}

65 
	gg©edesc
;

67 
ölöe
 

68 
	$lidt
(
g©edesc
 *
p
, 
size
)

70 vﬁ©ûê
ush‹t
 
pd
[3];

72 
pd
[0] = 
size
-1;

73 
pd
[1] = (
uöt
)
p
;

74 
pd
[2] = (
uöt
)
p
 >> 16;

76 
asm
 vﬁ©ûe("lidà(%0)" : : "r" (
pd
));

77 
	}
}

79 
ölöe
 

80 
	$…r
(
ush‹t
 
£l
)

82 
asm
 vﬁ©ûe("…∏%0" : : "r" (
£l
));

83 
	}
}

85 
ölöe
 
uöt


86 
	$ªad_eÊags
()

88 
uöt
 
eÊags
;

89 
asm
 vﬁ©ûe("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

90  
eÊags
;

91 
	}
}

93 
ölöe
 

94 
	$wrôe_eÊags
(
uöt
 
eÊags
)

96 
asm
 vﬁ©ûe("push»%0;Ö›Ê" : : "r" (
eÊags
));

97 
	}
}

99 
ölöe
 
uöt


100 
	$xchg
(vﬁ©ûê
uöt
 *
addr
, uöà
√wvÆ
)

102 
uöt
 
ªsu…
;

105 
asm
 volatile("lock; xchgl %0, %1" :

106 "+m" (*
addr
), "˜" (
ªsu…
) :

107 "1" (
√wvÆ
) :

109  
ªsu…
;

110 
	}
}

112 
ölöe
 

113 
	$˛i
()

115 
asm
 volatile("cli");

116 
	}
}

118 
ölöe
 

119 
	$°i
()

121 
asm
 volatile("sti");

122 
	}
}

126 
	så≠‰ame
 {

128 
uöt
 
	medi
;

129 
uöt
 
	mesi
;

130 
uöt
 
	mebp
;

131 
uöt
 
	m€•
;

132 
uöt
 
	mebx
;

133 
uöt
 
	medx
;

134 
uöt
 
	mecx
;

135 
uöt
 
	móx
;

138 
ush‹t
 
	mes
;

139 
ush‹t
 
	m∑ddög1
;

140 
ush‹t
 
	mds
;

141 
ush‹t
 
	m∑ddög2
;

142 
uöt
 
	må≠no
;

145 
uöt
 
	mîr
;

146 
uöt
 
	meù
;

147 
ush‹t
 
	mcs
;

148 
ush‹t
 
	m∑ddög3
;

149 
uöt
 
	meÊags
;

152 
uöt
 
	me•
;

153 
ush‹t
 
	mss
;

154 
ush‹t
 
	m∑ddög4
;

	@zombie.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

9 
	$maö
()

11 if(
	`f‹k
() > 0)

12 
	`¶ìp
(5);

13 
	`exô
();

14 
	}
}

	@
1
.
0
130
1333
Makefile
asm.h
bio.c
bootasm.S
bootmain.c
bootother.S
buf.h
cat.c
cat.original.c
cat/cat.c
console.c
defs.h
dev.h
echo.c
elf.h
exec.c
fcntl.h
file.c
file.h
fmt/asm.h
fmt/bio.c
fmt/bootasm.S
fmt/bootmain.c
fmt/bootother.S
fmt/buf.h
fmt/console.c
fmt/defs.h
fmt/dev.h
fmt/elf.h
fmt/exec.c
fmt/fcntl.h
fmt/file.c
fmt/file.h
fmt/fs.c
fmt/fs.h
fmt/fsvar.h
fmt/ide.c
fmt/init.c
fmt/initcode.S
fmt/ioapic.c
fmt/kalloc.c
fmt/kbd.c
fmt/kbd.h
fmt/lapic.c
fmt/main.c
fmt/mmu.h
fmt/mp.c
fmt/mp.h
fmt/param.h
fmt/picirq.c
fmt/pipe.c
fmt/proc.c
fmt/proc.h
fmt/sh.c
fmt/spinlock.c
fmt/spinlock.h
fmt/stat.h
fmt/string.c
fmt/swtch.S
fmt/syscall.c
fmt/syscall.h
fmt/sysfile.c
fmt/sysproc.c
fmt/timer.c
fmt/trap.c
fmt/trapasm.S
fmt/traps.h
fmt/types.h
fmt/usys.S
fmt/x86.h
forktest.c
fs.c
fs.h
fsvar.h
grep.c
hackbench-pseudo-gettimeofday.c
hackbench-pseudo.c
hackbench.c
hackbench/hackbench-pseudo.c
hackbench/hackbench.c
hackbench/pseudo-gettimeofday.c
ide.c
init.c
initcode.S
ioapic.c
kalloc.c
kbd.c
kbd.h
kill.c
lapic.c
ln.c
ls.c
main.c
mkdir.c
mkfs.c
mmu.h
mp.c
mp.h
param.h
picirq.c
pipe.c
printf.c
proc.c
proc.h
pseudo-gettimeofday.c
rm.c
sh.c
spinlock.c
spinlock.h
stat.h
string.c
swtch.S
syscall.c
syscall.h
sysfile.c
sysproc.c
timer.c
trap.c
trapasm.S
traps.h
types.h
ulib.c
umalloc.c
user.h
usertests.c
usys.S
vectors.S
wc.c
x86.h
zombie.c
